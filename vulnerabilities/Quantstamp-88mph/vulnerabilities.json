{
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/mocks/LendingPoolAddressesProviderMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal core;\n",
                    "message": "LendingPoolAddressesProviderMock.core should be constant (LendingPoolAddressesProviderMock.sol#7)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in LendingPoolAddressesProviderMock.sol:\n\t- pragma solidity0.5.17 (LendingPoolAddressesProviderMock.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setLendingPoolImpl(address _pool) external {\n",
                    "message": "Parameter '_pool' of LendingPoolAddressesProviderMock.setLendingPoolImpl (LendingPoolAddressesProviderMock.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal core;\n",
                    "message": "LendingPoolAddressesProviderMock.core (LendingPoolAddressesProviderMock.sol#7) is never used in LendingPoolAddressesProviderMock\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/rewards/IRewards.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in IRewards.sol:\n\t- pragma solidity0.5.17 (IRewards.sol#4): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/rewards/dumpers/imports/Curve.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_17"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in Curve.sol:\n\t- pragma solidity^0.5.17 (Curve.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": 11,
                    "vulnerability_code": "    function remove_liquidity_imbalance(\n\n        uint256[2] calldata amounts,\n\n        uint256 max_burn_amount\n",
                    "message": "Function 'ICurveFi.remove_liquidity_imbalance' (Curve.sol#8-11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 max_burn_amount\n",
                    "message": "Parameter 'max_burn_amount' of ICurveFi.remove_liquidity_imbalance (Curve.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 16,
                    "vulnerability_code": "    function remove_liquidity_imbalance(\n\n        uint256[3] calldata amounts,\n\n        uint256 max_burn_amount\n",
                    "message": "Function 'ICurveFi.remove_liquidity_imbalance' (Curve.sol#13-16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 max_burn_amount\n",
                    "message": "Parameter 'max_burn_amount' of ICurveFi.remove_liquidity_imbalance (Curve.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function remove_liquidity_imbalance(\n\n        uint256[4] calldata amounts,\n\n        uint256 max_burn_amount\n",
                    "message": "Function 'ICurveFi.remove_liquidity_imbalance' (Curve.sol#18-21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 max_burn_amount\n",
                    "message": "Parameter 'max_burn_amount' of ICurveFi.remove_liquidity_imbalance (Curve.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 26,
                    "vulnerability_code": "    function remove_liquidity_imbalance(\n\n        uint256[5] calldata amounts,\n\n        uint256 max_burn_amount\n",
                    "message": "Function 'ICurveFi.remove_liquidity_imbalance' (Curve.sol#23-26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 max_burn_amount\n",
                    "message": "Parameter 'max_burn_amount' of ICurveFi.remove_liquidity_imbalance (Curve.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 29,
                    "vulnerability_code": "    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts)\n",
                    "message": "Function 'ICurveFi.remove_liquidity' (Curve.sol#28-29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 32,
                    "vulnerability_code": "    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts)\n",
                    "message": "Function 'ICurveFi.remove_liquidity' (Curve.sol#31-32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": 35,
                    "vulnerability_code": "    function remove_liquidity(uint256 _amount, uint256[4] calldata amounts)\n",
                    "message": "Function 'ICurveFi.remove_liquidity' (Curve.sol#34-35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "    function remove_liquidity(uint256 _amount, uint256[5] calldata amounts)\n",
                    "message": "Function 'ICurveFi.remove_liquidity' (Curve.sol#37-38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "    function remove_liquidity_one_coin(\n\n        uint256,\n\n        int128,\n\n        uint256\n",
                    "message": "Function 'Zap.remove_liquidity_one_coin' (Curve.sol#42-46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256,\n",
                    "message": "Parameter '' of Zap.remove_liquidity_one_coin (Curve.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        int128,\n",
                    "message": "Parameter '_scope_0' of Zap.remove_liquidity_one_coin (Curve.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256\n",
                    "message": "Parameter '_scope_1' of Zap.remove_liquidity_one_coin (Curve.sol#45) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                }
            ]
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/rewards/dumpers/imports/OneSplitAudit.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in OneSplitAudit.sol:\n\t- pragma solidity0.5.17 (OneSplitAudit.sol#5): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint256 returnAmount, uint256[] memory distribution);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swap(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata distribution,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 flags\n",
                    "message": null
                }
            ]
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/rewards/dumpers/imports/yERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in yERC20.sol:\n\t- pragma solidity0.5.17 (yERC20.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": 16,
                    "vulnerability_code": "interface yERC20 {\n\n    function balanceOf(address owner) external view returns (uint256);\n\n\n\n    function deposit(uint256 _amount) external;\n\n\n\n    function withdraw(uint256 _amount) external;\n\n\n\n    function getPricePerFullShare() external view returns (uint256);\n",
                    "message": "Contract 'yERC20' (yERC20.sol#8-16) is not in CapWords\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/zaps/imports/CurveZapIn.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in CurveZapIn.sol:\n\t- pragma solidity0.5.17 (CurveZapIn.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function ZapIn(\n\n        address toWhomToIssue,\n\n        address fromToken,\n\n        address swapAddress,\n\n        uint256 incomingTokenQty,\n\n        uint256 minPoolTokens\n",
                    "message": "Function 'CurveZapIn.ZapIn' (CurveZapIn.sol#15-21) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/models/interest/IInterestModel.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in IInterestModel.sol:\n\t- pragma solidity0.5.17 (IInterestModel.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/models/fee/IFeeModel.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in IFeeModel.sol:\n\t- pragma solidity0.5.17 (IFeeModel.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/models/issuance/IMPHIssuanceModel.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in IMPHIssuanceModel.sol:\n\t- pragma solidity0.5.17 (IMPHIssuanceModel.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (\n",
                    "message": null
                }
            ]
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/models/interest-oracle/IInterestOracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in IInterestOracle.sol:\n\t- pragma solidity0.5.17 (IInterestOracle.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateAndQuery() external returns (bool updated, uint256 value);\n",
                    "message": null
                }
            ]
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/libs/CloneFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": 60,
                    "vulnerability_code": "  function isClone(address target, address query) internal view returns (bool result) {\n\n    bytes20 targetBytes = bytes20(target);\n\n    assembly {\n\n      let clone := mload(0x40)\n\n      mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\n\n      mstore(add(clone, 0xa), targetBytes)\n\n      mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n\n\n      let other := add(clone, 0x40)\n\n      extcodecopy(query, other, 0, 0x2d)\n\n      result := and(\n\n        eq(mload(clone), mload(other)),\n\n        eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\n\n      )\n\n    }\n",
                    "message": "CloneFactory.isClone (CloneFactory.sol#45-60) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": 43,
                    "vulnerability_code": "  function createClone(address target) internal returns (address result) {\n\n    bytes20 targetBytes = bytes20(target);\n\n    assembly {\n\n      let clone := mload(0x40)\n\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n\n      mstore(add(clone, 0x14), targetBytes)\n\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n      result := create(0, clone, 0x37)\n\n    }\n",
                    "message": "CloneFactory.createClone uses assembly (CloneFactory.sol#34-43)\n\t- CloneFactory.sol#36-42\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": 60,
                    "vulnerability_code": "  function isClone(address target, address query) internal view returns (bool result) {\n\n    bytes20 targetBytes = bytes20(target);\n\n    assembly {\n\n      let clone := mload(0x40)\n\n      mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\n\n      mstore(add(clone, 0xa), targetBytes)\n\n      mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n\n\n      let other := add(clone, 0x40)\n\n      extcodecopy(query, other, 0, 0x2d)\n\n      result := and(\n\n        eq(mload(clone), mload(other)),\n\n        eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\n\n      )\n\n    }\n",
                    "message": "CloneFactory.isClone uses assembly (CloneFactory.sol#45-60)\n\t- CloneFactory.sol#47-59\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in CloneFactory.sol:\n\t- pragma solidity0.5.17 (CloneFactory.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createClone(address target) internal returns (address result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isClone(address target, address query) internal view returns (bool result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isClone(address target, address query) internal view returns (bool result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/moneymarkets/IMoneyMarket.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in IMoneyMarket.sol:\n\t- pragma solidity0.5.17 (IMoneyMarket.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/moneymarkets/yvault/imports/Vault.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in Vault.sol:\n\t- pragma solidity0.5.17 (Vault.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint256) external;\n",
                    "message": "Parameter '' of Vault.deposit (Vault.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint256) external;\n",
                    "message": "Parameter '' of Vault.withdraw (Vault.sol#10) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/moneymarkets/harvest/imports/HarvestStaking.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in HarvestStaking.sol:\n\t- pragma solidity0.5.17 (HarvestStaking.sol#5): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/moneymarkets/harvest/imports/HarvestVault.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in HarvestVault.sol:\n\t- pragma solidity0.5.17 (HarvestVault.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint256) external;\n",
                    "message": "Parameter '' of HarvestVault.deposit (HarvestVault.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint256) external;\n",
                    "message": "Parameter '' of HarvestVault.withdraw (HarvestVault.sol#10) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/moneymarkets/aave/imports/ILendingPool.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in ILendingPool.sol:\n\t- pragma solidity0.5.17 (ILendingPool.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/moneymarkets/aave/imports/ILendingPoolAddressesProvider.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in ILendingPoolAddressesProvider.sol:\n\t- pragma solidity0.5.17 (ILendingPoolAddressesProvider.sol#4): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/moneymarkets/compound/imports/ICERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in ICERC20.sol:\n\t- pragma solidity0.5.17 (ICERC20.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint256, uint256, uint256, uint256);\n",
                    "message": null
                }
            ]
        }
    },
    "88mph-contracts-2fc696b2573c0c06b2613cb9abd09f87c2509041/contracts/moneymarkets/compound/imports/IComptroller.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.17;\n",
                    "message": "Detected issues with version pragma in IComptroller.sol:\n\t- pragma solidity0.5.17 (IComptroller.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    }
}