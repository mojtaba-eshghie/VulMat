{
    "Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _addresses.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _accounts.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 499,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _accounts.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j; j < _addresses.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        isAdmin[owner] = true;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wallet = owner;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public checkDateOrder() {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now < dateMainStart);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < LOCK_SLOTS; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < LOCK_SLOTS; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < LOCK_SLOTS; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _addresses.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _accounts.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 499,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _accounts.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j; j < _addresses.length; j++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_term > now, \"lock term must be in the future\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(idx != 9999, \"registerLockedTokens: no available slot found\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tokens <= availableToMint(), \"not enough tokens available to mint\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_term == 0 || _term > now, \"either without lock term, or lock term must be in the future\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now < _unixts && now < dateMainStart);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now < _unixts && now < dateMainEnd);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tokens > 0 && _tokens <= unlockedTokensInternal(msg.sender));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (now > dateMainStart && now <= dateMainStart + 1 days) return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (now > dateMainStart && now < dateMainEnd) return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < LOCK_SLOTS; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < LOCK_SLOTS; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < LOCK_SLOTS; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _addresses.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _accounts.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 499,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _accounts.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j; j < _addresses.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(idx != 9999, \"registerLockedTokens: no available slot found\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tokens <= availableToMint(), \"not enough tokens available to mint\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_term == 0 || _term > now, \"either without lock term, or lock term must be in the future\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_98"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j; j < _addresses.length; j++) {\n",
                    "message": "j in FantomToken.transferMultiple (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#621) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _addresses.length; i++) {\n",
                    "message": "i in FantomToken.addToWhitelistMultiple (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#445) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 499,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _accounts.length; i++) {\n",
                    "message": "i in FantomToken.mintTokensLockedMultiple (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#499) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < LOCK_SLOTS; i++) {\n",
                    "message": "i in LockSlots.registerLockedTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#224) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint eth_returned;\n",
                    "message": "eth_returned in FantomToken.buyTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#550) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < LOCK_SLOTS; i++) {\n",
                    "message": "i in LockSlots.isAvailableLockSlot (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#258) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < LOCK_SLOTS; i++) {\n",
                    "message": "i in LockSlots.pNumberOfLockedTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#277) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _accounts.length; i++) {\n",
                    "message": "i in FantomToken.mintTokensMultiple (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#487) is a local variable never initialiazed\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        require(_newOwner != address(0x0));\n\n        emit OwnershipTransferProposed(owner, _newOwner);\n\n        newOwner = _newOwner;\n",
                    "message": "Owned.transferOwnership (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#71-75) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 81,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner);\n\n        emit OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n",
                    "message": "Owned.acceptOwnership (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#77-81) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "    function addAdmin(address _a) public onlyOwner {\n\n        require(isAdmin[_a] == false);\n\n        isAdmin[_a] = true;\n\n        emit AdminChange(_a, true);\n",
                    "message": "Owned.addAdmin (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#83-87) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 93,
                    "vulnerability_code": "    function removeAdmin(address _a) public onlyOwner {\n\n        require(isAdmin[_a] == true);\n\n        isAdmin[_a] = false;\n\n        emit AdminChange(_a, false);\n",
                    "message": "Owned.removeAdmin (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#89-93) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function setWallet(address _wallet) public onlyOwner {\n\n        require(_wallet != address(0x0));\n\n        wallet = _wallet;\n\n        emit WalletUpdated(_wallet);\n",
                    "message": "Wallet.setWallet (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#114-118) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": 160,
                    "vulnerability_code": "    function totalSupply() public view returns (uint) {\n\n        return tokensIssuedTotal;\n",
                    "message": "ERC20Token.totalSupply (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#158-160) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
                    "message": "ERC20Interface.totalSupply (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#134) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": 165,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint) {\n\n        return balances[_owner];\n",
                    "message": "ERC20Token.balanceOf (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#163-165) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint balance);\n",
                    "message": "ERC20Interface.balanceOf (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#135) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 180,
                    "vulnerability_code": "    function approve(address _spender, uint _amount) public returns (bool) {\n\n        allowed[msg.sender][_spender] = _amount;\n\n        emit Approval(msg.sender, _spender, _amount);\n\n        return true;\n",
                    "message": "ERC20Token.approve (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#176-180) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public returns (bool success);\n",
                    "message": "ERC20Interface.approve (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#138) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint remaining);\n",
                    "message": "ERC20Interface.allowance (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#139) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 193,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "ERC20Token.allowance (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#191-193) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": 252,
                    "vulnerability_code": "    function unlockedTokens(address _account) public view returns (uint) {\n\n        return balances[_account].sub(lockedTokens(_account));\n",
                    "message": "LockSlots.unlockedTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#250-252) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "    function isAvailableLockSlot(address _account, uint _term) public view returns (bool) {\n\n        if (!mayHaveLockedTokens[_account]) return true;\n\n        if (_term < now) return true;\n\n        uint[LOCK_SLOTS] storage term = lockTerm[_account];\n\n        for (uint i; i < LOCK_SLOTS; i++) {\n\n            if (term[i] < now || term[i] == _term) return true;\n\n        }\n\n        return false;\n",
                    "message": "LockSlots.isAvailableLockSlot (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#254-262) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "    function setDateMainStart(uint _unixts) public onlyOwner checkDateOrder {\n\n        require(now < _unixts && now < dateMainStart);\n\n        dateMainStart = _unixts;\n\n        emit IcoDateUpdated(1, _unixts);\n",
                    "message": "FantomIcoDates.setDateMainStart (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#314-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "    function setDateMainEnd(uint _unixts) public onlyOwner checkDateOrder {\n\n        require(now < _unixts && now < dateMainEnd);\n\n        dateMainEnd = _unixts;\n\n        emit IcoDateUpdated(2, _unixts);\n",
                    "message": "FantomIcoDates.setDateMainEnd (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#320-324) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "    function () public payable {\n\n        buyTokens();\n",
                    "message": "FantomToken.fallback (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#415-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": 442,
                    "vulnerability_code": "    function addToWhitelist(address _account) public onlyAdmin {\n\n        pWhitelist(_account);\n",
                    "message": "FantomToken.addToWhitelist (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#440-442) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 448,
                    "vulnerability_code": "    function addToWhitelistMultiple(address[] _addresses) public onlyAdmin {\n\n        for (uint i; i < _addresses.length; i++) {\n\n            pWhitelist(_addresses[i]);\n\n        }\n",
                    "message": "FantomToken.addToWhitelistMultiple (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#444-448) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": 463,
                    "vulnerability_code": "    function updateTokensPerEth(uint _tokens_per_eth) public onlyOwner {\n\n        require(now < dateMainStart);\n\n        tokensPerEth = _tokens_per_eth;\n\n        emit UpdatedTokensPerEth(tokensPerEth);\n",
                    "message": "FantomToken.updateTokensPerEth (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#459-463) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": 472,
                    "vulnerability_code": "    function makeTradeable() public {\n\n        require(msg.sender == owner || now > dateMainEnd + 20 weeks);\n\n        tokensTradeable = true;\n",
                    "message": "FantomToken.makeTradeable (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#469-472) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": 477,
                    "vulnerability_code": "    function openMigrationPhase() public onlyOwner {\n\n        require(now > dateMainEnd);\n\n        isMigrationPhaseOpen = true;\n",
                    "message": "FantomToken.openMigrationPhase (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#474-477) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": 483,
                    "vulnerability_code": "    function mintTokens(uint _mint_type, address _account, uint _tokens) public onlyOwner {\n\n        pMintTokens(_mint_type, _account, _tokens, 0);\n",
                    "message": "FantomToken.mintTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#481-483) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": 490,
                    "vulnerability_code": "    function mintTokensMultiple(uint _mint_type, address[] _accounts, uint[] _tokens) public onlyOwner {\n\n        require(_accounts.length == _tokens.length);\n\n        for (uint i; i < _accounts.length; i++) {\n\n            pMintTokens(_mint_type, _accounts[i], _tokens[i], 0);\n\n        }\n",
                    "message": "FantomToken.mintTokensMultiple (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#485-490) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "    function mintTokensLocked(uint _mint_type, address _account, uint _tokens, uint _term) public onlyOwner {\n\n        pMintTokens(_mint_type, _account, _tokens, _term);\n",
                    "message": "FantomToken.mintTokensLocked (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#492-494) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": 502,
                    "vulnerability_code": "    function mintTokensLockedMultiple(uint _mint_type, address[] _accounts, uint[] _tokens, uint[] _terms) public onlyOwner {\n\n        require(_accounts.length == _tokens.length);\n\n        require(_accounts.length == _terms.length);\n\n        for (uint i; i < _accounts.length; i++) {\n\n            pMintTokens(_mint_type, _accounts[i], _tokens[i], _terms[i]);\n\n        }\n",
                    "message": "FantomToken.mintTokensLockedMultiple (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#496-502) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": 579,
                    "vulnerability_code": "    function requestTokenExchangeMax() public {\n\n        requestTokenExchange(unlockedTokensInternal(msg.sender));\n",
                    "message": "FantomToken.requestTokenExchangeMax (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#577-579) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": 596,
                    "vulnerability_code": "    function transferAnyERC20Token(address _token_address, uint _amount) public onlyOwner returns (bool success) {\n\n        return ERC20Interface(_token_address).transfer(owner, _amount);\n",
                    "message": "FantomToken.transferAnyERC20Token (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#594-596) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol:\n\t- pragma solidity^0.4.23 (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#7): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Owned.transferOwnership (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addAdmin(address _a) public onlyOwner {\n",
                    "message": "Parameter '_a' of Owned.addAdmin (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeAdmin(address _a) public onlyOwner {\n",
                    "message": "Parameter '_a' of Owned.removeAdmin (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#89) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setWallet(address _wallet) public onlyOwner {\n",
                    "message": "Parameter '_wallet' of Wallet.setWallet (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#114) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint) {\n",
                    "message": "Parameter '_owner' of ERC20Token.balanceOf (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#163) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _amount) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC20Token.transfer (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#168) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of ERC20Token.transfer (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#168) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\n",
                    "message": "Parameter '_from' of ERC20Token.transferFrom (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#182) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC20Token.transferFrom (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#182) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of ERC20Token.transferFrom (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#182) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _amount) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ERC20Token.approve (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _amount) public returns (bool) {\n",
                    "message": "Parameter '_amount' of ERC20Token.approve (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint) {\n",
                    "message": "Parameter '_owner' of ERC20Token.allowance (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint) {\n",
                    "message": "Parameter '_spender' of ERC20Token.allowance (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function registerLockedTokens(address _account, uint _tokens, uint _term) internal returns (uint idx) {\n",
                    "message": "Parameter '_account' of LockSlots.registerLockedTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#215) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function registerLockedTokens(address _account, uint _tokens, uint _term) internal returns (uint idx) {\n",
                    "message": "Parameter '_tokens' of LockSlots.registerLockedTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#215) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function registerLockedTokens(address _account, uint _tokens, uint _term) internal returns (uint idx) {\n",
                    "message": "Parameter '_term' of LockSlots.registerLockedTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#215) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function lockedTokens(address _account) public view returns (uint) {\n",
                    "message": "Parameter '_account' of LockSlots.lockedTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#245) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unlockedTokens(address _account) public view returns (uint) {\n",
                    "message": "Parameter '_account' of LockSlots.unlockedTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#250) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isAvailableLockSlot(address _account, uint _term) public view returns (bool) {\n",
                    "message": "Parameter '_account' of LockSlots.isAvailableLockSlot (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#254) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isAvailableLockSlot(address _account, uint _term) public view returns (bool) {\n",
                    "message": "Parameter '_term' of LockSlots.isAvailableLockSlot (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#254) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unlockedTokensInternal(address _account) internal returns (uint) {\n",
                    "message": "Parameter '_account' of LockSlots.unlockedTokensInternal (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#266) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pNumberOfLockedTokens(address _account) private view returns (uint locked) {\n",
                    "message": "Parameter '_account' of LockSlots.pNumberOfLockedTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#274) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDateMainStart(uint _unixts) public onlyOwner checkDateOrder {\n",
                    "message": "Parameter '_unixts' of FantomIcoDates.setDateMainStart (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#314) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDateMainEnd(uint _unixts) public onlyOwner checkDateOrder {\n",
                    "message": "Parameter '_unixts' of FantomIcoDates.setDateMainEnd (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#320) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _amount) public returns (bool success) {\n",
                    "message": "Parameter '_to' of FantomToken.transfer (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#600) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _amount) public returns (bool success) {\n",
                    "message": "Parameter '_amount' of FantomToken.transfer (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#600) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {\n",
                    "message": "Parameter '_from' of FantomToken.transferFrom (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#608) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {\n",
                    "message": "Parameter '_to' of FantomToken.transferFrom (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#608) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {\n",
                    "message": "Parameter '_amount' of FantomToken.transferFrom (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#608) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ethToTokens(uint _eth) public view returns (uint tokens) {\n",
                    "message": "Parameter '_eth' of FantomToken.ethToTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#430) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokensToEth(uint _tokens) public view returns (uint eth) {\n",
                    "message": "Parameter '_tokens' of FantomToken.tokensToEth (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#434) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addToWhitelist(address _account) public onlyAdmin {\n",
                    "message": "Parameter '_account' of FantomToken.addToWhitelist (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#440) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addToWhitelistMultiple(address[] _addresses) public onlyAdmin {\n",
                    "message": "Parameter '_addresses' of FantomToken.addToWhitelistMultiple (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#444) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pWhitelist(address _account) internal {\n",
                    "message": "Parameter '_account' of FantomToken.pWhitelist (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#450) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateTokensPerEth(uint _tokens_per_eth) public onlyOwner {\n",
                    "message": "Parameter '_tokens_per_eth' of FantomToken.updateTokensPerEth (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#459) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokens(uint _mint_type, address _account, uint _tokens) public onlyOwner {\n",
                    "message": "Parameter '_mint_type' of FantomToken.mintTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#481) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokens(uint _mint_type, address _account, uint _tokens) public onlyOwner {\n",
                    "message": "Parameter '_account' of FantomToken.mintTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#481) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokens(uint _mint_type, address _account, uint _tokens) public onlyOwner {\n",
                    "message": "Parameter '_tokens' of FantomToken.mintTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#481) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokensMultiple(uint _mint_type, address[] _accounts, uint[] _tokens) public onlyOwner {\n",
                    "message": "Parameter '_mint_type' of FantomToken.mintTokensMultiple (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#485) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokensMultiple(uint _mint_type, address[] _accounts, uint[] _tokens) public onlyOwner {\n",
                    "message": "Parameter '_accounts' of FantomToken.mintTokensMultiple (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#485) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokensMultiple(uint _mint_type, address[] _accounts, uint[] _tokens) public onlyOwner {\n",
                    "message": "Parameter '_tokens' of FantomToken.mintTokensMultiple (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#485) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokensLocked(uint _mint_type, address _account, uint _tokens, uint _term) public onlyOwner {\n",
                    "message": "Parameter '_mint_type' of FantomToken.mintTokensLocked (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#492) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokensLocked(uint _mint_type, address _account, uint _tokens, uint _term) public onlyOwner {\n",
                    "message": "Parameter '_account' of FantomToken.mintTokensLocked (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#492) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokensLocked(uint _mint_type, address _account, uint _tokens, uint _term) public onlyOwner {\n",
                    "message": "Parameter '_tokens' of FantomToken.mintTokensLocked (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#492) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokensLocked(uint _mint_type, address _account, uint _tokens, uint _term) public onlyOwner {\n",
                    "message": "Parameter '_term' of FantomToken.mintTokensLocked (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#492) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokensLockedMultiple(uint _mint_type, address[] _accounts, uint[] _tokens, uint[] _terms) public onlyOwner {\n",
                    "message": "Parameter '_mint_type' of FantomToken.mintTokensLockedMultiple (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#496) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokensLockedMultiple(uint _mint_type, address[] _accounts, uint[] _tokens, uint[] _terms) public onlyOwner {\n",
                    "message": "Parameter '_accounts' of FantomToken.mintTokensLockedMultiple (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#496) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokensLockedMultiple(uint _mint_type, address[] _accounts, uint[] _tokens, uint[] _terms) public onlyOwner {\n",
                    "message": "Parameter '_tokens' of FantomToken.mintTokensLockedMultiple (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#496) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokensLockedMultiple(uint _mint_type, address[] _accounts, uint[] _tokens, uint[] _terms) public onlyOwner {\n",
                    "message": "Parameter '_terms' of FantomToken.mintTokensLockedMultiple (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#496) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pMintTokens(uint _mint_type, address _account, uint _tokens, uint _term) private {\n",
                    "message": "Parameter '_mint_type' of FantomToken.pMintTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#504) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pMintTokens(uint _mint_type, address _account, uint _tokens, uint _term) private {\n",
                    "message": "Parameter '_account' of FantomToken.pMintTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#504) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pMintTokens(uint _mint_type, address _account, uint _tokens, uint _term) private {\n",
                    "message": "Parameter '_tokens' of FantomToken.pMintTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#504) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pMintTokens(uint _mint_type, address _account, uint _tokens, uint _term) private {\n",
                    "message": "Parameter '_term' of FantomToken.pMintTokens (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#504) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 581,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function requestTokenExchange(uint _tokens) public {\n",
                    "message": "Parameter '_tokens' of FantomToken.requestTokenExchange (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#581) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferAnyERC20Token(address _token_address, uint _amount) public onlyOwner returns (bool success) {\n",
                    "message": "Parameter '_token_address' of FantomToken.transferAnyERC20Token (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#594) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferAnyERC20Token(address _token_address, uint _amount) public onlyOwner returns (bool success) {\n",
                    "message": "Parameter '_amount' of FantomToken.transferAnyERC20Token (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#594) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferMultiple(address[] _addresses, uint[] _amounts) external {\n",
                    "message": "Parameter '_addresses' of FantomToken.transferMultiple (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#616) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferMultiple(address[] _addresses, uint[] _amounts) external {\n",
                    "message": "Parameter '_amounts' of FantomToken.transferMultiple (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#616) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant E18 = 10**18;\n",
                    "message": "FantomToken.E18 (Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol#350) is never used in FantomToken\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0x0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_wallet != address(0x0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _amount) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < LOCK_SLOTS; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < LOCK_SLOTS; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < LOCK_SLOTS; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _addresses.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _accounts.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 499,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _accounts.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j; j < _addresses.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _addresses.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _accounts.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 499,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i; i < _accounts.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint j; j < _addresses.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setWallet(address _wallet) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDateMainStart(uint _unixts) public onlyOwner checkDateOrder {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDateMainEnd(uint _unixts) public onlyOwner checkDateOrder {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function () public payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addToWhitelistMultiple(address[] _addresses) public onlyAdmin {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokensMultiple(uint _mint_type, address[] _accounts, uint[] _tokens) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokensMultiple(uint _mint_type, address[] _accounts, uint[] _tokens) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokensLockedMultiple(uint _mint_type, address[] _accounts, uint[] _tokens, uint[] _terms) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokensLockedMultiple(uint _mint_type, address[] _accounts, uint[] _tokens, uint[] _terms) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintTokensLockedMultiple(uint _mint_type, address[] _accounts, uint[] _tokens, uint[] _terms) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping (address => uint)) allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant E18 = 10**18;\n",
                    "message": null
                }
            ]
        }
    }
}