{
    "real_contract-master/contracts/MiniMeToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "           require((_to != 0) && (_to != address(this)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_73"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": "MiniMeToken.balances (MiniMeToken.sol#113) is never initialized. It is used in:\n\t- doTransfer (MiniMeToken.sol#206-244)\n\t- balanceOfAt (MiniMeToken.sol#323-344)\n\t- generateTokens (MiniMeToken.sol#416-426)\n\t- destroyTokens (MiniMeToken.sol#433-443)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract (MiniMeToken.sol#507-514) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\n\n        // Alerts the token controller of the approve function call\n\n        if (isContract(controller)) {\n\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n\n        }\n\n\n\n        allowed[msg.sender][_spender] = _amount;\n\n        Approval(msg.sender, _spender, _amount);\n\n        return true;\n",
                    "message": "Reentrancy in MiniMeToken.approve (MiniMeToken.sol#258-275):\n\tExternal calls:\n\t- require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (MiniMeToken.sol#269)\n\tState variables written after the call(s):\n\t- allowed (MiniMeToken.sol#272)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (MiniMeToken.sol#537-547) does not use the value returned by external calls:\n\t-token.transfer(controller,balance) (MiniMeToken.sol#545)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint min = 0;\n",
                    "message": "MiniMeToken.getValueAt.min (local variable @ MiniMeToken.sol#474) shadows:\n\t- MiniMeToken.min (function @ MiniMeToken.sol#517-519)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract uses assembly (MiniMeToken.sol#507-514)\n\t- MiniMeToken.sol#510-513\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\n",
                    "message": "MiniMeToken.version should be constant (MiniMeToken.sol#84)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
                    "message": "TokenController.proxyPayment (MiniMeToken.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": "TokenController.onTransfer (MiniMeToken.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": "TokenController.onApprove (MiniMeToken.sol#52-53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 69,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n\n        controller = _newController;\n",
                    "message": "Controlled.changeController (MiniMeToken.sol#67-69) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": "ApproveAndCallFallBack.receiveApproval (MiniMeToken.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n        return doTransfer(msg.sender, _to, _amount);\n",
                    "message": "MiniMeToken.transfer (MiniMeToken.sol#172-175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n\n    ) returns (bool success) {\n\n\n\n        // The controller of this contract can move tokens around at will,\n\n        //  this is important to recognize! Confirm that you trust the\n\n        //  controller of this contract, which in most situations should be\n\n        //  another open source smart contract or 0x0\n\n        if (msg.sender != controller) {\n\n            require(transfersEnabled);\n\n\n\n            // The standard ERC 20 transferFrom functionality\n\n            if (allowed[_from][msg.sender] < _amount) return false;\n\n            allowed[_from][msg.sender] -= _amount;\n\n        }\n\n        return doTransfer(_from, _to, _amount);\n",
                    "message": "MiniMeToken.transferFrom (MiniMeToken.sol#183-198) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n\n    ) constant returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "MiniMeToken.allowance (MiniMeToken.sol#282-285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n\n    ) returns (bool success) {\n\n        require(approve(_spender, _amount));\n\n\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n\n            msg.sender,\n\n            _amount,\n\n            this,\n\n            _extraData\n\n        );\n\n\n\n        return true;\n",
                    "message": "MiniMeToken.approveAndCall (MiniMeToken.sol#294-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "    function createCloneToken(\n\n        string _cloneTokenName,\n\n        uint8 _cloneDecimalUnits,\n\n        string _cloneTokenSymbol,\n\n        uint _snapshotBlock,\n\n        bool _transfersEnabled\n\n        ) returns(address) {\n\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n\n            this,\n\n            _snapshotBlock,\n\n            _cloneTokenName,\n\n            _cloneDecimalUnits,\n\n            _cloneTokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        cloneToken.changeController(msg.sender);\n\n\n\n        // An event to make the token easy to find on the blockchain\n\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n\n        return address(cloneToken);\n",
                    "message": "MiniMeToken.createCloneToken (MiniMeToken.sol#384-406) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 426,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n\n        uint previousBalanceTo = balanceOf(_owner);\n\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n\n        Transfer(0, _owner, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.generateTokens (MiniMeToken.sol#416-426) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": 443,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply >= _amount);\n\n        uint previousBalanceFrom = balanceOf(_owner);\n\n        require(previousBalanceFrom >= _amount);\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n\n        Transfer(_owner, 0, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.destroyTokens (MiniMeToken.sol#433-443) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 454,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n\n        transfersEnabled = _transfersEnabled;\n",
                    "message": "MiniMeToken.enableTransfers (MiniMeToken.sol#452-454) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "    function ()  payable {\n\n        require(isContract(controller));\n\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
                    "message": "MiniMeToken.fallback (MiniMeToken.sol#524-527) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (MiniMeToken.sol#537-547) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function createCloneToken(\n\n        address _parentToken,\n\n        uint _snapshotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) returns (MiniMeToken) {\n\n        MiniMeToken newToken = new MiniMeToken(\n\n            this,\n\n            _parentToken,\n\n            _snapshotBlock,\n\n            _tokenName,\n\n            _decimalUnits,\n\n            _tokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        newToken.changeController(msg.sender);\n\n        return newToken;\n",
                    "message": "MiniMeTokenFactory.createCloneToken (MiniMeToken.sol#583-603) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in MiniMeToken.sol:\n\t- pragma solidity^0.4.11 (MiniMeToken.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": "Function 'Controlled.Controlled' (MiniMeToken.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": "Parameter '_newController' of Controlled.changeController (MiniMeToken.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "    function MiniMeToken(\n\n        address _tokenFactory,\n\n        address _parentToken,\n\n        uint _parentSnapShotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) {\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n\n        name = _tokenName;                                 // Set the name\n\n        decimals = _decimalUnits;                          // Set the decimals\n\n        symbol = _tokenSymbol;                             // Set the symbol\n\n        parentToken = MiniMeToken(_parentToken);\n\n        parentSnapShotBlock = _parentSnapShotBlock;\n\n        transfersEnabled = _transfersEnabled;\n\n        creationBlock = block.number;\n",
                    "message": "Function 'MiniMeToken.MiniMeToken' (MiniMeToken.sol#144-161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenFactory,\n",
                    "message": "Parameter '_tokenFactory' of MiniMeToken.MiniMeToken (MiniMeToken.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeToken.MiniMeToken (MiniMeToken.sol#146) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _parentSnapShotBlock,\n",
                    "message": "Parameter '_parentSnapShotBlock' of MiniMeToken.MiniMeToken (MiniMeToken.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeToken.MiniMeToken (MiniMeToken.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeToken.MiniMeToken (MiniMeToken.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeToken.MiniMeToken (MiniMeToken.sol#150) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.MiniMeToken (MiniMeToken.sol#151) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_to' of MiniMeToken.transfer (MiniMeToken.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.transfer (MiniMeToken.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.transferFrom (MiniMeToken.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.transferFrom (MiniMeToken.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.transferFrom (MiniMeToken.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.doTransfer (MiniMeToken.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.doTransfer (MiniMeToken.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.doTransfer (MiniMeToken.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOf (MiniMeToken.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_spender' of MiniMeToken.approve (MiniMeToken.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.approve (MiniMeToken.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_owner' of MiniMeToken.allowance (MiniMeToken.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_spender' of MiniMeToken.allowance (MiniMeToken.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_spender' of MiniMeToken.approveAndCall (MiniMeToken.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_amount' of MiniMeToken.approveAndCall (MiniMeToken.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_extraData' of MiniMeToken.approveAndCall (MiniMeToken.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOfAt (MiniMeToken.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.balanceOfAt (MiniMeToken.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.totalSupplyAt (MiniMeToken.sol#349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenName,\n",
                    "message": "Parameter '_cloneTokenName' of MiniMeToken.createCloneToken (MiniMeToken.sol#385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _cloneDecimalUnits,\n",
                    "message": "Parameter '_cloneDecimalUnits' of MiniMeToken.createCloneToken (MiniMeToken.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenSymbol,\n",
                    "message": "Parameter '_cloneTokenSymbol' of MiniMeToken.createCloneToken (MiniMeToken.sol#387) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeToken.createCloneToken (MiniMeToken.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.createCloneToken (MiniMeToken.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.generateTokens (MiniMeToken.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.generateTokens (MiniMeToken.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.destroyTokens (MiniMeToken.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.destroyTokens (MiniMeToken.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.enableTransfers (MiniMeToken.sol#452) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": "Parameter '_block' of MiniMeToken.getValueAt (MiniMeToken.sol#464) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n",
                    "message": "Parameter '_value' of MiniMeToken.updateValueAtNow (MiniMeToken.sol#491) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": "Parameter '_addr' of MiniMeToken.isContract (MiniMeToken.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": "Parameter '_token' of MiniMeToken.claimTokens (MiniMeToken.sol#537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeTokenFactory.createCloneToken (MiniMeToken.sol#584) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeTokenFactory.createCloneToken (MiniMeToken.sol#585) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeTokenFactory.createCloneToken (MiniMeToken.sol#586) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeTokenFactory.createCloneToken (MiniMeToken.sol#587) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeTokenFactory.createCloneToken (MiniMeToken.sol#588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeTokenFactory.createCloneToken (MiniMeToken.sol#589) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (max > min) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MiniMeToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ()  payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Checkpoint[] totalSupplyHistory;\n",
                    "message": null
                }
            ]
        }
    },
    "real_contract-master/contracts/REALPlaceHolder.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "           require((_to != 0) && (_to != address(this)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(getBlockNumber() >= startBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                getBlockNumber() <= endBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                finalizedBlock == 0 &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address(REAL) != 0x0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_25"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": "MiniMeToken.balances (REALPlaceHolder.sol#113) is never initialized. It is used in:\n\t- doTransfer (REALPlaceHolder.sol#206-244)\n\t- balanceOfAt (REALPlaceHolder.sol#323-344)\n\t- generateTokens (REALPlaceHolder.sol#416-426)\n\t- destroyTokens (REALPlaceHolder.sol#433-443)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract (REALPlaceHolder.sol#507-514) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\n\n        // Alerts the token controller of the approve function call\n\n        if (isContract(controller)) {\n\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n\n        }\n\n\n\n        allowed[msg.sender][_spender] = _amount;\n\n        Approval(msg.sender, _spender, _amount);\n\n        return true;\n",
                    "message": "Reentrancy in MiniMeToken.approve (REALPlaceHolder.sol#258-275):\n\tExternal calls:\n\t- require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (REALPlaceHolder.sol#269)\n\tState variables written after the call(s):\n\t- allowed (REALPlaceHolder.sol#272)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1372,
                    "vulnerability_to_line": 1383,
                    "vulnerability_code": "    function transferable(address _from) internal returns (bool) {\n\n        // Allow the exchanger to work from the beginning\n\n        if (activationTime == 0) {\n\n            uint256 f = contribution.finalizedTime();\n\n            if (f > 0) {\n\n                activationTime = f.add(1 weeks);\n\n            } else {\n\n                return false;\n\n            }\n\n        }\n\n        return (getTime() > activationTime) || (_from == owner);\n",
                    "message": "Reentrancy in REALPlaceHolder.transferable (REALPlaceHolder.sol#1372-1383):\n\tExternal calls:\n\t- f = contribution.finalizedTime() (REALPlaceHolder.sol#1375)\n\tState variables written after the call(s):\n\t- activationTime (REALPlaceHolder.sol#1377)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (REALPlaceHolder.sol#537-547) does not use the value returned by external calls:\n\t-token.transfer(controller,balance) (REALPlaceHolder.sol#545)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (REALPlaceHolder.sol#1261-1274) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (REALPlaceHolder.sol#1272)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1404,
                    "vulnerability_to_line": 1417,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (real.controller() == address(this)) {\n\n            real.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALPlaceHolder.claimTokens (REALPlaceHolder.sol#1404-1417) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (REALPlaceHolder.sol#1415)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint min = 0;\n",
                    "message": "MiniMeToken.getValueAt.min (local variable @ REALPlaceHolder.sol#474) shadows:\n\t- MiniMeToken.min (function @ REALPlaceHolder.sol#517-519)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "Reentrancy in REALCrowdsale.initialize (REALPlaceHolder.sol#863-900):\n\tExternal calls:\n\t- require(bool)(REAL.totalSupply() == 0) (REALPlaceHolder.sol#877)\n\t- require(bool)(REAL.controller() == address(this)) (REALPlaceHolder.sol#878)\n\t- require(bool)(REAL.decimals() == 18) (REALPlaceHolder.sol#879)\n\tState variables written after the call(s):\n\t- destEthTeam (REALPlaceHolder.sol#890)\n\t- destTokensBounties (REALPlaceHolder.sol#899)\n\t- destTokensReserve (REALPlaceHolder.sol#893)\n\t- destTokensTeam (REALPlaceHolder.sol#896)\n\t- endBlock (REALPlaceHolder.sol#887)\n\t- realController (REALPlaceHolder.sol#882)\n\t- startBlock (REALPlaceHolder.sol#886)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract uses assembly (REALPlaceHolder.sol#507-514)\n\t- REALPlaceHolder.sol#510-513\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalSupply;\n",
                    "message": "ERC20Token.totalSupply should be constant (REALPlaceHolder.sol#719)\nMiniMeToken.version should be constant (REALPlaceHolder.sol#84)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": 1366,
                    "vulnerability_code": "    function onTransfer(address _from, address, uint256) public returns (bool) {\n\n      return transferable(_from);\n",
                    "message": "REALPlaceHolder.onTransfer (REALPlaceHolder.sol#1364-1366) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": "TokenController.onTransfer (REALPlaceHolder.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": 946,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onTransfer (REALPlaceHolder.sol#944-946) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": "TokenController.onApprove (REALPlaceHolder.sol#52-53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": 950,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onApprove (REALPlaceHolder.sol#948-950) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": 1370,
                    "vulnerability_code": "    function onApprove(address _from, address, uint256) public returns (bool) {\n\n        return transferable(_from);\n",
                    "message": "REALPlaceHolder.onApprove (REALPlaceHolder.sol#1368-1370) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 69,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n\n        controller = _newController;\n",
                    "message": "Controlled.changeController (REALPlaceHolder.sol#67-69) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": "ApproveAndCallFallBack.receiveApproval (REALPlaceHolder.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n        return doTransfer(msg.sender, _to, _amount);\n",
                    "message": "MiniMeToken.transfer (REALPlaceHolder.sol#172-175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n\n    ) returns (bool success) {\n\n\n\n        // The controller of this contract can move tokens around at will,\n\n        //  this is important to recognize! Confirm that you trust the\n\n        //  controller of this contract, which in most situations should be\n\n        //  another open source smart contract or 0x0\n\n        if (msg.sender != controller) {\n\n            require(transfersEnabled);\n\n\n\n            // The standard ERC 20 transferFrom functionality\n\n            if (allowed[_from][msg.sender] < _amount) return false;\n\n            allowed[_from][msg.sender] -= _amount;\n\n        }\n\n        return doTransfer(_from, _to, _amount);\n",
                    "message": "MiniMeToken.transferFrom (REALPlaceHolder.sol#183-198) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n\n    ) constant returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "MiniMeToken.allowance (REALPlaceHolder.sol#282-285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n\n    ) returns (bool success) {\n\n        require(approve(_spender, _amount));\n\n\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n\n            msg.sender,\n\n            _amount,\n\n            this,\n\n            _extraData\n\n        );\n\n\n\n        return true;\n",
                    "message": "MiniMeToken.approveAndCall (REALPlaceHolder.sol#294-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "    function createCloneToken(\n\n        string _cloneTokenName,\n\n        uint8 _cloneDecimalUnits,\n\n        string _cloneTokenSymbol,\n\n        uint _snapshotBlock,\n\n        bool _transfersEnabled\n\n        ) returns(address) {\n\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n\n            this,\n\n            _snapshotBlock,\n\n            _cloneTokenName,\n\n            _cloneDecimalUnits,\n\n            _cloneTokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        cloneToken.changeController(msg.sender);\n\n\n\n        // An event to make the token easy to find on the blockchain\n\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n\n        return address(cloneToken);\n",
                    "message": "MiniMeToken.createCloneToken (REALPlaceHolder.sol#384-406) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 426,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n\n        uint previousBalanceTo = balanceOf(_owner);\n\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n\n        Transfer(0, _owner, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.generateTokens (REALPlaceHolder.sol#416-426) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": 443,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply >= _amount);\n\n        uint previousBalanceFrom = balanceOf(_owner);\n\n        require(previousBalanceFrom >= _amount);\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n\n        Transfer(_owner, 0, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.destroyTokens (REALPlaceHolder.sol#433-443) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 454,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n\n        transfersEnabled = _transfersEnabled;\n",
                    "message": "MiniMeToken.enableTransfers (REALPlaceHolder.sol#452-454) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "    function ()  payable {\n\n        require(isContract(controller));\n\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
                    "message": "MiniMeToken.fallback (REALPlaceHolder.sol#524-527) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (REALPlaceHolder.sol#537-547) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function createCloneToken(\n\n        address _parentToken,\n\n        uint _snapshotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) returns (MiniMeToken) {\n\n        MiniMeToken newToken = new MiniMeToken(\n\n            this,\n\n            _parentToken,\n\n            _snapshotBlock,\n\n            _tokenName,\n\n            _decimalUnits,\n\n            _tokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        newToken.changeController(msg.sender);\n\n        return newToken;\n",
                    "message": "MiniMeTokenFactory.createCloneToken (REALPlaceHolder.sol#583-603) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": 636,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n\n        newOwner = _newOwner;\n",
                    "message": "Owned.changeOwner (REALPlaceHolder.sol#634-636) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": 643,
                    "vulnerability_code": "    function acceptOwnership() {\n\n        if (msg.sender == newOwner) {\n\n            owner = newOwner;\n\n        }\n",
                    "message": "Owned.acceptOwnership (REALPlaceHolder.sol#639-643) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": "ERC20Token.balanceOf (REALPlaceHolder.sol#723) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transfer (REALPlaceHolder.sol#729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transferFrom (REALPlaceHolder.sol#736) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.approve (REALPlaceHolder.sol#742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": "ERC20Token.allowance (REALPlaceHolder.sol#747) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "REALCrowdsale.initialize (REALPlaceHolder.sol#863-900) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": 915,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n\n        require(getBlockNumber() < startBlock);\n\n        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n\n        guaranteedBuyersLimit[_th] = _limit;\n\n        reservedGuaranteed = reservedGuaranteed + _limit;\n\n        GuaranteedAddress(_th, _limit);\n",
                    "message": "REALCrowdsale.setGuaranteedAddress (REALPlaceHolder.sol#909-915) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": 921,
                    "vulnerability_code": "    function () public payable notPaused {\n\n        proxyPayment(msg.sender);\n",
                    "message": "REALCrowdsale.fallback (REALPlaceHolder.sol#919-921) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1134,
                    "vulnerability_to_line": 1207,
                    "vulnerability_code": "    function finalize() public initialized {\n\n        require(getBlockNumber() >= startBlock);\n\n        require(msg.sender == owner || getBlockNumber() > endBlock);\n\n        require(finalizedBlock == 0);\n\n\n\n        // Allow premature finalization if final limit is reached\n\n        if (getBlockNumber() <= endBlock) {\n\n            require(totalNormalCollected >= fundingLimit);\n\n        }\n\n\n\n        finalizedBlock = getBlockNumber();\n\n        finalizedTime = now;\n\n\n\n        uint256 percentageToTeam = percent(20);\n\n\n\n        uint256 percentageToContributors = percent(51);\n\n\n\n        uint256 percentageToReserve = percent(15);\n\n\n\n        uint256 percentageToBounties = percent(14);\n\n\n\n\n\n        // REAL.totalSupply() -> Tokens minted during the contribution\n\n        //  totalTokens  -> Total tokens that should be after the allocation\n\n        //                   of devTokens and reserve\n\n        //  percentageToContributors -> Which percentage should go to the\n\n        //                               contribution participants\n\n        //                               (x per 10**18 format)\n\n        //  percent(100) -> 100% in (x per 10**18 format)\n\n        //\n\n        //                       percentageToContributors\n\n        //  REAL.totalSupply() = -------------------------- * totalTokens  =>\n\n        //                             percent(100)\n\n        //\n\n        //\n\n        //                            percent(100)\n\n        //  =>  totalTokens = ---------------------------- * REAL.totalSupply()\n\n        //                      percentageToContributors\n\n        //\n\n        uint256 totalTokens = REAL.totalSupply().mul(percent(100)).div(percentageToContributors);\n\n\n\n\n\n        //\n\n        //                    percentageToBounties\n\n        //  bountiesTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensBounties,\n\n            totalTokens.mul(percentageToBounties).div(percent(100))));\n\n\n\n        //\n\n        //                    percentageToReserve\n\n        //  reserveTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensReserve,\n\n            totalTokens.mul(percentageToReserve).div(percent(100))));\n\n\n\n\n\n        //\n\n        //                   percentageToTeam\n\n        //  teamTokens = ----------------------- * totalTokens\n\n        //                   percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensTeam,\n\n            totalTokens.mul(percentageToTeam).div(percent(100))));\n\n\n\n        REAL.changeController(realController);\n\n\n\n        Finalized();\n",
                    "message": "REALCrowdsale.finalize (REALPlaceHolder.sol#1134-1207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": 1235,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n\n        return REAL.totalSupply();\n",
                    "message": "REALCrowdsale.tokensIssued (REALPlaceHolder.sol#1233-1235) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (REALPlaceHolder.sol#1261-1274) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": 1280,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n\n        paused = true;\n",
                    "message": "REALCrowdsale.pauseContribution (REALPlaceHolder.sol#1278-1280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": 1285,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n\n        paused = false;\n",
                    "message": "REALCrowdsale.resumeContribution (REALPlaceHolder.sol#1283-1285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1349,
                    "vulnerability_to_line": 1352,
                    "vulnerability_code": "    function changeController(address _newController) public onlyOwner {\n\n        real.changeController(_newController);\n\n        ControllerChanged(_newController);\n",
                    "message": "REALPlaceHolder.changeController (REALPlaceHolder.sol#1349-1352) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1404,
                    "vulnerability_to_line": 1417,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (real.controller() == address(this)) {\n\n            real.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALPlaceHolder.claimTokens (REALPlaceHolder.sol#1404-1417) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in REALPlaceHolder.sol:\n\t- pragma solidity^0.4.11 (REALPlaceHolder.sol#3): it allows old versions\n\t- pragma solidity^0.4.11 (REALPlaceHolder.sol#608): it allows old versions\n\t- pragma solidity^0.4.11 (REALPlaceHolder.sol#648): it allows old versions\n\t- pragma solidity^0.4.11 (REALPlaceHolder.sol#706): it allows old versions\n\t- pragma solidity^0.4.11 (REALPlaceHolder.sol#755): it allows old versions\n\t- pragma solidity^0.4.11 (REALPlaceHolder.sol#1297): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": "Function 'Controlled.Controlled' (REALPlaceHolder.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": "Parameter '_newController' of Controlled.changeController (REALPlaceHolder.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "    function MiniMeToken(\n\n        address _tokenFactory,\n\n        address _parentToken,\n\n        uint _parentSnapShotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) {\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n\n        name = _tokenName;                                 // Set the name\n\n        decimals = _decimalUnits;                          // Set the decimals\n\n        symbol = _tokenSymbol;                             // Set the symbol\n\n        parentToken = MiniMeToken(_parentToken);\n\n        parentSnapShotBlock = _parentSnapShotBlock;\n\n        transfersEnabled = _transfersEnabled;\n\n        creationBlock = block.number;\n",
                    "message": "Function 'MiniMeToken.MiniMeToken' (REALPlaceHolder.sol#144-161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenFactory,\n",
                    "message": "Parameter '_tokenFactory' of MiniMeToken.MiniMeToken (REALPlaceHolder.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeToken.MiniMeToken (REALPlaceHolder.sol#146) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _parentSnapShotBlock,\n",
                    "message": "Parameter '_parentSnapShotBlock' of MiniMeToken.MiniMeToken (REALPlaceHolder.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeToken.MiniMeToken (REALPlaceHolder.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeToken.MiniMeToken (REALPlaceHolder.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeToken.MiniMeToken (REALPlaceHolder.sol#150) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.MiniMeToken (REALPlaceHolder.sol#151) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_to' of MiniMeToken.transfer (REALPlaceHolder.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.transfer (REALPlaceHolder.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.transferFrom (REALPlaceHolder.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.transferFrom (REALPlaceHolder.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.transferFrom (REALPlaceHolder.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.doTransfer (REALPlaceHolder.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.doTransfer (REALPlaceHolder.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.doTransfer (REALPlaceHolder.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOf (REALPlaceHolder.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_spender' of MiniMeToken.approve (REALPlaceHolder.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.approve (REALPlaceHolder.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_owner' of MiniMeToken.allowance (REALPlaceHolder.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_spender' of MiniMeToken.allowance (REALPlaceHolder.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_spender' of MiniMeToken.approveAndCall (REALPlaceHolder.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_amount' of MiniMeToken.approveAndCall (REALPlaceHolder.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_extraData' of MiniMeToken.approveAndCall (REALPlaceHolder.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOfAt (REALPlaceHolder.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.balanceOfAt (REALPlaceHolder.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.totalSupplyAt (REALPlaceHolder.sol#349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenName,\n",
                    "message": "Parameter '_cloneTokenName' of MiniMeToken.createCloneToken (REALPlaceHolder.sol#385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _cloneDecimalUnits,\n",
                    "message": "Parameter '_cloneDecimalUnits' of MiniMeToken.createCloneToken (REALPlaceHolder.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenSymbol,\n",
                    "message": "Parameter '_cloneTokenSymbol' of MiniMeToken.createCloneToken (REALPlaceHolder.sol#387) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeToken.createCloneToken (REALPlaceHolder.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.createCloneToken (REALPlaceHolder.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.generateTokens (REALPlaceHolder.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.generateTokens (REALPlaceHolder.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.destroyTokens (REALPlaceHolder.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.destroyTokens (REALPlaceHolder.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.enableTransfers (REALPlaceHolder.sol#452) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": "Parameter '_block' of MiniMeToken.getValueAt (REALPlaceHolder.sol#464) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n",
                    "message": "Parameter '_value' of MiniMeToken.updateValueAtNow (REALPlaceHolder.sol#491) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": "Parameter '_addr' of MiniMeToken.isContract (REALPlaceHolder.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": "Parameter '_token' of MiniMeToken.claimTokens (REALPlaceHolder.sol#537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeTokenFactory.createCloneToken (REALPlaceHolder.sol#584) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeTokenFactory.createCloneToken (REALPlaceHolder.sol#585) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeTokenFactory.createCloneToken (REALPlaceHolder.sol#586) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeTokenFactory.createCloneToken (REALPlaceHolder.sol#587) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeTokenFactory.createCloneToken (REALPlaceHolder.sol#588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeTokenFactory.createCloneToken (REALPlaceHolder.sol#589) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": 627,
                    "vulnerability_code": "    function Owned() {\n\n        owner = msg.sender;\n",
                    "message": "Function 'Owned.Owned' (REALPlaceHolder.sol#625-627) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Owned.changeOwner (REALPlaceHolder.sol#634) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 932,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _th) public payable notPaused initialized contributionOpen returns (bool) {\n",
                    "message": "Parameter '_th' of REALCrowdsale.proxyPayment (REALPlaceHolder.sol#932) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onTransfer (REALPlaceHolder.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onTransfer (REALPlaceHolder.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onTransfer (REALPlaceHolder.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onApprove (REALPlaceHolder.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onApprove (REALPlaceHolder.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onApprove (REALPlaceHolder.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": 851,
                    "vulnerability_code": "    function REALCrowdsale() {\n\n        paused = false;\n",
                    "message": "Function 'REALCrowdsale.REALCrowdsale' (REALPlaceHolder.sol#849-851) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _real,\n",
                    "message": "Parameter '_real' of REALCrowdsale.initialize (REALPlaceHolder.sol#864) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 865,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _realController,\n",
                    "message": "Parameter '_realController' of REALCrowdsale.initialize (REALPlaceHolder.sol#865) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _startBlock,\n",
                    "message": "Parameter '_startBlock' of REALCrowdsale.initialize (REALPlaceHolder.sol#866) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endBlock,\n",
                    "message": "Parameter '_endBlock' of REALCrowdsale.initialize (REALPlaceHolder.sol#867) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destEthTeam,\n",
                    "message": "Parameter '_destEthTeam' of REALCrowdsale.initialize (REALPlaceHolder.sol#868) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensReserve,\n",
                    "message": "Parameter '_destTokensReserve' of REALCrowdsale.initialize (REALPlaceHolder.sol#869) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensTeam,\n",
                    "message": "Parameter '_destTokensTeam' of REALCrowdsale.initialize (REALPlaceHolder.sol#870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensBounties\n",
                    "message": "Parameter '_destTokensBounties' of REALCrowdsale.initialize (REALPlaceHolder.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_th' of REALCrowdsale.setGuaranteedAddress (REALPlaceHolder.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_limit' of REALCrowdsale.setGuaranteedAddress (REALPlaceHolder.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyNormal(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyNormal (REALPlaceHolder.sol#952) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyGuaranteed(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyGuaranteed (REALPlaceHolder.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.doBuy (REALPlaceHolder.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_toFund' of REALCrowdsale.doBuy (REALPlaceHolder.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_guaranteed' of REALCrowdsale.doBuy (REALPlaceHolder.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": "Parameter '_sender' of REALCrowdsale.isContract (REALPlaceHolder.sol#1216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of REALCrowdsale.claimTokens (REALPlaceHolder.sol#1261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public fundingLimit = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.fundingLimit' (REALPlaceHolder.sol#789) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 790,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public failSafeLimit = 200000 ether;\n",
                    "message": "Constant 'REALCrowdsale.failSafeLimit' (REALPlaceHolder.sol#790) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 791,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGuaranteedLimit = 30000 ether;\n",
                    "message": "Constant 'REALCrowdsale.maxGuaranteedLimit' (REALPlaceHolder.sol#791) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public exchangeRate = 220;\n",
                    "message": "Constant 'REALCrowdsale.exchangeRate' (REALPlaceHolder.sol#792) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGasPrice = 50000000000;\n",
                    "message": "Constant 'REALCrowdsale.maxGasPrice' (REALPlaceHolder.sol#793) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 794,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxCallFrequency = 100;\n",
                    "message": "Constant 'REALCrowdsale.maxCallFrequency' (REALPlaceHolder.sol#794) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1cap = 25000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus1cap' (REALPlaceHolder.sol#796) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1 = 25;\n",
                    "message": "Constant 'REALCrowdsale.bonus1' (REALPlaceHolder.sol#797) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2cap = 50000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus2cap' (REALPlaceHolder.sol#798) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 799,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2 = 20;\n",
                    "message": "Constant 'REALCrowdsale.bonus2' (REALPlaceHolder.sol#799) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 800,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3cap = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus3cap' (REALPlaceHolder.sol#800) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3 = 15;\n",
                    "message": "Constant 'REALCrowdsale.bonus3' (REALPlaceHolder.sol#801) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4cap = 150000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus4cap' (REALPlaceHolder.sol#802) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 803,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4 = 5;\n",
                    "message": "Constant 'REALCrowdsale.bonus4' (REALPlaceHolder.sol#803) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 805,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MiniMeToken public REAL;\n",
                    "message": "Variable 'REALCrowdsale.REAL' (REALPlaceHolder.sol#805) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address) public payable returns (bool) {\n",
                    "message": "Parameter '' of REALPlaceHolder.proxyPayment (REALPlaceHolder.sol#1360) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_from' of REALPlaceHolder.onTransfer (REALPlaceHolder.sol#1364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALPlaceHolder.onTransfer (REALPlaceHolder.sol#1364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALPlaceHolder.onTransfer (REALPlaceHolder.sol#1364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _from, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_from' of REALPlaceHolder.onApprove (REALPlaceHolder.sol#1368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _from, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALPlaceHolder.onApprove (REALPlaceHolder.sol#1368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _from, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALPlaceHolder.onApprove (REALPlaceHolder.sol#1368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1339,
                    "vulnerability_to_line": 1343,
                    "vulnerability_code": "    function REALPlaceHolder(address _owner, address _real, address _contribution) {\n\n        owner = _owner;\n\n        real = MiniMeToken(_real);\n\n        contribution = REALCrowdsale(_contribution);\n",
                    "message": "Function 'REALPlaceHolder.REALPlaceHolder' (REALPlaceHolder.sol#1339-1343) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALPlaceHolder(address _owner, address _real, address _contribution) {\n",
                    "message": "Parameter '_owner' of REALPlaceHolder.REALPlaceHolder (REALPlaceHolder.sol#1339) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALPlaceHolder(address _owner, address _real, address _contribution) {\n",
                    "message": "Parameter '_real' of REALPlaceHolder.REALPlaceHolder (REALPlaceHolder.sol#1339) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALPlaceHolder(address _owner, address _real, address _contribution) {\n",
                    "message": "Parameter '_contribution' of REALPlaceHolder.REALPlaceHolder (REALPlaceHolder.sol#1339) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) public onlyOwner {\n",
                    "message": "Parameter '_newController' of REALPlaceHolder.changeController (REALPlaceHolder.sol#1349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferable(address _from) internal returns (bool) {\n",
                    "message": "Parameter '_from' of REALPlaceHolder.transferable (REALPlaceHolder.sol#1372) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of REALPlaceHolder.claimTokens (REALPlaceHolder.sol#1404) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalCollected() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBlockNumber() internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (max > min) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function initialize(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 1329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 1217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return tx.origin != _sender;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function () public payable notPaused {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MiniMeToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ()  payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Owned() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function acceptOwnership() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALCrowdsale() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALPlaceHolder(address _owner, address _real, address _contribution) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Checkpoint[] totalSupplyHistory;\n",
                    "message": null
                }
            ]
        }
    },
    "real_contract-master/contracts/Owned.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": 31,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n\n        newOwner = _newOwner;\n",
                    "message": "Owned.changeOwner (Owned.sol#29-31) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "    function acceptOwnership() {\n\n        if (msg.sender == newOwner) {\n\n            owner = newOwner;\n\n        }\n",
                    "message": "Owned.acceptOwnership (Owned.sol#34-38) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in Owned.sol:\n\t- pragma solidity^0.4.11 (Owned.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 22,
                    "vulnerability_code": "    function Owned() {\n\n        owner = msg.sender;\n",
                    "message": "Function 'Owned.Owned' (Owned.sol#20-22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Owned.changeOwner (Owned.sol#29) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Owned() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function acceptOwnership() {\n",
                    "message": null
                }
            ]
        }
    },
    "real_contract-master/contracts/TeamTokensHolder.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "           require((_to != 0) && (_to != address(this)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(getBlockNumber() >= startBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                getBlockNumber() <= endBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                finalizedBlock == 0 &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address(REAL) != 0x0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(finalizedTime > 0 && getTime() > finalizedTime.add(months(6)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": "MiniMeToken.balances (TeamTokensHolder.sol#113) is never initialized. It is used in:\n\t- doTransfer (TeamTokensHolder.sol#206-244)\n\t- balanceOfAt (TeamTokensHolder.sol#323-344)\n\t- generateTokens (TeamTokensHolder.sol#416-426)\n\t- destroyTokens (TeamTokensHolder.sol#433-443)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract (TeamTokensHolder.sol#507-514) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\n\n        // Alerts the token controller of the approve function call\n\n        if (isContract(controller)) {\n\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n\n        }\n\n\n\n        allowed[msg.sender][_spender] = _amount;\n\n        Approval(msg.sender, _spender, _amount);\n\n        return true;\n",
                    "message": "Reentrancy in MiniMeToken.approve (TeamTokensHolder.sol#258-275):\n\tExternal calls:\n\t- require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (TeamTokensHolder.sol#269)\n\tState variables written after the call(s):\n\t- allowed (TeamTokensHolder.sol#272)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": 1378,
                    "vulnerability_code": "    function collectTokens() public onlyOwner {\n\n        uint256 balance = real.balanceOf(address(this));\n\n        uint256 total = collectedTokens.add(balance);\n\n\n\n        uint256 finalizedTime = crowdsale.finalizedTime();\n\n\n\n        require(finalizedTime > 0 && getTime() > finalizedTime.add(months(6)));\n\n\n\n        uint256 canExtract = total.mul(getTime().sub(finalizedTime)).div(months(24));\n\n\n\n        canExtract = canExtract.sub(collectedTokens);\n\n\n\n        if (canExtract > balance) {\n\n            canExtract = balance;\n\n        }\n\n\n\n        collectedTokens = collectedTokens.add(canExtract);\n\n        assert(real.transfer(owner, canExtract));\n\n\n\n        TokensWithdrawn(owner, canExtract);\n",
                    "message": "Reentrancy in TeamTokensHolder.collectTokens (TeamTokensHolder.sol#1358-1378):\n\tExternal calls:\n\t- balance = real.balanceOf(address(this)) (TeamTokensHolder.sol#1359)\n\t- finalizedTime = crowdsale.finalizedTime() (TeamTokensHolder.sol#1362)\n\tState variables written after the call(s):\n\t- collectedTokens (TeamTokensHolder.sol#1374)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (TeamTokensHolder.sol#537-547) does not use the value returned by external calls:\n\t-token.transfer(controller,balance) (TeamTokensHolder.sol#545)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (TeamTokensHolder.sol#1261-1274) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (TeamTokensHolder.sol#1272)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": 1408,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        require(_token != address(real));\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "TeamTokensHolder.claimTokens (TeamTokensHolder.sol#1397-1408) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (TeamTokensHolder.sol#1406)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint min = 0;\n",
                    "message": "MiniMeToken.getValueAt.min (local variable @ TeamTokensHolder.sol#474) shadows:\n\t- MiniMeToken.min (function @ TeamTokensHolder.sol#517-519)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "Reentrancy in REALCrowdsale.initialize (TeamTokensHolder.sol#863-900):\n\tExternal calls:\n\t- require(bool)(REAL.totalSupply() == 0) (TeamTokensHolder.sol#877)\n\t- require(bool)(REAL.controller() == address(this)) (TeamTokensHolder.sol#878)\n\t- require(bool)(REAL.decimals() == 18) (TeamTokensHolder.sol#879)\n\tState variables written after the call(s):\n\t- destEthTeam (TeamTokensHolder.sol#890)\n\t- destTokensBounties (TeamTokensHolder.sol#899)\n\t- destTokensReserve (TeamTokensHolder.sol#893)\n\t- destTokensTeam (TeamTokensHolder.sol#896)\n\t- endBlock (TeamTokensHolder.sol#887)\n\t- realController (TeamTokensHolder.sol#882)\n\t- startBlock (TeamTokensHolder.sol#886)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract uses assembly (TeamTokensHolder.sol#507-514)\n\t- TeamTokensHolder.sol#510-513\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalSupply;\n",
                    "message": "ERC20Token.totalSupply should be constant (TeamTokensHolder.sol#719)\nMiniMeToken.version should be constant (TeamTokensHolder.sol#84)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": 946,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onTransfer (TeamTokensHolder.sol#944-946) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": "TokenController.onTransfer (TeamTokensHolder.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": 950,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onApprove (TeamTokensHolder.sol#948-950) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": "TokenController.onApprove (TeamTokensHolder.sol#52-53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 69,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n\n        controller = _newController;\n",
                    "message": "Controlled.changeController (TeamTokensHolder.sol#67-69) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": "ApproveAndCallFallBack.receiveApproval (TeamTokensHolder.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n        return doTransfer(msg.sender, _to, _amount);\n",
                    "message": "MiniMeToken.transfer (TeamTokensHolder.sol#172-175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n\n    ) returns (bool success) {\n\n\n\n        // The controller of this contract can move tokens around at will,\n\n        //  this is important to recognize! Confirm that you trust the\n\n        //  controller of this contract, which in most situations should be\n\n        //  another open source smart contract or 0x0\n\n        if (msg.sender != controller) {\n\n            require(transfersEnabled);\n\n\n\n            // The standard ERC 20 transferFrom functionality\n\n            if (allowed[_from][msg.sender] < _amount) return false;\n\n            allowed[_from][msg.sender] -= _amount;\n\n        }\n\n        return doTransfer(_from, _to, _amount);\n",
                    "message": "MiniMeToken.transferFrom (TeamTokensHolder.sol#183-198) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n\n    ) constant returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "MiniMeToken.allowance (TeamTokensHolder.sol#282-285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n\n    ) returns (bool success) {\n\n        require(approve(_spender, _amount));\n\n\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n\n            msg.sender,\n\n            _amount,\n\n            this,\n\n            _extraData\n\n        );\n\n\n\n        return true;\n",
                    "message": "MiniMeToken.approveAndCall (TeamTokensHolder.sol#294-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "    function createCloneToken(\n\n        string _cloneTokenName,\n\n        uint8 _cloneDecimalUnits,\n\n        string _cloneTokenSymbol,\n\n        uint _snapshotBlock,\n\n        bool _transfersEnabled\n\n        ) returns(address) {\n\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n\n            this,\n\n            _snapshotBlock,\n\n            _cloneTokenName,\n\n            _cloneDecimalUnits,\n\n            _cloneTokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        cloneToken.changeController(msg.sender);\n\n\n\n        // An event to make the token easy to find on the blockchain\n\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n\n        return address(cloneToken);\n",
                    "message": "MiniMeToken.createCloneToken (TeamTokensHolder.sol#384-406) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 426,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n\n        uint previousBalanceTo = balanceOf(_owner);\n\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n\n        Transfer(0, _owner, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.generateTokens (TeamTokensHolder.sol#416-426) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": 443,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply >= _amount);\n\n        uint previousBalanceFrom = balanceOf(_owner);\n\n        require(previousBalanceFrom >= _amount);\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n\n        Transfer(_owner, 0, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.destroyTokens (TeamTokensHolder.sol#433-443) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 454,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n\n        transfersEnabled = _transfersEnabled;\n",
                    "message": "MiniMeToken.enableTransfers (TeamTokensHolder.sol#452-454) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "    function ()  payable {\n\n        require(isContract(controller));\n\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
                    "message": "MiniMeToken.fallback (TeamTokensHolder.sol#524-527) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (TeamTokensHolder.sol#537-547) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function createCloneToken(\n\n        address _parentToken,\n\n        uint _snapshotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) returns (MiniMeToken) {\n\n        MiniMeToken newToken = new MiniMeToken(\n\n            this,\n\n            _parentToken,\n\n            _snapshotBlock,\n\n            _tokenName,\n\n            _decimalUnits,\n\n            _tokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        newToken.changeController(msg.sender);\n\n        return newToken;\n",
                    "message": "MiniMeTokenFactory.createCloneToken (TeamTokensHolder.sol#583-603) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": 636,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n\n        newOwner = _newOwner;\n",
                    "message": "Owned.changeOwner (TeamTokensHolder.sol#634-636) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": 643,
                    "vulnerability_code": "    function acceptOwnership() {\n\n        if (msg.sender == newOwner) {\n\n            owner = newOwner;\n\n        }\n",
                    "message": "Owned.acceptOwnership (TeamTokensHolder.sol#639-643) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": "ERC20Token.balanceOf (TeamTokensHolder.sol#723) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transfer (TeamTokensHolder.sol#729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transferFrom (TeamTokensHolder.sol#736) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.approve (TeamTokensHolder.sol#742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": "ERC20Token.allowance (TeamTokensHolder.sol#747) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "REALCrowdsale.initialize (TeamTokensHolder.sol#863-900) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": 915,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n\n        require(getBlockNumber() < startBlock);\n\n        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n\n        guaranteedBuyersLimit[_th] = _limit;\n\n        reservedGuaranteed = reservedGuaranteed + _limit;\n\n        GuaranteedAddress(_th, _limit);\n",
                    "message": "REALCrowdsale.setGuaranteedAddress (TeamTokensHolder.sol#909-915) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": 921,
                    "vulnerability_code": "    function () public payable notPaused {\n\n        proxyPayment(msg.sender);\n",
                    "message": "REALCrowdsale.fallback (TeamTokensHolder.sol#919-921) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1134,
                    "vulnerability_to_line": 1207,
                    "vulnerability_code": "    function finalize() public initialized {\n\n        require(getBlockNumber() >= startBlock);\n\n        require(msg.sender == owner || getBlockNumber() > endBlock);\n\n        require(finalizedBlock == 0);\n\n\n\n        // Allow premature finalization if final limit is reached\n\n        if (getBlockNumber() <= endBlock) {\n\n            require(totalNormalCollected >= fundingLimit);\n\n        }\n\n\n\n        finalizedBlock = getBlockNumber();\n\n        finalizedTime = now;\n\n\n\n        uint256 percentageToTeam = percent(20);\n\n\n\n        uint256 percentageToContributors = percent(51);\n\n\n\n        uint256 percentageToReserve = percent(15);\n\n\n\n        uint256 percentageToBounties = percent(14);\n\n\n\n\n\n        // REAL.totalSupply() -> Tokens minted during the contribution\n\n        //  totalTokens  -> Total tokens that should be after the allocation\n\n        //                   of devTokens and reserve\n\n        //  percentageToContributors -> Which percentage should go to the\n\n        //                               contribution participants\n\n        //                               (x per 10**18 format)\n\n        //  percent(100) -> 100% in (x per 10**18 format)\n\n        //\n\n        //                       percentageToContributors\n\n        //  REAL.totalSupply() = -------------------------- * totalTokens  =>\n\n        //                             percent(100)\n\n        //\n\n        //\n\n        //                            percent(100)\n\n        //  =>  totalTokens = ---------------------------- * REAL.totalSupply()\n\n        //                      percentageToContributors\n\n        //\n\n        uint256 totalTokens = REAL.totalSupply().mul(percent(100)).div(percentageToContributors);\n\n\n\n\n\n        //\n\n        //                    percentageToBounties\n\n        //  bountiesTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensBounties,\n\n            totalTokens.mul(percentageToBounties).div(percent(100))));\n\n\n\n        //\n\n        //                    percentageToReserve\n\n        //  reserveTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensReserve,\n\n            totalTokens.mul(percentageToReserve).div(percent(100))));\n\n\n\n\n\n        //\n\n        //                   percentageToTeam\n\n        //  teamTokens = ----------------------- * totalTokens\n\n        //                   percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensTeam,\n\n            totalTokens.mul(percentageToTeam).div(percent(100))));\n\n\n\n        REAL.changeController(realController);\n\n\n\n        Finalized();\n",
                    "message": "REALCrowdsale.finalize (TeamTokensHolder.sol#1134-1207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": 1235,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n\n        return REAL.totalSupply();\n",
                    "message": "REALCrowdsale.tokensIssued (TeamTokensHolder.sol#1233-1235) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (TeamTokensHolder.sol#1261-1274) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": 1280,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n\n        paused = true;\n",
                    "message": "REALCrowdsale.pauseContribution (TeamTokensHolder.sol#1278-1280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": 1285,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n\n        paused = false;\n",
                    "message": "REALCrowdsale.resumeContribution (TeamTokensHolder.sol#1283-1285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": 1378,
                    "vulnerability_code": "    function collectTokens() public onlyOwner {\n\n        uint256 balance = real.balanceOf(address(this));\n\n        uint256 total = collectedTokens.add(balance);\n\n\n\n        uint256 finalizedTime = crowdsale.finalizedTime();\n\n\n\n        require(finalizedTime > 0 && getTime() > finalizedTime.add(months(6)));\n\n\n\n        uint256 canExtract = total.mul(getTime().sub(finalizedTime)).div(months(24));\n\n\n\n        canExtract = canExtract.sub(collectedTokens);\n\n\n\n        if (canExtract > balance) {\n\n            canExtract = balance;\n\n        }\n\n\n\n        collectedTokens = collectedTokens.add(canExtract);\n\n        assert(real.transfer(owner, canExtract));\n\n\n\n        TokensWithdrawn(owner, canExtract);\n",
                    "message": "TeamTokensHolder.collectTokens (TeamTokensHolder.sol#1358-1378) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": 1408,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        require(_token != address(real));\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "TeamTokensHolder.claimTokens (TeamTokensHolder.sol#1397-1408) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in TeamTokensHolder.sol:\n\t- pragma solidity^0.4.11 (TeamTokensHolder.sol#3): it allows old versions\n\t- pragma solidity^0.4.11 (TeamTokensHolder.sol#608): it allows old versions\n\t- pragma solidity^0.4.11 (TeamTokensHolder.sol#648): it allows old versions\n\t- pragma solidity^0.4.11 (TeamTokensHolder.sol#706): it allows old versions\n\t- pragma solidity^0.4.11 (TeamTokensHolder.sol#755): it allows old versions\n\t- pragma solidity^0.4.11 (TeamTokensHolder.sol#1297): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": "Function 'Controlled.Controlled' (TeamTokensHolder.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": "Parameter '_newController' of Controlled.changeController (TeamTokensHolder.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "    function MiniMeToken(\n\n        address _tokenFactory,\n\n        address _parentToken,\n\n        uint _parentSnapShotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) {\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n\n        name = _tokenName;                                 // Set the name\n\n        decimals = _decimalUnits;                          // Set the decimals\n\n        symbol = _tokenSymbol;                             // Set the symbol\n\n        parentToken = MiniMeToken(_parentToken);\n\n        parentSnapShotBlock = _parentSnapShotBlock;\n\n        transfersEnabled = _transfersEnabled;\n\n        creationBlock = block.number;\n",
                    "message": "Function 'MiniMeToken.MiniMeToken' (TeamTokensHolder.sol#144-161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenFactory,\n",
                    "message": "Parameter '_tokenFactory' of MiniMeToken.MiniMeToken (TeamTokensHolder.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeToken.MiniMeToken (TeamTokensHolder.sol#146) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _parentSnapShotBlock,\n",
                    "message": "Parameter '_parentSnapShotBlock' of MiniMeToken.MiniMeToken (TeamTokensHolder.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeToken.MiniMeToken (TeamTokensHolder.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeToken.MiniMeToken (TeamTokensHolder.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeToken.MiniMeToken (TeamTokensHolder.sol#150) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.MiniMeToken (TeamTokensHolder.sol#151) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_to' of MiniMeToken.transfer (TeamTokensHolder.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.transfer (TeamTokensHolder.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.transferFrom (TeamTokensHolder.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.transferFrom (TeamTokensHolder.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.transferFrom (TeamTokensHolder.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.doTransfer (TeamTokensHolder.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.doTransfer (TeamTokensHolder.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.doTransfer (TeamTokensHolder.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOf (TeamTokensHolder.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_spender' of MiniMeToken.approve (TeamTokensHolder.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.approve (TeamTokensHolder.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_owner' of MiniMeToken.allowance (TeamTokensHolder.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_spender' of MiniMeToken.allowance (TeamTokensHolder.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_spender' of MiniMeToken.approveAndCall (TeamTokensHolder.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_amount' of MiniMeToken.approveAndCall (TeamTokensHolder.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_extraData' of MiniMeToken.approveAndCall (TeamTokensHolder.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOfAt (TeamTokensHolder.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.balanceOfAt (TeamTokensHolder.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.totalSupplyAt (TeamTokensHolder.sol#349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenName,\n",
                    "message": "Parameter '_cloneTokenName' of MiniMeToken.createCloneToken (TeamTokensHolder.sol#385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _cloneDecimalUnits,\n",
                    "message": "Parameter '_cloneDecimalUnits' of MiniMeToken.createCloneToken (TeamTokensHolder.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenSymbol,\n",
                    "message": "Parameter '_cloneTokenSymbol' of MiniMeToken.createCloneToken (TeamTokensHolder.sol#387) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeToken.createCloneToken (TeamTokensHolder.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.createCloneToken (TeamTokensHolder.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.generateTokens (TeamTokensHolder.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.generateTokens (TeamTokensHolder.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.destroyTokens (TeamTokensHolder.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.destroyTokens (TeamTokensHolder.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.enableTransfers (TeamTokensHolder.sol#452) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": "Parameter '_block' of MiniMeToken.getValueAt (TeamTokensHolder.sol#464) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n",
                    "message": "Parameter '_value' of MiniMeToken.updateValueAtNow (TeamTokensHolder.sol#491) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": "Parameter '_addr' of MiniMeToken.isContract (TeamTokensHolder.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": "Parameter '_token' of MiniMeToken.claimTokens (TeamTokensHolder.sol#537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeTokenFactory.createCloneToken (TeamTokensHolder.sol#584) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeTokenFactory.createCloneToken (TeamTokensHolder.sol#585) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeTokenFactory.createCloneToken (TeamTokensHolder.sol#586) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeTokenFactory.createCloneToken (TeamTokensHolder.sol#587) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeTokenFactory.createCloneToken (TeamTokensHolder.sol#588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeTokenFactory.createCloneToken (TeamTokensHolder.sol#589) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": 627,
                    "vulnerability_code": "    function Owned() {\n\n        owner = msg.sender;\n",
                    "message": "Function 'Owned.Owned' (TeamTokensHolder.sol#625-627) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Owned.changeOwner (TeamTokensHolder.sol#634) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 932,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _th) public payable notPaused initialized contributionOpen returns (bool) {\n",
                    "message": "Parameter '_th' of REALCrowdsale.proxyPayment (TeamTokensHolder.sol#932) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onTransfer (TeamTokensHolder.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onTransfer (TeamTokensHolder.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onTransfer (TeamTokensHolder.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onApprove (TeamTokensHolder.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onApprove (TeamTokensHolder.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onApprove (TeamTokensHolder.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": 851,
                    "vulnerability_code": "    function REALCrowdsale() {\n\n        paused = false;\n",
                    "message": "Function 'REALCrowdsale.REALCrowdsale' (TeamTokensHolder.sol#849-851) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _real,\n",
                    "message": "Parameter '_real' of REALCrowdsale.initialize (TeamTokensHolder.sol#864) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 865,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _realController,\n",
                    "message": "Parameter '_realController' of REALCrowdsale.initialize (TeamTokensHolder.sol#865) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _startBlock,\n",
                    "message": "Parameter '_startBlock' of REALCrowdsale.initialize (TeamTokensHolder.sol#866) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endBlock,\n",
                    "message": "Parameter '_endBlock' of REALCrowdsale.initialize (TeamTokensHolder.sol#867) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destEthTeam,\n",
                    "message": "Parameter '_destEthTeam' of REALCrowdsale.initialize (TeamTokensHolder.sol#868) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensReserve,\n",
                    "message": "Parameter '_destTokensReserve' of REALCrowdsale.initialize (TeamTokensHolder.sol#869) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensTeam,\n",
                    "message": "Parameter '_destTokensTeam' of REALCrowdsale.initialize (TeamTokensHolder.sol#870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensBounties\n",
                    "message": "Parameter '_destTokensBounties' of REALCrowdsale.initialize (TeamTokensHolder.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_th' of REALCrowdsale.setGuaranteedAddress (TeamTokensHolder.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_limit' of REALCrowdsale.setGuaranteedAddress (TeamTokensHolder.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyNormal(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyNormal (TeamTokensHolder.sol#952) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyGuaranteed(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyGuaranteed (TeamTokensHolder.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.doBuy (TeamTokensHolder.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_toFund' of REALCrowdsale.doBuy (TeamTokensHolder.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_guaranteed' of REALCrowdsale.doBuy (TeamTokensHolder.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": "Parameter '_sender' of REALCrowdsale.isContract (TeamTokensHolder.sol#1216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of REALCrowdsale.claimTokens (TeamTokensHolder.sol#1261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public fundingLimit = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.fundingLimit' (TeamTokensHolder.sol#789) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 790,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public failSafeLimit = 200000 ether;\n",
                    "message": "Constant 'REALCrowdsale.failSafeLimit' (TeamTokensHolder.sol#790) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 791,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGuaranteedLimit = 30000 ether;\n",
                    "message": "Constant 'REALCrowdsale.maxGuaranteedLimit' (TeamTokensHolder.sol#791) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public exchangeRate = 220;\n",
                    "message": "Constant 'REALCrowdsale.exchangeRate' (TeamTokensHolder.sol#792) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGasPrice = 50000000000;\n",
                    "message": "Constant 'REALCrowdsale.maxGasPrice' (TeamTokensHolder.sol#793) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 794,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxCallFrequency = 100;\n",
                    "message": "Constant 'REALCrowdsale.maxCallFrequency' (TeamTokensHolder.sol#794) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1cap = 25000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus1cap' (TeamTokensHolder.sol#796) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1 = 25;\n",
                    "message": "Constant 'REALCrowdsale.bonus1' (TeamTokensHolder.sol#797) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2cap = 50000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus2cap' (TeamTokensHolder.sol#798) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 799,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2 = 20;\n",
                    "message": "Constant 'REALCrowdsale.bonus2' (TeamTokensHolder.sol#799) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 800,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3cap = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus3cap' (TeamTokensHolder.sol#800) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3 = 15;\n",
                    "message": "Constant 'REALCrowdsale.bonus3' (TeamTokensHolder.sol#801) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4cap = 150000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus4cap' (TeamTokensHolder.sol#802) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 803,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4 = 5;\n",
                    "message": "Constant 'REALCrowdsale.bonus4' (TeamTokensHolder.sol#803) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 805,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MiniMeToken public REAL;\n",
                    "message": "Variable 'REALCrowdsale.REAL' (TeamTokensHolder.sol#805) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": 1354,
                    "vulnerability_code": "    function TeamTokensHolder(address _owner, address _crowdsale, address _real) {\n\n        owner = _owner;\n\n        crowdsale = REALCrowdsale(_crowdsale);\n\n        real = MiniMeToken(_real);\n",
                    "message": "Function 'TeamTokensHolder.TeamTokensHolder' (TeamTokensHolder.sol#1350-1354) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function TeamTokensHolder(address _owner, address _crowdsale, address _real) {\n",
                    "message": "Parameter '_owner' of TeamTokensHolder.TeamTokensHolder (TeamTokensHolder.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function TeamTokensHolder(address _owner, address _crowdsale, address _real) {\n",
                    "message": "Parameter '_crowdsale' of TeamTokensHolder.TeamTokensHolder (TeamTokensHolder.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function TeamTokensHolder(address _owner, address _crowdsale, address _real) {\n",
                    "message": "Parameter '_real' of TeamTokensHolder.TeamTokensHolder (TeamTokensHolder.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of TeamTokensHolder.claimTokens (TeamTokensHolder.sol#1397) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalCollected() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBlockNumber() internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (max > min) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function initialize(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 1217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return tx.origin != _sender;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function () public payable notPaused {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MiniMeToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ()  payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Owned() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function acceptOwnership() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALCrowdsale() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function TeamTokensHolder(address _owner, address _crowdsale, address _real) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Checkpoint[] totalSupplyHistory;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 collectedTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    REALCrowdsale crowdsale;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MiniMeToken real;\n",
                    "message": null
                }
            ]
        }
    },
    "real_contract-master/contracts/ERC20Token.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalSupply;\n",
                    "message": "ERC20Token.totalSupply should be constant (ERC20Token.sol#18)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": "ERC20Token.balanceOf (ERC20Token.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transfer (ERC20Token.sol#28) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transferFrom (ERC20Token.sol#35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.approve (ERC20Token.sol#41) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": "ERC20Token.allowance (ERC20Token.sol#46) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in ERC20Token.sol:\n\t- pragma solidity^0.4.11 (ERC20Token.sol#5): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                }
            ]
        }
    },
    "real_contract-master/contracts/MultiSigWallet.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<_owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        transactionCount += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (isOwner[_owners[i]] || _owners[i] == 0)\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            isOwner[_owners[i]] = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (confirmations[transactionId][owners[i]])\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (confirmations[transactionId][owners[i]])\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (count == required)\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<_owners.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (   pending && !transactions[i].executed\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                || executed && transactions[i].executed)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                count += 1;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (   pending && !transactions[i].executed\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                || executed && transactions[i].executed)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                transactionIdsTemp[count] = i;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                count += 1;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<_owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length - 1; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<transactionCount; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i=0; i<owners.length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i=0; i<count; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i=0; i<transactionCount; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i=from; i<to; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_28"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-builtin",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            Transaction tx = transactions[transactionId];\n",
                    "message": "MultiSigWallet.executeTransaction.tx (local variable @ MultiSigWallet.sol#230) shadows built-in symbol \"tx\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                throw;\n",
                    "message": "Deprecated standard detected @ MultiSigWallet.sol#114:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": "Deprecated standard detected @ MultiSigWallet.sol#39:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": "Deprecated standard detected @ MultiSigWallet.sol#45:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": "Deprecated standard detected @ MultiSigWallet.sol#51:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": "Deprecated standard detected @ MultiSigWallet.sol#57:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": "Deprecated standard detected @ MultiSigWallet.sol#63:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": "Deprecated standard detected @ MultiSigWallet.sol#69:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": "Deprecated standard detected @ MultiSigWallet.sol#75:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": "Deprecated standard detected @ MultiSigWallet.sol#81:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": "Deprecated standard detected @ MultiSigWallet.sol#90:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": 100,
                    "vulnerability_code": "    function()\n\n        payable\n\n    {\n\n        if (msg.value > 0)\n\n            Deposit(msg.sender, msg.value);\n",
                    "message": "MultiSigWallet.fallback (MultiSigWallet.sol#95-100) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": 133,
                    "vulnerability_code": "    function addOwner(address owner)\n\n        public\n\n        onlyWallet\n\n        ownerDoesNotExist(owner)\n\n        notNull(owner)\n\n        validRequirement(owners.length + 1, required)\n\n    {\n\n        isOwner[owner] = true;\n\n        owners.push(owner);\n\n        OwnerAddition(owner);\n",
                    "message": "MultiSigWallet.addOwner (MultiSigWallet.sol#123-133) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "    function removeOwner(address owner)\n\n        public\n\n        onlyWallet\n\n        ownerExists(owner)\n\n    {\n\n        isOwner[owner] = false;\n\n        for (uint i=0; i<owners.length - 1; i++)\n\n            if (owners[i] == owner) {\n\n                owners[i] = owners[owners.length - 1];\n\n                break;\n\n            }\n\n        owners.length -= 1;\n\n        if (required > owners.length)\n\n            changeRequirement(owners.length);\n\n        OwnerRemoval(owner);\n",
                    "message": "MultiSigWallet.removeOwner (MultiSigWallet.sol#137-152) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 172,
                    "vulnerability_code": "    function replaceOwner(address owner, address newOwner)\n\n        public\n\n        onlyWallet\n\n        ownerExists(owner)\n\n        ownerDoesNotExist(newOwner)\n\n    {\n\n        for (uint i=0; i<owners.length; i++)\n\n            if (owners[i] == owner) {\n\n                owners[i] = newOwner;\n\n                break;\n\n            }\n\n        isOwner[owner] = false;\n\n        isOwner[newOwner] = true;\n\n        OwnerRemoval(owner);\n\n        OwnerAddition(newOwner);\n",
                    "message": "MultiSigWallet.replaceOwner (MultiSigWallet.sol#157-172) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": 196,
                    "vulnerability_code": "    function submitTransaction(address destination, uint value, bytes data)\n\n        public\n\n        returns (uint transactionId)\n\n    {\n\n        transactionId = addTransaction(destination, value, data);\n\n        confirmTransaction(transactionId);\n",
                    "message": "MultiSigWallet.submitTransaction (MultiSigWallet.sol#190-196) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": 221,
                    "vulnerability_code": "    function revokeConfirmation(uint transactionId)\n\n        public\n\n        ownerExists(msg.sender)\n\n        confirmed(transactionId, msg.sender)\n\n        notExecuted(transactionId)\n\n    {\n\n        confirmations[transactionId][msg.sender] = false;\n\n        Revocation(msg.sender, transactionId);\n",
                    "message": "MultiSigWallet.revokeConfirmation (MultiSigWallet.sol#213-221) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": 296,
                    "vulnerability_code": "    function getConfirmationCount(uint transactionId)\n\n        public\n\n        constant\n\n        returns (uint count)\n\n    {\n\n        for (uint i=0; i<owners.length; i++)\n\n            if (confirmations[transactionId][owners[i]])\n\n                count += 1;\n",
                    "message": "MultiSigWallet.getConfirmationCount (MultiSigWallet.sol#288-296) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "    function getTransactionCount(bool pending, bool executed)\n\n        public\n\n        constant\n\n        returns (uint count)\n\n    {\n\n        for (uint i=0; i<transactionCount; i++)\n\n            if (   pending && !transactions[i].executed\n\n                || executed && transactions[i].executed)\n\n                count += 1;\n",
                    "message": "MultiSigWallet.getTransactionCount (MultiSigWallet.sol#302-311) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": 321,
                    "vulnerability_code": "    function getOwners()\n\n        public\n\n        constant\n\n        returns (address[])\n\n    {\n\n        return owners;\n",
                    "message": "MultiSigWallet.getOwners (MultiSigWallet.sol#315-321) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": 342,
                    "vulnerability_code": "    function getConfirmations(uint transactionId)\n\n        public\n\n        constant\n\n        returns (address[] _confirmations)\n\n    {\n\n        address[] memory confirmationsTemp = new address[](owners.length);\n\n        uint count = 0;\n\n        uint i;\n\n        for (i=0; i<owners.length; i++)\n\n            if (confirmations[transactionId][owners[i]]) {\n\n                confirmationsTemp[count] = owners[i];\n\n                count += 1;\n\n            }\n\n        _confirmations = new address[](count);\n\n        for (i=0; i<count; i++)\n\n            _confirmations[i] = confirmationsTemp[i];\n",
                    "message": "MultiSigWallet.getConfirmations (MultiSigWallet.sol#326-342) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": 368,
                    "vulnerability_code": "    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n\n        public\n\n        constant\n\n        returns (uint[] _transactionIds)\n\n    {\n\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n\n        uint count = 0;\n\n        uint i;\n\n        for (i=0; i<transactionCount; i++)\n\n            if (   pending && !transactions[i].executed\n\n                || executed && transactions[i].executed)\n\n            {\n\n                transactionIdsTemp[count] = i;\n\n                count += 1;\n\n            }\n\n        _transactionIds = new uint[](to - from);\n\n        for (i=from; i<to; i++)\n\n            _transactionIds[i - from] = transactionIdsTemp[i];\n",
                    "message": "MultiSigWallet.getTransactionIds (MultiSigWallet.sol#350-368) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in MultiSigWallet.sol:\n\t- pragma solidity^0.4.11 (MultiSigWallet.sol#3): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": 239,
                    "vulnerability_code": "    function executeTransaction(uint transactionId)\n\n        public\n\n        notExecuted(transactionId)\n\n    {\n\n        if (isConfirmed(transactionId)) {\n\n            Transaction tx = transactions[transactionId];\n\n            tx.executed = true;\n\n            if (tx.destination.call.value(tx.value)(tx.data))\n\n                Execution(transactionId);\n\n            else {\n\n                ExecutionFailure(transactionId);\n\n                tx.executed = false;\n\n            }\n\n        }\n",
                    "message": "Low level call in MultiSigWallet.executeTransaction (MultiSigWallet.sol#225-239):\n\t-tx.destination.call.value(tx.value)(tx.data) MultiSigWallet.sol#232-237\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": 119,
                    "vulnerability_code": "    function MultiSigWallet(address[] _owners, uint _required)\n\n        public\n\n        validRequirement(_owners.length, _required)\n\n    {\n\n        for (uint i=0; i<_owners.length; i++) {\n\n            if (isOwner[_owners[i]] || _owners[i] == 0)\n\n                throw;\n\n            isOwner[_owners[i]] = true;\n\n        }\n\n        owners = _owners;\n\n        required = _required;\n",
                    "message": "Function 'MultiSigWallet.MultiSigWallet' (MultiSigWallet.sol#108-119) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MultiSigWallet(address[] _owners, uint _required)\n",
                    "message": "Parameter '_owners' of MultiSigWallet.MultiSigWallet (MultiSigWallet.sol#108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MultiSigWallet(address[] _owners, uint _required)\n",
                    "message": "Parameter '_required' of MultiSigWallet.MultiSigWallet (MultiSigWallet.sol#108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeRequirement(uint _required)\n",
                    "message": "Parameter '_required' of MultiSigWallet.changeRequirement (MultiSigWallet.sol#176) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owners.length -= 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            throw;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                throw;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isConfirmed(uint transactionId)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getConfirmationCount(uint transactionId)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTransactionCount(bool pending, bool executed)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners()\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getConfirmations(uint transactionId)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<_owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length - 1; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<transactionCount; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i=0; i<owners.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i=0; i<transactionCount; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getConfirmationCount(uint transactionId)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTransactionCount(bool pending, bool executed)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<_owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<owners.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i=0; i<owners.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (msg.sender != address(this))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (isOwner[owner])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (!isOwner[owner])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (transactions[transactionId].destination == 0)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (!confirmations[transactionId][owner])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (confirmations[transactionId][owner])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (transactions[transactionId].executed)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_address == 0)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (   ownerCount > MAX_OWNER_COUNT\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (isOwner[_owners[i]] || _owners[i] == 0)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MultiSigWallet(address[] _owners, uint _required)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function submitTransaction(address destination, uint value, bytes data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTransaction(address destination, uint value, bytes data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (address[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (address[] _confirmations)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint[] _transactionIds)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            Transaction tx = transactions[transactionId];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function()\n",
                    "message": null
                }
            ]
        }
    },
    "real_contract-master/contracts/ReserveTokensHolder.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "           require((_to != 0) && (_to != address(this)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(getBlockNumber() >= startBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                getBlockNumber() <= endBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                finalizedBlock == 0 &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address(REAL) != 0x0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(collectedTokens == 0 && finalizedTime > 0 && getTime() > finalizedTime.add(months(12)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_TERM"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": "MiniMeToken.balances (ReserveTokensHolder.sol#113) is never initialized. It is used in:\n\t- doTransfer (ReserveTokensHolder.sol#206-244)\n\t- balanceOfAt (ReserveTokensHolder.sol#323-344)\n\t- generateTokens (ReserveTokensHolder.sol#416-426)\n\t- destroyTokens (ReserveTokensHolder.sol#433-443)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract (ReserveTokensHolder.sol#507-514) is declared view but contains assembly code\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1357,
                    "vulnerability_to_line": 1368,
                    "vulnerability_code": "    function collectTokens() public onlyOwner {\n\n        uint256 finalizedTime = contribution.finalizedTime();\n\n\n\n        require(collectedTokens == 0 && finalizedTime > 0 && getTime() > finalizedTime.add(months(12)));\n\n\n\n        uint256 balance = real.balanceOf(address(this));\n\n\n\n        collectedTokens = balance;\n\n        assert(real.transfer(owner, balance));\n\n\n\n        TokensWithdrawn(owner, balance);\n",
                    "message": "ReserveTokensHolder.collectTokens (ReserveTokensHolder.sol#1357-1368) uses a dangerous strict equality:\n\t- require(bool)(collectedTokens == 0 && finalizedTime > 0 && getTime() > finalizedTime.add(months(12)))\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\n\n        // Alerts the token controller of the approve function call\n\n        if (isContract(controller)) {\n\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n\n        }\n\n\n\n        allowed[msg.sender][_spender] = _amount;\n\n        Approval(msg.sender, _spender, _amount);\n\n        return true;\n",
                    "message": "Reentrancy in MiniMeToken.approve (ReserveTokensHolder.sol#258-275):\n\tExternal calls:\n\t- require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (ReserveTokensHolder.sol#269)\n\tState variables written after the call(s):\n\t- allowed (ReserveTokensHolder.sol#272)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1357,
                    "vulnerability_to_line": 1368,
                    "vulnerability_code": "    function collectTokens() public onlyOwner {\n\n        uint256 finalizedTime = contribution.finalizedTime();\n\n\n\n        require(collectedTokens == 0 && finalizedTime > 0 && getTime() > finalizedTime.add(months(12)));\n\n\n\n        uint256 balance = real.balanceOf(address(this));\n\n\n\n        collectedTokens = balance;\n\n        assert(real.transfer(owner, balance));\n\n\n\n        TokensWithdrawn(owner, balance);\n",
                    "message": "Reentrancy in ReserveTokensHolder.collectTokens (ReserveTokensHolder.sol#1357-1368):\n\tExternal calls:\n\t- finalizedTime = contribution.finalizedTime() (ReserveTokensHolder.sol#1358)\n\t- balance = real.balanceOf(address(this)) (ReserveTokensHolder.sol#1362)\n\tState variables written after the call(s):\n\t- collectedTokens (ReserveTokensHolder.sol#1364)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (ReserveTokensHolder.sol#537-547) does not use the value returned by external calls:\n\t-token.transfer(controller,balance) (ReserveTokensHolder.sol#545)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (ReserveTokensHolder.sol#1261-1274) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (ReserveTokensHolder.sol#1272)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1387,
                    "vulnerability_to_line": 1398,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        require(_token != address(real));\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "ReserveTokensHolder.claimTokens (ReserveTokensHolder.sol#1387-1398) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (ReserveTokensHolder.sol#1396)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint min = 0;\n",
                    "message": "MiniMeToken.getValueAt.min (local variable @ ReserveTokensHolder.sol#474) shadows:\n\t- MiniMeToken.min (function @ ReserveTokensHolder.sol#517-519)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "Reentrancy in REALCrowdsale.initialize (ReserveTokensHolder.sol#863-900):\n\tExternal calls:\n\t- require(bool)(REAL.totalSupply() == 0) (ReserveTokensHolder.sol#877)\n\t- require(bool)(REAL.controller() == address(this)) (ReserveTokensHolder.sol#878)\n\t- require(bool)(REAL.decimals() == 18) (ReserveTokensHolder.sol#879)\n\tState variables written after the call(s):\n\t- destEthTeam (ReserveTokensHolder.sol#890)\n\t- destTokensBounties (ReserveTokensHolder.sol#899)\n\t- destTokensReserve (ReserveTokensHolder.sol#893)\n\t- destTokensTeam (ReserveTokensHolder.sol#896)\n\t- endBlock (ReserveTokensHolder.sol#887)\n\t- realController (ReserveTokensHolder.sol#882)\n\t- startBlock (ReserveTokensHolder.sol#886)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract uses assembly (ReserveTokensHolder.sol#507-514)\n\t- ReserveTokensHolder.sol#510-513\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalSupply;\n",
                    "message": "ERC20Token.totalSupply should be constant (ReserveTokensHolder.sol#719)\nMiniMeToken.version should be constant (ReserveTokensHolder.sol#84)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": 946,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onTransfer (ReserveTokensHolder.sol#944-946) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": "TokenController.onTransfer (ReserveTokensHolder.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": 950,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onApprove (ReserveTokensHolder.sol#948-950) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": "TokenController.onApprove (ReserveTokensHolder.sol#52-53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 69,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n\n        controller = _newController;\n",
                    "message": "Controlled.changeController (ReserveTokensHolder.sol#67-69) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": "ApproveAndCallFallBack.receiveApproval (ReserveTokensHolder.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n        return doTransfer(msg.sender, _to, _amount);\n",
                    "message": "MiniMeToken.transfer (ReserveTokensHolder.sol#172-175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n\n    ) returns (bool success) {\n\n\n\n        // The controller of this contract can move tokens around at will,\n\n        //  this is important to recognize! Confirm that you trust the\n\n        //  controller of this contract, which in most situations should be\n\n        //  another open source smart contract or 0x0\n\n        if (msg.sender != controller) {\n\n            require(transfersEnabled);\n\n\n\n            // The standard ERC 20 transferFrom functionality\n\n            if (allowed[_from][msg.sender] < _amount) return false;\n\n            allowed[_from][msg.sender] -= _amount;\n\n        }\n\n        return doTransfer(_from, _to, _amount);\n",
                    "message": "MiniMeToken.transferFrom (ReserveTokensHolder.sol#183-198) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n\n    ) constant returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "MiniMeToken.allowance (ReserveTokensHolder.sol#282-285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n\n    ) returns (bool success) {\n\n        require(approve(_spender, _amount));\n\n\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n\n            msg.sender,\n\n            _amount,\n\n            this,\n\n            _extraData\n\n        );\n\n\n\n        return true;\n",
                    "message": "MiniMeToken.approveAndCall (ReserveTokensHolder.sol#294-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "    function createCloneToken(\n\n        string _cloneTokenName,\n\n        uint8 _cloneDecimalUnits,\n\n        string _cloneTokenSymbol,\n\n        uint _snapshotBlock,\n\n        bool _transfersEnabled\n\n        ) returns(address) {\n\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n\n            this,\n\n            _snapshotBlock,\n\n            _cloneTokenName,\n\n            _cloneDecimalUnits,\n\n            _cloneTokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        cloneToken.changeController(msg.sender);\n\n\n\n        // An event to make the token easy to find on the blockchain\n\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n\n        return address(cloneToken);\n",
                    "message": "MiniMeToken.createCloneToken (ReserveTokensHolder.sol#384-406) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 426,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n\n        uint previousBalanceTo = balanceOf(_owner);\n\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n\n        Transfer(0, _owner, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.generateTokens (ReserveTokensHolder.sol#416-426) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": 443,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply >= _amount);\n\n        uint previousBalanceFrom = balanceOf(_owner);\n\n        require(previousBalanceFrom >= _amount);\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n\n        Transfer(_owner, 0, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.destroyTokens (ReserveTokensHolder.sol#433-443) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 454,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n\n        transfersEnabled = _transfersEnabled;\n",
                    "message": "MiniMeToken.enableTransfers (ReserveTokensHolder.sol#452-454) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "    function ()  payable {\n\n        require(isContract(controller));\n\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
                    "message": "MiniMeToken.fallback (ReserveTokensHolder.sol#524-527) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (ReserveTokensHolder.sol#537-547) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function createCloneToken(\n\n        address _parentToken,\n\n        uint _snapshotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) returns (MiniMeToken) {\n\n        MiniMeToken newToken = new MiniMeToken(\n\n            this,\n\n            _parentToken,\n\n            _snapshotBlock,\n\n            _tokenName,\n\n            _decimalUnits,\n\n            _tokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        newToken.changeController(msg.sender);\n\n        return newToken;\n",
                    "message": "MiniMeTokenFactory.createCloneToken (ReserveTokensHolder.sol#583-603) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": 636,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n\n        newOwner = _newOwner;\n",
                    "message": "Owned.changeOwner (ReserveTokensHolder.sol#634-636) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": 643,
                    "vulnerability_code": "    function acceptOwnership() {\n\n        if (msg.sender == newOwner) {\n\n            owner = newOwner;\n\n        }\n",
                    "message": "Owned.acceptOwnership (ReserveTokensHolder.sol#639-643) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": "ERC20Token.balanceOf (ReserveTokensHolder.sol#723) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transfer (ReserveTokensHolder.sol#729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transferFrom (ReserveTokensHolder.sol#736) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.approve (ReserveTokensHolder.sol#742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": "ERC20Token.allowance (ReserveTokensHolder.sol#747) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "REALCrowdsale.initialize (ReserveTokensHolder.sol#863-900) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": 915,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n\n        require(getBlockNumber() < startBlock);\n\n        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n\n        guaranteedBuyersLimit[_th] = _limit;\n\n        reservedGuaranteed = reservedGuaranteed + _limit;\n\n        GuaranteedAddress(_th, _limit);\n",
                    "message": "REALCrowdsale.setGuaranteedAddress (ReserveTokensHolder.sol#909-915) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": 921,
                    "vulnerability_code": "    function () public payable notPaused {\n\n        proxyPayment(msg.sender);\n",
                    "message": "REALCrowdsale.fallback (ReserveTokensHolder.sol#919-921) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1134,
                    "vulnerability_to_line": 1207,
                    "vulnerability_code": "    function finalize() public initialized {\n\n        require(getBlockNumber() >= startBlock);\n\n        require(msg.sender == owner || getBlockNumber() > endBlock);\n\n        require(finalizedBlock == 0);\n\n\n\n        // Allow premature finalization if final limit is reached\n\n        if (getBlockNumber() <= endBlock) {\n\n            require(totalNormalCollected >= fundingLimit);\n\n        }\n\n\n\n        finalizedBlock = getBlockNumber();\n\n        finalizedTime = now;\n\n\n\n        uint256 percentageToTeam = percent(20);\n\n\n\n        uint256 percentageToContributors = percent(51);\n\n\n\n        uint256 percentageToReserve = percent(15);\n\n\n\n        uint256 percentageToBounties = percent(14);\n\n\n\n\n\n        // REAL.totalSupply() -> Tokens minted during the contribution\n\n        //  totalTokens  -> Total tokens that should be after the allocation\n\n        //                   of devTokens and reserve\n\n        //  percentageToContributors -> Which percentage should go to the\n\n        //                               contribution participants\n\n        //                               (x per 10**18 format)\n\n        //  percent(100) -> 100% in (x per 10**18 format)\n\n        //\n\n        //                       percentageToContributors\n\n        //  REAL.totalSupply() = -------------------------- * totalTokens  =>\n\n        //                             percent(100)\n\n        //\n\n        //\n\n        //                            percent(100)\n\n        //  =>  totalTokens = ---------------------------- * REAL.totalSupply()\n\n        //                      percentageToContributors\n\n        //\n\n        uint256 totalTokens = REAL.totalSupply().mul(percent(100)).div(percentageToContributors);\n\n\n\n\n\n        //\n\n        //                    percentageToBounties\n\n        //  bountiesTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensBounties,\n\n            totalTokens.mul(percentageToBounties).div(percent(100))));\n\n\n\n        //\n\n        //                    percentageToReserve\n\n        //  reserveTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensReserve,\n\n            totalTokens.mul(percentageToReserve).div(percent(100))));\n\n\n\n\n\n        //\n\n        //                   percentageToTeam\n\n        //  teamTokens = ----------------------- * totalTokens\n\n        //                   percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensTeam,\n\n            totalTokens.mul(percentageToTeam).div(percent(100))));\n\n\n\n        REAL.changeController(realController);\n\n\n\n        Finalized();\n",
                    "message": "REALCrowdsale.finalize (ReserveTokensHolder.sol#1134-1207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": 1235,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n\n        return REAL.totalSupply();\n",
                    "message": "REALCrowdsale.tokensIssued (ReserveTokensHolder.sol#1233-1235) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (ReserveTokensHolder.sol#1261-1274) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": 1280,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n\n        paused = true;\n",
                    "message": "REALCrowdsale.pauseContribution (ReserveTokensHolder.sol#1278-1280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": 1285,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n\n        paused = false;\n",
                    "message": "REALCrowdsale.resumeContribution (ReserveTokensHolder.sol#1283-1285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1357,
                    "vulnerability_to_line": 1368,
                    "vulnerability_code": "    function collectTokens() public onlyOwner {\n\n        uint256 finalizedTime = contribution.finalizedTime();\n\n\n\n        require(collectedTokens == 0 && finalizedTime > 0 && getTime() > finalizedTime.add(months(12)));\n\n\n\n        uint256 balance = real.balanceOf(address(this));\n\n\n\n        collectedTokens = balance;\n\n        assert(real.transfer(owner, balance));\n\n\n\n        TokensWithdrawn(owner, balance);\n",
                    "message": "ReserveTokensHolder.collectTokens (ReserveTokensHolder.sol#1357-1368) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1387,
                    "vulnerability_to_line": 1398,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        require(_token != address(real));\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "ReserveTokensHolder.claimTokens (ReserveTokensHolder.sol#1387-1398) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in ReserveTokensHolder.sol:\n\t- pragma solidity^0.4.11 (ReserveTokensHolder.sol#3): it allows old versions\n\t- pragma solidity^0.4.11 (ReserveTokensHolder.sol#608): it allows old versions\n\t- pragma solidity^0.4.11 (ReserveTokensHolder.sol#648): it allows old versions\n\t- pragma solidity^0.4.11 (ReserveTokensHolder.sol#706): it allows old versions\n\t- pragma solidity^0.4.11 (ReserveTokensHolder.sol#755): it allows old versions\n\t- pragma solidity^0.4.11 (ReserveTokensHolder.sol#1297): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": "Function 'Controlled.Controlled' (ReserveTokensHolder.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": "Parameter '_newController' of Controlled.changeController (ReserveTokensHolder.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "    function MiniMeToken(\n\n        address _tokenFactory,\n\n        address _parentToken,\n\n        uint _parentSnapShotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) {\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n\n        name = _tokenName;                                 // Set the name\n\n        decimals = _decimalUnits;                          // Set the decimals\n\n        symbol = _tokenSymbol;                             // Set the symbol\n\n        parentToken = MiniMeToken(_parentToken);\n\n        parentSnapShotBlock = _parentSnapShotBlock;\n\n        transfersEnabled = _transfersEnabled;\n\n        creationBlock = block.number;\n",
                    "message": "Function 'MiniMeToken.MiniMeToken' (ReserveTokensHolder.sol#144-161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenFactory,\n",
                    "message": "Parameter '_tokenFactory' of MiniMeToken.MiniMeToken (ReserveTokensHolder.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeToken.MiniMeToken (ReserveTokensHolder.sol#146) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _parentSnapShotBlock,\n",
                    "message": "Parameter '_parentSnapShotBlock' of MiniMeToken.MiniMeToken (ReserveTokensHolder.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeToken.MiniMeToken (ReserveTokensHolder.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeToken.MiniMeToken (ReserveTokensHolder.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeToken.MiniMeToken (ReserveTokensHolder.sol#150) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.MiniMeToken (ReserveTokensHolder.sol#151) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_to' of MiniMeToken.transfer (ReserveTokensHolder.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.transfer (ReserveTokensHolder.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.transferFrom (ReserveTokensHolder.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.transferFrom (ReserveTokensHolder.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.transferFrom (ReserveTokensHolder.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.doTransfer (ReserveTokensHolder.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.doTransfer (ReserveTokensHolder.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.doTransfer (ReserveTokensHolder.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOf (ReserveTokensHolder.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_spender' of MiniMeToken.approve (ReserveTokensHolder.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.approve (ReserveTokensHolder.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_owner' of MiniMeToken.allowance (ReserveTokensHolder.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_spender' of MiniMeToken.allowance (ReserveTokensHolder.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_spender' of MiniMeToken.approveAndCall (ReserveTokensHolder.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_amount' of MiniMeToken.approveAndCall (ReserveTokensHolder.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_extraData' of MiniMeToken.approveAndCall (ReserveTokensHolder.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOfAt (ReserveTokensHolder.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.balanceOfAt (ReserveTokensHolder.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.totalSupplyAt (ReserveTokensHolder.sol#349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenName,\n",
                    "message": "Parameter '_cloneTokenName' of MiniMeToken.createCloneToken (ReserveTokensHolder.sol#385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _cloneDecimalUnits,\n",
                    "message": "Parameter '_cloneDecimalUnits' of MiniMeToken.createCloneToken (ReserveTokensHolder.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenSymbol,\n",
                    "message": "Parameter '_cloneTokenSymbol' of MiniMeToken.createCloneToken (ReserveTokensHolder.sol#387) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeToken.createCloneToken (ReserveTokensHolder.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.createCloneToken (ReserveTokensHolder.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.generateTokens (ReserveTokensHolder.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.generateTokens (ReserveTokensHolder.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.destroyTokens (ReserveTokensHolder.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.destroyTokens (ReserveTokensHolder.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.enableTransfers (ReserveTokensHolder.sol#452) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": "Parameter '_block' of MiniMeToken.getValueAt (ReserveTokensHolder.sol#464) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n",
                    "message": "Parameter '_value' of MiniMeToken.updateValueAtNow (ReserveTokensHolder.sol#491) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": "Parameter '_addr' of MiniMeToken.isContract (ReserveTokensHolder.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": "Parameter '_token' of MiniMeToken.claimTokens (ReserveTokensHolder.sol#537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeTokenFactory.createCloneToken (ReserveTokensHolder.sol#584) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeTokenFactory.createCloneToken (ReserveTokensHolder.sol#585) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeTokenFactory.createCloneToken (ReserveTokensHolder.sol#586) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeTokenFactory.createCloneToken (ReserveTokensHolder.sol#587) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeTokenFactory.createCloneToken (ReserveTokensHolder.sol#588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeTokenFactory.createCloneToken (ReserveTokensHolder.sol#589) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": 627,
                    "vulnerability_code": "    function Owned() {\n\n        owner = msg.sender;\n",
                    "message": "Function 'Owned.Owned' (ReserveTokensHolder.sol#625-627) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Owned.changeOwner (ReserveTokensHolder.sol#634) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 932,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _th) public payable notPaused initialized contributionOpen returns (bool) {\n",
                    "message": "Parameter '_th' of REALCrowdsale.proxyPayment (ReserveTokensHolder.sol#932) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onTransfer (ReserveTokensHolder.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onTransfer (ReserveTokensHolder.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onTransfer (ReserveTokensHolder.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onApprove (ReserveTokensHolder.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onApprove (ReserveTokensHolder.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onApprove (ReserveTokensHolder.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": 851,
                    "vulnerability_code": "    function REALCrowdsale() {\n\n        paused = false;\n",
                    "message": "Function 'REALCrowdsale.REALCrowdsale' (ReserveTokensHolder.sol#849-851) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _real,\n",
                    "message": "Parameter '_real' of REALCrowdsale.initialize (ReserveTokensHolder.sol#864) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 865,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _realController,\n",
                    "message": "Parameter '_realController' of REALCrowdsale.initialize (ReserveTokensHolder.sol#865) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _startBlock,\n",
                    "message": "Parameter '_startBlock' of REALCrowdsale.initialize (ReserveTokensHolder.sol#866) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endBlock,\n",
                    "message": "Parameter '_endBlock' of REALCrowdsale.initialize (ReserveTokensHolder.sol#867) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destEthTeam,\n",
                    "message": "Parameter '_destEthTeam' of REALCrowdsale.initialize (ReserveTokensHolder.sol#868) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensReserve,\n",
                    "message": "Parameter '_destTokensReserve' of REALCrowdsale.initialize (ReserveTokensHolder.sol#869) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensTeam,\n",
                    "message": "Parameter '_destTokensTeam' of REALCrowdsale.initialize (ReserveTokensHolder.sol#870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensBounties\n",
                    "message": "Parameter '_destTokensBounties' of REALCrowdsale.initialize (ReserveTokensHolder.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_th' of REALCrowdsale.setGuaranteedAddress (ReserveTokensHolder.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_limit' of REALCrowdsale.setGuaranteedAddress (ReserveTokensHolder.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyNormal(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyNormal (ReserveTokensHolder.sol#952) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyGuaranteed(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyGuaranteed (ReserveTokensHolder.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.doBuy (ReserveTokensHolder.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_toFund' of REALCrowdsale.doBuy (ReserveTokensHolder.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_guaranteed' of REALCrowdsale.doBuy (ReserveTokensHolder.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": "Parameter '_sender' of REALCrowdsale.isContract (ReserveTokensHolder.sol#1216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of REALCrowdsale.claimTokens (ReserveTokensHolder.sol#1261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public fundingLimit = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.fundingLimit' (ReserveTokensHolder.sol#789) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 790,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public failSafeLimit = 200000 ether;\n",
                    "message": "Constant 'REALCrowdsale.failSafeLimit' (ReserveTokensHolder.sol#790) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 791,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGuaranteedLimit = 30000 ether;\n",
                    "message": "Constant 'REALCrowdsale.maxGuaranteedLimit' (ReserveTokensHolder.sol#791) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public exchangeRate = 220;\n",
                    "message": "Constant 'REALCrowdsale.exchangeRate' (ReserveTokensHolder.sol#792) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGasPrice = 50000000000;\n",
                    "message": "Constant 'REALCrowdsale.maxGasPrice' (ReserveTokensHolder.sol#793) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 794,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxCallFrequency = 100;\n",
                    "message": "Constant 'REALCrowdsale.maxCallFrequency' (ReserveTokensHolder.sol#794) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1cap = 25000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus1cap' (ReserveTokensHolder.sol#796) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1 = 25;\n",
                    "message": "Constant 'REALCrowdsale.bonus1' (ReserveTokensHolder.sol#797) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2cap = 50000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus2cap' (ReserveTokensHolder.sol#798) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 799,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2 = 20;\n",
                    "message": "Constant 'REALCrowdsale.bonus2' (ReserveTokensHolder.sol#799) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 800,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3cap = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus3cap' (ReserveTokensHolder.sol#800) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3 = 15;\n",
                    "message": "Constant 'REALCrowdsale.bonus3' (ReserveTokensHolder.sol#801) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4cap = 150000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus4cap' (ReserveTokensHolder.sol#802) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 803,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4 = 5;\n",
                    "message": "Constant 'REALCrowdsale.bonus4' (ReserveTokensHolder.sol#803) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 805,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MiniMeToken public REAL;\n",
                    "message": "Variable 'REALCrowdsale.REAL' (ReserveTokensHolder.sol#805) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": 1354,
                    "vulnerability_code": "    function ReserveTokensHolder(address _owner, address _contribution, address _real) {\n\n        owner = _owner;\n\n        contribution = REALCrowdsale(_contribution);\n\n        real = MiniMeToken(_real);\n",
                    "message": "Function 'ReserveTokensHolder.ReserveTokensHolder' (ReserveTokensHolder.sol#1350-1354) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ReserveTokensHolder(address _owner, address _contribution, address _real) {\n",
                    "message": "Parameter '_owner' of ReserveTokensHolder.ReserveTokensHolder (ReserveTokensHolder.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ReserveTokensHolder(address _owner, address _contribution, address _real) {\n",
                    "message": "Parameter '_contribution' of ReserveTokensHolder.ReserveTokensHolder (ReserveTokensHolder.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ReserveTokensHolder(address _owner, address _contribution, address _real) {\n",
                    "message": "Parameter '_real' of ReserveTokensHolder.ReserveTokensHolder (ReserveTokensHolder.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of ReserveTokensHolder.claimTokens (ReserveTokensHolder.sol#1387) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalCollected() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBlockNumber() internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (max > min) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function initialize(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 1217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return tx.origin != _sender;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function () public payable notPaused {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MiniMeToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ()  payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Owned() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function acceptOwnership() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALCrowdsale() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ReserveTokensHolder(address _owner, address _contribution, address _real) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Checkpoint[] totalSupplyHistory;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 collectedTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    REALCrowdsale contribution;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MiniMeToken real;\n",
                    "message": null
                }
            ]
        }
    },
    "real_contract-master/contracts/SafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in SafeMath.sol:\n\t- pragma solidity^0.4.11 (SafeMath.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                }
            ]
        }
    },
    "real_contract-master/contracts/REALCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "           require((_to != 0) && (_to != address(this)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(getBlockNumber() >= startBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                getBlockNumber() <= endBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                finalizedBlock == 0 &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address(REAL) != 0x0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": "MiniMeToken.balances (REALCrowdsale.sol#153) is never initialized. It is used in:\n\t- doTransfer (REALCrowdsale.sol#246-284)\n\t- balanceOfAt (REALCrowdsale.sol#363-384)\n\t- generateTokens (REALCrowdsale.sol#456-466)\n\t- destroyTokens (REALCrowdsale.sol#473-483)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": 554,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract (REALCrowdsale.sol#547-554) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\n\n        // Alerts the token controller of the approve function call\n\n        if (isContract(controller)) {\n\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n\n        }\n\n\n\n        allowed[msg.sender][_spender] = _amount;\n\n        Approval(msg.sender, _spender, _amount);\n\n        return true;\n",
                    "message": "Reentrancy in MiniMeToken.approve (REALCrowdsale.sol#298-315):\n\tExternal calls:\n\t- require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (REALCrowdsale.sol#309)\n\tState variables written after the call(s):\n\t- allowed (REALCrowdsale.sol#312)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": 587,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (REALCrowdsale.sol#577-587) does not use the value returned by external calls:\n\t-token.transfer(controller,balance) (REALCrowdsale.sol#585)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (REALCrowdsale.sol#1261-1274) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (REALCrowdsale.sol#1272)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 514,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint min = 0;\n",
                    "message": "MiniMeToken.getValueAt.min (local variable @ REALCrowdsale.sol#514) shadows:\n\t- MiniMeToken.min (function @ REALCrowdsale.sol#557-559)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "Reentrancy in REALCrowdsale.initialize (REALCrowdsale.sol#863-900):\n\tExternal calls:\n\t- require(bool)(REAL.totalSupply() == 0) (REALCrowdsale.sol#877)\n\t- require(bool)(REAL.controller() == address(this)) (REALCrowdsale.sol#878)\n\t- require(bool)(REAL.decimals() == 18) (REALCrowdsale.sol#879)\n\tState variables written after the call(s):\n\t- destEthTeam (REALCrowdsale.sol#890)\n\t- destTokensBounties (REALCrowdsale.sol#899)\n\t- destTokensReserve (REALCrowdsale.sol#893)\n\t- destTokensTeam (REALCrowdsale.sol#896)\n\t- endBlock (REALCrowdsale.sol#887)\n\t- realController (REALCrowdsale.sol#882)\n\t- startBlock (REALCrowdsale.sol#886)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": 554,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract uses assembly (REALCrowdsale.sol#547-554)\n\t- REALCrowdsale.sol#550-553\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalSupply;\n",
                    "message": "ERC20Token.totalSupply should be constant (REALCrowdsale.sol#719)\nMiniMeToken.version should be constant (REALCrowdsale.sol#124)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": 31,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n\n        newOwner = _newOwner;\n",
                    "message": "Owned.changeOwner (REALCrowdsale.sol#29-31) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "    function acceptOwnership() {\n\n        if (msg.sender == newOwner) {\n\n            owner = newOwner;\n\n        }\n",
                    "message": "Owned.acceptOwnership (REALCrowdsale.sol#34-38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": "TokenController.onTransfer (REALCrowdsale.sol#84) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": 946,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onTransfer (REALCrowdsale.sol#944-946) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": 950,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onApprove (REALCrowdsale.sol#948-950) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 93,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": "TokenController.onApprove (REALCrowdsale.sol#92-93) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 109,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n\n        controller = _newController;\n",
                    "message": "Controlled.changeController (REALCrowdsale.sol#107-109) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": "ApproveAndCallFallBack.receiveApproval (REALCrowdsale.sol#113) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n        return doTransfer(msg.sender, _to, _amount);\n",
                    "message": "MiniMeToken.transfer (REALCrowdsale.sol#212-215) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": 238,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n\n    ) returns (bool success) {\n\n\n\n        // The controller of this contract can move tokens around at will,\n\n        //  this is important to recognize! Confirm that you trust the\n\n        //  controller of this contract, which in most situations should be\n\n        //  another open source smart contract or 0x0\n\n        if (msg.sender != controller) {\n\n            require(transfersEnabled);\n\n\n\n            // The standard ERC 20 transferFrom functionality\n\n            if (allowed[_from][msg.sender] < _amount) return false;\n\n            allowed[_from][msg.sender] -= _amount;\n\n        }\n\n        return doTransfer(_from, _to, _amount);\n",
                    "message": "MiniMeToken.transferFrom (REALCrowdsale.sol#223-238) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": 325,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n\n    ) constant returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "MiniMeToken.allowance (REALCrowdsale.sol#322-325) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": 346,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n\n    ) returns (bool success) {\n\n        require(approve(_spender, _amount));\n\n\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n\n            msg.sender,\n\n            _amount,\n\n            this,\n\n            _extraData\n\n        );\n\n\n\n        return true;\n",
                    "message": "MiniMeToken.approveAndCall (REALCrowdsale.sol#334-346) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": 446,
                    "vulnerability_code": "    function createCloneToken(\n\n        string _cloneTokenName,\n\n        uint8 _cloneDecimalUnits,\n\n        string _cloneTokenSymbol,\n\n        uint _snapshotBlock,\n\n        bool _transfersEnabled\n\n        ) returns(address) {\n\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n\n            this,\n\n            _snapshotBlock,\n\n            _cloneTokenName,\n\n            _cloneDecimalUnits,\n\n            _cloneTokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        cloneToken.changeController(msg.sender);\n\n\n\n        // An event to make the token easy to find on the blockchain\n\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n\n        return address(cloneToken);\n",
                    "message": "MiniMeToken.createCloneToken (REALCrowdsale.sol#424-446) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": 466,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n\n        uint previousBalanceTo = balanceOf(_owner);\n\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n\n        Transfer(0, _owner, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.generateTokens (REALCrowdsale.sol#456-466) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": 483,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply >= _amount);\n\n        uint previousBalanceFrom = balanceOf(_owner);\n\n        require(previousBalanceFrom >= _amount);\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n\n        Transfer(_owner, 0, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.destroyTokens (REALCrowdsale.sol#473-483) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n\n        transfersEnabled = _transfersEnabled;\n",
                    "message": "MiniMeToken.enableTransfers (REALCrowdsale.sol#492-494) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": 567,
                    "vulnerability_code": "    function ()  payable {\n\n        require(isContract(controller));\n\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
                    "message": "MiniMeToken.fallback (REALCrowdsale.sol#564-567) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": 587,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (REALCrowdsale.sol#577-587) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": 643,
                    "vulnerability_code": "    function createCloneToken(\n\n        address _parentToken,\n\n        uint _snapshotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) returns (MiniMeToken) {\n\n        MiniMeToken newToken = new MiniMeToken(\n\n            this,\n\n            _parentToken,\n\n            _snapshotBlock,\n\n            _tokenName,\n\n            _decimalUnits,\n\n            _tokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        newToken.changeController(msg.sender);\n\n        return newToken;\n",
                    "message": "MiniMeTokenFactory.createCloneToken (REALCrowdsale.sol#623-643) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": "ERC20Token.balanceOf (REALCrowdsale.sol#723) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transfer (REALCrowdsale.sol#729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transferFrom (REALCrowdsale.sol#736) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.approve (REALCrowdsale.sol#742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": "ERC20Token.allowance (REALCrowdsale.sol#747) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "REALCrowdsale.initialize (REALCrowdsale.sol#863-900) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": 915,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n\n        require(getBlockNumber() < startBlock);\n\n        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n\n        guaranteedBuyersLimit[_th] = _limit;\n\n        reservedGuaranteed = reservedGuaranteed + _limit;\n\n        GuaranteedAddress(_th, _limit);\n",
                    "message": "REALCrowdsale.setGuaranteedAddress (REALCrowdsale.sol#909-915) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": 921,
                    "vulnerability_code": "    function () public payable notPaused {\n\n        proxyPayment(msg.sender);\n",
                    "message": "REALCrowdsale.fallback (REALCrowdsale.sol#919-921) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1134,
                    "vulnerability_to_line": 1207,
                    "vulnerability_code": "    function finalize() public initialized {\n\n        require(getBlockNumber() >= startBlock);\n\n        require(msg.sender == owner || getBlockNumber() > endBlock);\n\n        require(finalizedBlock == 0);\n\n\n\n        // Allow premature finalization if final limit is reached\n\n        if (getBlockNumber() <= endBlock) {\n\n            require(totalNormalCollected >= fundingLimit);\n\n        }\n\n\n\n        finalizedBlock = getBlockNumber();\n\n        finalizedTime = now;\n\n\n\n        uint256 percentageToTeam = percent(20);\n\n\n\n        uint256 percentageToContributors = percent(51);\n\n\n\n        uint256 percentageToReserve = percent(15);\n\n\n\n        uint256 percentageToBounties = percent(14);\n\n\n\n\n\n        // REAL.totalSupply() -> Tokens minted during the contribution\n\n        //  totalTokens  -> Total tokens that should be after the allocation\n\n        //                   of devTokens and reserve\n\n        //  percentageToContributors -> Which percentage should go to the\n\n        //                               contribution participants\n\n        //                               (x per 10**18 format)\n\n        //  percent(100) -> 100% in (x per 10**18 format)\n\n        //\n\n        //                       percentageToContributors\n\n        //  REAL.totalSupply() = -------------------------- * totalTokens  =>\n\n        //                             percent(100)\n\n        //\n\n        //\n\n        //                            percent(100)\n\n        //  =>  totalTokens = ---------------------------- * REAL.totalSupply()\n\n        //                      percentageToContributors\n\n        //\n\n        uint256 totalTokens = REAL.totalSupply().mul(percent(100)).div(percentageToContributors);\n\n\n\n\n\n        //\n\n        //                    percentageToBounties\n\n        //  bountiesTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensBounties,\n\n            totalTokens.mul(percentageToBounties).div(percent(100))));\n\n\n\n        //\n\n        //                    percentageToReserve\n\n        //  reserveTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensReserve,\n\n            totalTokens.mul(percentageToReserve).div(percent(100))));\n\n\n\n\n\n        //\n\n        //                   percentageToTeam\n\n        //  teamTokens = ----------------------- * totalTokens\n\n        //                   percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensTeam,\n\n            totalTokens.mul(percentageToTeam).div(percent(100))));\n\n\n\n        REAL.changeController(realController);\n\n\n\n        Finalized();\n",
                    "message": "REALCrowdsale.finalize (REALCrowdsale.sol#1134-1207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": 1235,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n\n        return REAL.totalSupply();\n",
                    "message": "REALCrowdsale.tokensIssued (REALCrowdsale.sol#1233-1235) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (REALCrowdsale.sol#1261-1274) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": 1280,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n\n        paused = true;\n",
                    "message": "REALCrowdsale.pauseContribution (REALCrowdsale.sol#1278-1280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": 1285,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n\n        paused = false;\n",
                    "message": "REALCrowdsale.resumeContribution (REALCrowdsale.sol#1283-1285) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in REALCrowdsale.sol:\n\t- pragma solidity^0.4.11 (REALCrowdsale.sol#3): it allows old versions\n\t- pragma solidity^0.4.11 (REALCrowdsale.sol#43): it allows old versions\n\t- pragma solidity^0.4.11 (REALCrowdsale.sol#648): it allows old versions\n\t- pragma solidity^0.4.11 (REALCrowdsale.sol#706): it allows old versions\n\t- pragma solidity^0.4.11 (REALCrowdsale.sol#755): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 22,
                    "vulnerability_code": "    function Owned() {\n\n        owner = msg.sender;\n",
                    "message": "Function 'Owned.Owned' (REALCrowdsale.sol#20-22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Owned.changeOwner (REALCrowdsale.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": "Function 'Controlled.Controlled' (REALCrowdsale.sol#103) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": "Parameter '_newController' of Controlled.changeController (REALCrowdsale.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": 201,
                    "vulnerability_code": "    function MiniMeToken(\n\n        address _tokenFactory,\n\n        address _parentToken,\n\n        uint _parentSnapShotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) {\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n\n        name = _tokenName;                                 // Set the name\n\n        decimals = _decimalUnits;                          // Set the decimals\n\n        symbol = _tokenSymbol;                             // Set the symbol\n\n        parentToken = MiniMeToken(_parentToken);\n\n        parentSnapShotBlock = _parentSnapShotBlock;\n\n        transfersEnabled = _transfersEnabled;\n\n        creationBlock = block.number;\n",
                    "message": "Function 'MiniMeToken.MiniMeToken' (REALCrowdsale.sol#184-201) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenFactory,\n",
                    "message": "Parameter '_tokenFactory' of MiniMeToken.MiniMeToken (REALCrowdsale.sol#185) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeToken.MiniMeToken (REALCrowdsale.sol#186) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _parentSnapShotBlock,\n",
                    "message": "Parameter '_parentSnapShotBlock' of MiniMeToken.MiniMeToken (REALCrowdsale.sol#187) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeToken.MiniMeToken (REALCrowdsale.sol#188) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeToken.MiniMeToken (REALCrowdsale.sol#189) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeToken.MiniMeToken (REALCrowdsale.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.MiniMeToken (REALCrowdsale.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_to' of MiniMeToken.transfer (REALCrowdsale.sol#212) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.transfer (REALCrowdsale.sol#212) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.transferFrom (REALCrowdsale.sol#223) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.transferFrom (REALCrowdsale.sol#223) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.transferFrom (REALCrowdsale.sol#223) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.doTransfer (REALCrowdsale.sol#246) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.doTransfer (REALCrowdsale.sol#246) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.doTransfer (REALCrowdsale.sol#246) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOf (REALCrowdsale.sol#288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_spender' of MiniMeToken.approve (REALCrowdsale.sol#298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.approve (REALCrowdsale.sol#298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_owner' of MiniMeToken.allowance (REALCrowdsale.sol#322) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_spender' of MiniMeToken.allowance (REALCrowdsale.sol#322) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_spender' of MiniMeToken.approveAndCall (REALCrowdsale.sol#334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_amount' of MiniMeToken.approveAndCall (REALCrowdsale.sol#334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_extraData' of MiniMeToken.approveAndCall (REALCrowdsale.sol#334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOfAt (REALCrowdsale.sol#363) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.balanceOfAt (REALCrowdsale.sol#363) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.totalSupplyAt (REALCrowdsale.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenName,\n",
                    "message": "Parameter '_cloneTokenName' of MiniMeToken.createCloneToken (REALCrowdsale.sol#425) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _cloneDecimalUnits,\n",
                    "message": "Parameter '_cloneDecimalUnits' of MiniMeToken.createCloneToken (REALCrowdsale.sol#426) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenSymbol,\n",
                    "message": "Parameter '_cloneTokenSymbol' of MiniMeToken.createCloneToken (REALCrowdsale.sol#427) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeToken.createCloneToken (REALCrowdsale.sol#428) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.createCloneToken (REALCrowdsale.sol#429) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.generateTokens (REALCrowdsale.sol#456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.generateTokens (REALCrowdsale.sol#456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.destroyTokens (REALCrowdsale.sol#473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.destroyTokens (REALCrowdsale.sol#473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.enableTransfers (REALCrowdsale.sol#492) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": "Parameter '_block' of MiniMeToken.getValueAt (REALCrowdsale.sol#504) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n",
                    "message": "Parameter '_value' of MiniMeToken.updateValueAtNow (REALCrowdsale.sol#531) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": "Parameter '_addr' of MiniMeToken.isContract (REALCrowdsale.sol#547) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": "Parameter '_token' of MiniMeToken.claimTokens (REALCrowdsale.sol#577) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeTokenFactory.createCloneToken (REALCrowdsale.sol#624) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeTokenFactory.createCloneToken (REALCrowdsale.sol#625) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 626,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeTokenFactory.createCloneToken (REALCrowdsale.sol#626) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 627,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeTokenFactory.createCloneToken (REALCrowdsale.sol#627) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 628,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeTokenFactory.createCloneToken (REALCrowdsale.sol#628) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 629,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeTokenFactory.createCloneToken (REALCrowdsale.sol#629) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 932,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _th) public payable notPaused initialized contributionOpen returns (bool) {\n",
                    "message": "Parameter '_th' of REALCrowdsale.proxyPayment (REALCrowdsale.sol#932) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onTransfer (REALCrowdsale.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onTransfer (REALCrowdsale.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onTransfer (REALCrowdsale.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onApprove (REALCrowdsale.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onApprove (REALCrowdsale.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onApprove (REALCrowdsale.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": 851,
                    "vulnerability_code": "    function REALCrowdsale() {\n\n        paused = false;\n",
                    "message": "Function 'REALCrowdsale.REALCrowdsale' (REALCrowdsale.sol#849-851) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _real,\n",
                    "message": "Parameter '_real' of REALCrowdsale.initialize (REALCrowdsale.sol#864) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 865,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _realController,\n",
                    "message": "Parameter '_realController' of REALCrowdsale.initialize (REALCrowdsale.sol#865) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _startBlock,\n",
                    "message": "Parameter '_startBlock' of REALCrowdsale.initialize (REALCrowdsale.sol#866) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endBlock,\n",
                    "message": "Parameter '_endBlock' of REALCrowdsale.initialize (REALCrowdsale.sol#867) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destEthTeam,\n",
                    "message": "Parameter '_destEthTeam' of REALCrowdsale.initialize (REALCrowdsale.sol#868) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensReserve,\n",
                    "message": "Parameter '_destTokensReserve' of REALCrowdsale.initialize (REALCrowdsale.sol#869) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensTeam,\n",
                    "message": "Parameter '_destTokensTeam' of REALCrowdsale.initialize (REALCrowdsale.sol#870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensBounties\n",
                    "message": "Parameter '_destTokensBounties' of REALCrowdsale.initialize (REALCrowdsale.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_th' of REALCrowdsale.setGuaranteedAddress (REALCrowdsale.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_limit' of REALCrowdsale.setGuaranteedAddress (REALCrowdsale.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyNormal(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyNormal (REALCrowdsale.sol#952) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyGuaranteed(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyGuaranteed (REALCrowdsale.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.doBuy (REALCrowdsale.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_toFund' of REALCrowdsale.doBuy (REALCrowdsale.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_guaranteed' of REALCrowdsale.doBuy (REALCrowdsale.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": "Parameter '_sender' of REALCrowdsale.isContract (REALCrowdsale.sol#1216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of REALCrowdsale.claimTokens (REALCrowdsale.sol#1261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public fundingLimit = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.fundingLimit' (REALCrowdsale.sol#789) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 790,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public failSafeLimit = 200000 ether;\n",
                    "message": "Constant 'REALCrowdsale.failSafeLimit' (REALCrowdsale.sol#790) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 791,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGuaranteedLimit = 30000 ether;\n",
                    "message": "Constant 'REALCrowdsale.maxGuaranteedLimit' (REALCrowdsale.sol#791) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public exchangeRate = 220;\n",
                    "message": "Constant 'REALCrowdsale.exchangeRate' (REALCrowdsale.sol#792) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGasPrice = 50000000000;\n",
                    "message": "Constant 'REALCrowdsale.maxGasPrice' (REALCrowdsale.sol#793) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 794,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxCallFrequency = 100;\n",
                    "message": "Constant 'REALCrowdsale.maxCallFrequency' (REALCrowdsale.sol#794) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1cap = 25000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus1cap' (REALCrowdsale.sol#796) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1 = 25;\n",
                    "message": "Constant 'REALCrowdsale.bonus1' (REALCrowdsale.sol#797) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2cap = 50000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus2cap' (REALCrowdsale.sol#798) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 799,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2 = 20;\n",
                    "message": "Constant 'REALCrowdsale.bonus2' (REALCrowdsale.sol#799) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 800,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3cap = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus3cap' (REALCrowdsale.sol#800) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3 = 15;\n",
                    "message": "Constant 'REALCrowdsale.bonus3' (REALCrowdsale.sol#801) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4cap = 150000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus4cap' (REALCrowdsale.sol#802) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 803,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4 = 5;\n",
                    "message": "Constant 'REALCrowdsale.bonus4' (REALCrowdsale.sol#803) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 805,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MiniMeToken public REAL;\n",
                    "message": "Variable 'REALCrowdsale.REAL' (REALCrowdsale.sol#805) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalCollected() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBlockNumber() internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (max > min) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function initialize(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 1217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return tx.origin != _sender;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function () public payable notPaused {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Owned() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function acceptOwnership() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MiniMeToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ()  payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALCrowdsale() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Checkpoint[] totalSupplyHistory;\n",
                    "message": null
                }
            ]
        }
    },
    "real_contract-master/contracts/REAL.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "           require((_to != 0) && (_to != address(this)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_74"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": "MiniMeToken.balances (REAL.sol#113) is never initialized. It is used in:\n\t- doTransfer (REAL.sol#206-244)\n\t- balanceOfAt (REAL.sol#323-344)\n\t- generateTokens (REAL.sol#416-426)\n\t- destroyTokens (REAL.sol#433-443)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract (REAL.sol#507-514) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\n\n        // Alerts the token controller of the approve function call\n\n        if (isContract(controller)) {\n\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n\n        }\n\n\n\n        allowed[msg.sender][_spender] = _amount;\n\n        Approval(msg.sender, _spender, _amount);\n\n        return true;\n",
                    "message": "Reentrancy in MiniMeToken.approve (REAL.sol#258-275):\n\tExternal calls:\n\t- require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (REAL.sol#269)\n\tState variables written after the call(s):\n\t- allowed (REAL.sol#272)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (REAL.sol#537-547) does not use the value returned by external calls:\n\t-token.transfer(controller,balance) (REAL.sol#545)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint min = 0;\n",
                    "message": "MiniMeToken.getValueAt.min (local variable @ REAL.sol#474) shadows:\n\t- MiniMeToken.min (function @ REAL.sol#517-519)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract uses assembly (REAL.sol#507-514)\n\t- REAL.sol#510-513\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\n",
                    "message": "MiniMeToken.version should be constant (REAL.sol#84)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
                    "message": "TokenController.proxyPayment (REAL.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": "TokenController.onTransfer (REAL.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": "TokenController.onApprove (REAL.sol#52-53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 69,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n\n        controller = _newController;\n",
                    "message": "Controlled.changeController (REAL.sol#67-69) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": "ApproveAndCallFallBack.receiveApproval (REAL.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n        return doTransfer(msg.sender, _to, _amount);\n",
                    "message": "MiniMeToken.transfer (REAL.sol#172-175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n\n    ) returns (bool success) {\n\n\n\n        // The controller of this contract can move tokens around at will,\n\n        //  this is important to recognize! Confirm that you trust the\n\n        //  controller of this contract, which in most situations should be\n\n        //  another open source smart contract or 0x0\n\n        if (msg.sender != controller) {\n\n            require(transfersEnabled);\n\n\n\n            // The standard ERC 20 transferFrom functionality\n\n            if (allowed[_from][msg.sender] < _amount) return false;\n\n            allowed[_from][msg.sender] -= _amount;\n\n        }\n\n        return doTransfer(_from, _to, _amount);\n",
                    "message": "MiniMeToken.transferFrom (REAL.sol#183-198) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n\n    ) constant returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "MiniMeToken.allowance (REAL.sol#282-285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n\n    ) returns (bool success) {\n\n        require(approve(_spender, _amount));\n\n\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n\n            msg.sender,\n\n            _amount,\n\n            this,\n\n            _extraData\n\n        );\n\n\n\n        return true;\n",
                    "message": "MiniMeToken.approveAndCall (REAL.sol#294-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "    function createCloneToken(\n\n        string _cloneTokenName,\n\n        uint8 _cloneDecimalUnits,\n\n        string _cloneTokenSymbol,\n\n        uint _snapshotBlock,\n\n        bool _transfersEnabled\n\n        ) returns(address) {\n\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n\n            this,\n\n            _snapshotBlock,\n\n            _cloneTokenName,\n\n            _cloneDecimalUnits,\n\n            _cloneTokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        cloneToken.changeController(msg.sender);\n\n\n\n        // An event to make the token easy to find on the blockchain\n\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n\n        return address(cloneToken);\n",
                    "message": "MiniMeToken.createCloneToken (REAL.sol#384-406) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 426,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n\n        uint previousBalanceTo = balanceOf(_owner);\n\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n\n        Transfer(0, _owner, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.generateTokens (REAL.sol#416-426) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": 443,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply >= _amount);\n\n        uint previousBalanceFrom = balanceOf(_owner);\n\n        require(previousBalanceFrom >= _amount);\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n\n        Transfer(_owner, 0, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.destroyTokens (REAL.sol#433-443) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 454,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n\n        transfersEnabled = _transfersEnabled;\n",
                    "message": "MiniMeToken.enableTransfers (REAL.sol#452-454) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "    function ()  payable {\n\n        require(isContract(controller));\n\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
                    "message": "MiniMeToken.fallback (REAL.sol#524-527) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (REAL.sol#537-547) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function createCloneToken(\n\n        address _parentToken,\n\n        uint _snapshotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) returns (MiniMeToken) {\n\n        MiniMeToken newToken = new MiniMeToken(\n\n            this,\n\n            _parentToken,\n\n            _snapshotBlock,\n\n            _tokenName,\n\n            _decimalUnits,\n\n            _tokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        newToken.changeController(msg.sender);\n\n        return newToken;\n",
                    "message": "MiniMeTokenFactory.createCloneToken (REAL.sol#583-603) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in REAL.sol:\n\t- pragma solidity^0.4.11 (REAL.sol#3): it allows old versions\n\t- pragma solidity^0.4.11 (REAL.sol#609): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": "Function 'Controlled.Controlled' (REAL.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": "Parameter '_newController' of Controlled.changeController (REAL.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "    function MiniMeToken(\n\n        address _tokenFactory,\n\n        address _parentToken,\n\n        uint _parentSnapShotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) {\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n\n        name = _tokenName;                                 // Set the name\n\n        decimals = _decimalUnits;                          // Set the decimals\n\n        symbol = _tokenSymbol;                             // Set the symbol\n\n        parentToken = MiniMeToken(_parentToken);\n\n        parentSnapShotBlock = _parentSnapShotBlock;\n\n        transfersEnabled = _transfersEnabled;\n\n        creationBlock = block.number;\n",
                    "message": "Function 'MiniMeToken.MiniMeToken' (REAL.sol#144-161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenFactory,\n",
                    "message": "Parameter '_tokenFactory' of MiniMeToken.MiniMeToken (REAL.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeToken.MiniMeToken (REAL.sol#146) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _parentSnapShotBlock,\n",
                    "message": "Parameter '_parentSnapShotBlock' of MiniMeToken.MiniMeToken (REAL.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeToken.MiniMeToken (REAL.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeToken.MiniMeToken (REAL.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeToken.MiniMeToken (REAL.sol#150) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.MiniMeToken (REAL.sol#151) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_to' of MiniMeToken.transfer (REAL.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.transfer (REAL.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.transferFrom (REAL.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.transferFrom (REAL.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.transferFrom (REAL.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.doTransfer (REAL.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.doTransfer (REAL.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.doTransfer (REAL.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOf (REAL.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_spender' of MiniMeToken.approve (REAL.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.approve (REAL.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_owner' of MiniMeToken.allowance (REAL.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_spender' of MiniMeToken.allowance (REAL.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_spender' of MiniMeToken.approveAndCall (REAL.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_amount' of MiniMeToken.approveAndCall (REAL.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_extraData' of MiniMeToken.approveAndCall (REAL.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOfAt (REAL.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.balanceOfAt (REAL.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.totalSupplyAt (REAL.sol#349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenName,\n",
                    "message": "Parameter '_cloneTokenName' of MiniMeToken.createCloneToken (REAL.sol#385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _cloneDecimalUnits,\n",
                    "message": "Parameter '_cloneDecimalUnits' of MiniMeToken.createCloneToken (REAL.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenSymbol,\n",
                    "message": "Parameter '_cloneTokenSymbol' of MiniMeToken.createCloneToken (REAL.sol#387) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeToken.createCloneToken (REAL.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.createCloneToken (REAL.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.generateTokens (REAL.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.generateTokens (REAL.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.destroyTokens (REAL.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.destroyTokens (REAL.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.enableTransfers (REAL.sol#452) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": "Parameter '_block' of MiniMeToken.getValueAt (REAL.sol#464) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n",
                    "message": "Parameter '_value' of MiniMeToken.updateValueAtNow (REAL.sol#491) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": "Parameter '_addr' of MiniMeToken.isContract (REAL.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": "Parameter '_token' of MiniMeToken.claimTokens (REAL.sol#537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeTokenFactory.createCloneToken (REAL.sol#584) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeTokenFactory.createCloneToken (REAL.sol#585) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeTokenFactory.createCloneToken (REAL.sol#586) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeTokenFactory.createCloneToken (REAL.sol#587) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeTokenFactory.createCloneToken (REAL.sol#588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeTokenFactory.createCloneToken (REAL.sol#589) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": 622,
                    "vulnerability_code": "    function REAL(address _tokenFactory)\n\n            MiniMeToken(\n\n                _tokenFactory,\n\n                0x0,                         // no parent token\n\n                0,                           // no snapshot block number from parent\n\n                \"Real Estate Asset Ledger\",  // Token name\n\n                18,                          // Decimals\n\n                \"REAL\",                      // Symbol\n\n                true                         // Enable transfers\n",
                    "message": "Function 'REAL.REAL' (REAL.sol#613-622) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (max > min) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MiniMeToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ()  payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REAL(address _tokenFactory)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Checkpoint[] totalSupplyHistory;\n",
                    "message": null
                }
            ]
        }
    },
    "real_contract-master/contracts/ContributionWallet.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "           require((_to != 0) && (_to != address(this)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(getBlockNumber() >= startBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                getBlockNumber() <= endBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                finalizedBlock == 0 &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address(REAL) != 0x0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_endBlock != 0 && _endBlock <= 4000000);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_SEGV"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": "MiniMeToken.balances (ContributionWallet.sol#153) is never initialized. It is used in:\n\t- doTransfer (ContributionWallet.sol#246-284)\n\t- balanceOfAt (ContributionWallet.sol#363-384)\n\t- generateTokens (ContributionWallet.sol#456-466)\n\t- destroyTokens (ContributionWallet.sol#473-483)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": 554,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract (ContributionWallet.sol#547-554) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\n\n        // Alerts the token controller of the approve function call\n\n        if (isContract(controller)) {\n\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n\n        }\n\n\n\n        allowed[msg.sender][_spender] = _amount;\n\n        Approval(msg.sender, _spender, _amount);\n\n        return true;\n",
                    "message": "Reentrancy in MiniMeToken.approve (ContributionWallet.sol#298-315):\n\tExternal calls:\n\t- require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (ContributionWallet.sol#309)\n\tState variables written after the call(s):\n\t- allowed (ContributionWallet.sol#312)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": 587,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (ContributionWallet.sol#577-587) does not use the value returned by external calls:\n\t-token.transfer(controller,balance) (ContributionWallet.sol#585)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (ContributionWallet.sol#1261-1274) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (ContributionWallet.sol#1272)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 514,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint min = 0;\n",
                    "message": "MiniMeToken.getValueAt.min (local variable @ ContributionWallet.sol#514) shadows:\n\t- MiniMeToken.min (function @ ContributionWallet.sol#557-559)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "Reentrancy in REALCrowdsale.initialize (ContributionWallet.sol#863-900):\n\tExternal calls:\n\t- require(bool)(REAL.totalSupply() == 0) (ContributionWallet.sol#877)\n\t- require(bool)(REAL.controller() == address(this)) (ContributionWallet.sol#878)\n\t- require(bool)(REAL.decimals() == 18) (ContributionWallet.sol#879)\n\tState variables written after the call(s):\n\t- destEthTeam (ContributionWallet.sol#890)\n\t- destTokensBounties (ContributionWallet.sol#899)\n\t- destTokensReserve (ContributionWallet.sol#893)\n\t- destTokensTeam (ContributionWallet.sol#896)\n\t- endBlock (ContributionWallet.sol#887)\n\t- realController (ContributionWallet.sol#882)\n\t- startBlock (ContributionWallet.sol#886)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": 554,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract uses assembly (ContributionWallet.sol#547-554)\n\t- ContributionWallet.sol#550-553\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalSupply;\n",
                    "message": "ERC20Token.totalSupply should be constant (ContributionWallet.sol#719)\nMiniMeToken.version should be constant (ContributionWallet.sol#124)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": 31,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n\n        newOwner = _newOwner;\n",
                    "message": "Owned.changeOwner (ContributionWallet.sol#29-31) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "    function acceptOwnership() {\n\n        if (msg.sender == newOwner) {\n\n            owner = newOwner;\n\n        }\n",
                    "message": "Owned.acceptOwnership (ContributionWallet.sol#34-38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": "TokenController.onTransfer (ContributionWallet.sol#84) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": 946,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onTransfer (ContributionWallet.sol#944-946) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 93,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": "TokenController.onApprove (ContributionWallet.sol#92-93) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": 950,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onApprove (ContributionWallet.sol#948-950) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 109,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n\n        controller = _newController;\n",
                    "message": "Controlled.changeController (ContributionWallet.sol#107-109) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": "ApproveAndCallFallBack.receiveApproval (ContributionWallet.sol#113) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n        return doTransfer(msg.sender, _to, _amount);\n",
                    "message": "MiniMeToken.transfer (ContributionWallet.sol#212-215) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": 238,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n\n    ) returns (bool success) {\n\n\n\n        // The controller of this contract can move tokens around at will,\n\n        //  this is important to recognize! Confirm that you trust the\n\n        //  controller of this contract, which in most situations should be\n\n        //  another open source smart contract or 0x0\n\n        if (msg.sender != controller) {\n\n            require(transfersEnabled);\n\n\n\n            // The standard ERC 20 transferFrom functionality\n\n            if (allowed[_from][msg.sender] < _amount) return false;\n\n            allowed[_from][msg.sender] -= _amount;\n\n        }\n\n        return doTransfer(_from, _to, _amount);\n",
                    "message": "MiniMeToken.transferFrom (ContributionWallet.sol#223-238) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": 325,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n\n    ) constant returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "MiniMeToken.allowance (ContributionWallet.sol#322-325) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": 346,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n\n    ) returns (bool success) {\n\n        require(approve(_spender, _amount));\n\n\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n\n            msg.sender,\n\n            _amount,\n\n            this,\n\n            _extraData\n\n        );\n\n\n\n        return true;\n",
                    "message": "MiniMeToken.approveAndCall (ContributionWallet.sol#334-346) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": 446,
                    "vulnerability_code": "    function createCloneToken(\n\n        string _cloneTokenName,\n\n        uint8 _cloneDecimalUnits,\n\n        string _cloneTokenSymbol,\n\n        uint _snapshotBlock,\n\n        bool _transfersEnabled\n\n        ) returns(address) {\n\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n\n            this,\n\n            _snapshotBlock,\n\n            _cloneTokenName,\n\n            _cloneDecimalUnits,\n\n            _cloneTokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        cloneToken.changeController(msg.sender);\n\n\n\n        // An event to make the token easy to find on the blockchain\n\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n\n        return address(cloneToken);\n",
                    "message": "MiniMeToken.createCloneToken (ContributionWallet.sol#424-446) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": 466,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n\n        uint previousBalanceTo = balanceOf(_owner);\n\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n\n        Transfer(0, _owner, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.generateTokens (ContributionWallet.sol#456-466) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": 483,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply >= _amount);\n\n        uint previousBalanceFrom = balanceOf(_owner);\n\n        require(previousBalanceFrom >= _amount);\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n\n        Transfer(_owner, 0, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.destroyTokens (ContributionWallet.sol#473-483) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n\n        transfersEnabled = _transfersEnabled;\n",
                    "message": "MiniMeToken.enableTransfers (ContributionWallet.sol#492-494) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": 567,
                    "vulnerability_code": "    function ()  payable {\n\n        require(isContract(controller));\n\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
                    "message": "MiniMeToken.fallback (ContributionWallet.sol#564-567) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": 587,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (ContributionWallet.sol#577-587) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": 643,
                    "vulnerability_code": "    function createCloneToken(\n\n        address _parentToken,\n\n        uint _snapshotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) returns (MiniMeToken) {\n\n        MiniMeToken newToken = new MiniMeToken(\n\n            this,\n\n            _parentToken,\n\n            _snapshotBlock,\n\n            _tokenName,\n\n            _decimalUnits,\n\n            _tokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        newToken.changeController(msg.sender);\n\n        return newToken;\n",
                    "message": "MiniMeTokenFactory.createCloneToken (ContributionWallet.sol#623-643) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": "ERC20Token.balanceOf (ContributionWallet.sol#723) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transfer (ContributionWallet.sol#729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transferFrom (ContributionWallet.sol#736) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.approve (ContributionWallet.sol#742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": "ERC20Token.allowance (ContributionWallet.sol#747) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "REALCrowdsale.initialize (ContributionWallet.sol#863-900) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": 915,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n\n        require(getBlockNumber() < startBlock);\n\n        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n\n        guaranteedBuyersLimit[_th] = _limit;\n\n        reservedGuaranteed = reservedGuaranteed + _limit;\n\n        GuaranteedAddress(_th, _limit);\n",
                    "message": "REALCrowdsale.setGuaranteedAddress (ContributionWallet.sol#909-915) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": 921,
                    "vulnerability_code": "    function () public payable notPaused {\n\n        proxyPayment(msg.sender);\n",
                    "message": "REALCrowdsale.fallback (ContributionWallet.sol#919-921) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1134,
                    "vulnerability_to_line": 1207,
                    "vulnerability_code": "    function finalize() public initialized {\n\n        require(getBlockNumber() >= startBlock);\n\n        require(msg.sender == owner || getBlockNumber() > endBlock);\n\n        require(finalizedBlock == 0);\n\n\n\n        // Allow premature finalization if final limit is reached\n\n        if (getBlockNumber() <= endBlock) {\n\n            require(totalNormalCollected >= fundingLimit);\n\n        }\n\n\n\n        finalizedBlock = getBlockNumber();\n\n        finalizedTime = now;\n\n\n\n        uint256 percentageToTeam = percent(20);\n\n\n\n        uint256 percentageToContributors = percent(51);\n\n\n\n        uint256 percentageToReserve = percent(15);\n\n\n\n        uint256 percentageToBounties = percent(14);\n\n\n\n\n\n        // REAL.totalSupply() -> Tokens minted during the contribution\n\n        //  totalTokens  -> Total tokens that should be after the allocation\n\n        //                   of devTokens and reserve\n\n        //  percentageToContributors -> Which percentage should go to the\n\n        //                               contribution participants\n\n        //                               (x per 10**18 format)\n\n        //  percent(100) -> 100% in (x per 10**18 format)\n\n        //\n\n        //                       percentageToContributors\n\n        //  REAL.totalSupply() = -------------------------- * totalTokens  =>\n\n        //                             percent(100)\n\n        //\n\n        //\n\n        //                            percent(100)\n\n        //  =>  totalTokens = ---------------------------- * REAL.totalSupply()\n\n        //                      percentageToContributors\n\n        //\n\n        uint256 totalTokens = REAL.totalSupply().mul(percent(100)).div(percentageToContributors);\n\n\n\n\n\n        //\n\n        //                    percentageToBounties\n\n        //  bountiesTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensBounties,\n\n            totalTokens.mul(percentageToBounties).div(percent(100))));\n\n\n\n        //\n\n        //                    percentageToReserve\n\n        //  reserveTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensReserve,\n\n            totalTokens.mul(percentageToReserve).div(percent(100))));\n\n\n\n\n\n        //\n\n        //                   percentageToTeam\n\n        //  teamTokens = ----------------------- * totalTokens\n\n        //                   percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensTeam,\n\n            totalTokens.mul(percentageToTeam).div(percent(100))));\n\n\n\n        REAL.changeController(realController);\n\n\n\n        Finalized();\n",
                    "message": "REALCrowdsale.finalize (ContributionWallet.sol#1134-1207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": 1235,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n\n        return REAL.totalSupply();\n",
                    "message": "REALCrowdsale.tokensIssued (ContributionWallet.sol#1233-1235) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (ContributionWallet.sol#1261-1274) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": 1280,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n\n        paused = true;\n",
                    "message": "REALCrowdsale.pauseContribution (ContributionWallet.sol#1278-1280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": 1285,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n\n        paused = false;\n",
                    "message": "REALCrowdsale.resumeContribution (ContributionWallet.sol#1283-1285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function () public payable {}\n",
                    "message": "ContributionWallet.fallback (ContributionWallet.sol#1344) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1347,
                    "vulnerability_to_line": 1352,
                    "vulnerability_code": "    function withdraw() public {\n\n        require(msg.sender == multisig);              // Only the multisig can request it\n\n        require(block.number > endBlock ||            // Allow after end block\n\n        contribution.finalizedBlock() != 0);          // Allow when sale is finalized\n\n        multisig.transfer(this.balance);\n",
                    "message": "ContributionWallet.withdraw (ContributionWallet.sol#1347-1352) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in ContributionWallet.sol:\n\t- pragma solidity^0.4.11 (ContributionWallet.sol#3): it allows old versions\n\t- pragma solidity^0.4.11 (ContributionWallet.sol#43): it allows old versions\n\t- pragma solidity^0.4.11 (ContributionWallet.sol#648): it allows old versions\n\t- pragma solidity^0.4.11 (ContributionWallet.sol#706): it allows old versions\n\t- pragma solidity^0.4.11 (ContributionWallet.sol#755): it allows old versions\n\t- pragma solidity^0.4.11 (ContributionWallet.sol#1297): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 22,
                    "vulnerability_code": "    function Owned() {\n\n        owner = msg.sender;\n",
                    "message": "Function 'Owned.Owned' (ContributionWallet.sol#20-22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Owned.changeOwner (ContributionWallet.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": "Function 'Controlled.Controlled' (ContributionWallet.sol#103) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": "Parameter '_newController' of Controlled.changeController (ContributionWallet.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": 201,
                    "vulnerability_code": "    function MiniMeToken(\n\n        address _tokenFactory,\n\n        address _parentToken,\n\n        uint _parentSnapShotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) {\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n\n        name = _tokenName;                                 // Set the name\n\n        decimals = _decimalUnits;                          // Set the decimals\n\n        symbol = _tokenSymbol;                             // Set the symbol\n\n        parentToken = MiniMeToken(_parentToken);\n\n        parentSnapShotBlock = _parentSnapShotBlock;\n\n        transfersEnabled = _transfersEnabled;\n\n        creationBlock = block.number;\n",
                    "message": "Function 'MiniMeToken.MiniMeToken' (ContributionWallet.sol#184-201) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenFactory,\n",
                    "message": "Parameter '_tokenFactory' of MiniMeToken.MiniMeToken (ContributionWallet.sol#185) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeToken.MiniMeToken (ContributionWallet.sol#186) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _parentSnapShotBlock,\n",
                    "message": "Parameter '_parentSnapShotBlock' of MiniMeToken.MiniMeToken (ContributionWallet.sol#187) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeToken.MiniMeToken (ContributionWallet.sol#188) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeToken.MiniMeToken (ContributionWallet.sol#189) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeToken.MiniMeToken (ContributionWallet.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.MiniMeToken (ContributionWallet.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_to' of MiniMeToken.transfer (ContributionWallet.sol#212) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.transfer (ContributionWallet.sol#212) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.transferFrom (ContributionWallet.sol#223) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.transferFrom (ContributionWallet.sol#223) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.transferFrom (ContributionWallet.sol#223) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.doTransfer (ContributionWallet.sol#246) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.doTransfer (ContributionWallet.sol#246) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.doTransfer (ContributionWallet.sol#246) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOf (ContributionWallet.sol#288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_spender' of MiniMeToken.approve (ContributionWallet.sol#298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.approve (ContributionWallet.sol#298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_owner' of MiniMeToken.allowance (ContributionWallet.sol#322) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_spender' of MiniMeToken.allowance (ContributionWallet.sol#322) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_spender' of MiniMeToken.approveAndCall (ContributionWallet.sol#334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_amount' of MiniMeToken.approveAndCall (ContributionWallet.sol#334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_extraData' of MiniMeToken.approveAndCall (ContributionWallet.sol#334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOfAt (ContributionWallet.sol#363) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.balanceOfAt (ContributionWallet.sol#363) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.totalSupplyAt (ContributionWallet.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenName,\n",
                    "message": "Parameter '_cloneTokenName' of MiniMeToken.createCloneToken (ContributionWallet.sol#425) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _cloneDecimalUnits,\n",
                    "message": "Parameter '_cloneDecimalUnits' of MiniMeToken.createCloneToken (ContributionWallet.sol#426) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenSymbol,\n",
                    "message": "Parameter '_cloneTokenSymbol' of MiniMeToken.createCloneToken (ContributionWallet.sol#427) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeToken.createCloneToken (ContributionWallet.sol#428) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.createCloneToken (ContributionWallet.sol#429) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.generateTokens (ContributionWallet.sol#456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.generateTokens (ContributionWallet.sol#456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.destroyTokens (ContributionWallet.sol#473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.destroyTokens (ContributionWallet.sol#473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.enableTransfers (ContributionWallet.sol#492) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": "Parameter '_block' of MiniMeToken.getValueAt (ContributionWallet.sol#504) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n",
                    "message": "Parameter '_value' of MiniMeToken.updateValueAtNow (ContributionWallet.sol#531) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": "Parameter '_addr' of MiniMeToken.isContract (ContributionWallet.sol#547) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": "Parameter '_token' of MiniMeToken.claimTokens (ContributionWallet.sol#577) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeTokenFactory.createCloneToken (ContributionWallet.sol#624) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeTokenFactory.createCloneToken (ContributionWallet.sol#625) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 626,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeTokenFactory.createCloneToken (ContributionWallet.sol#626) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 627,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeTokenFactory.createCloneToken (ContributionWallet.sol#627) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 628,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeTokenFactory.createCloneToken (ContributionWallet.sol#628) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 629,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeTokenFactory.createCloneToken (ContributionWallet.sol#629) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 932,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _th) public payable notPaused initialized contributionOpen returns (bool) {\n",
                    "message": "Parameter '_th' of REALCrowdsale.proxyPayment (ContributionWallet.sol#932) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onTransfer (ContributionWallet.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onTransfer (ContributionWallet.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onTransfer (ContributionWallet.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onApprove (ContributionWallet.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onApprove (ContributionWallet.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onApprove (ContributionWallet.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": 851,
                    "vulnerability_code": "    function REALCrowdsale() {\n\n        paused = false;\n",
                    "message": "Function 'REALCrowdsale.REALCrowdsale' (ContributionWallet.sol#849-851) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _real,\n",
                    "message": "Parameter '_real' of REALCrowdsale.initialize (ContributionWallet.sol#864) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 865,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _realController,\n",
                    "message": "Parameter '_realController' of REALCrowdsale.initialize (ContributionWallet.sol#865) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _startBlock,\n",
                    "message": "Parameter '_startBlock' of REALCrowdsale.initialize (ContributionWallet.sol#866) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endBlock,\n",
                    "message": "Parameter '_endBlock' of REALCrowdsale.initialize (ContributionWallet.sol#867) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destEthTeam,\n",
                    "message": "Parameter '_destEthTeam' of REALCrowdsale.initialize (ContributionWallet.sol#868) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensReserve,\n",
                    "message": "Parameter '_destTokensReserve' of REALCrowdsale.initialize (ContributionWallet.sol#869) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensTeam,\n",
                    "message": "Parameter '_destTokensTeam' of REALCrowdsale.initialize (ContributionWallet.sol#870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensBounties\n",
                    "message": "Parameter '_destTokensBounties' of REALCrowdsale.initialize (ContributionWallet.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_th' of REALCrowdsale.setGuaranteedAddress (ContributionWallet.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_limit' of REALCrowdsale.setGuaranteedAddress (ContributionWallet.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyNormal(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyNormal (ContributionWallet.sol#952) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyGuaranteed(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyGuaranteed (ContributionWallet.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.doBuy (ContributionWallet.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_toFund' of REALCrowdsale.doBuy (ContributionWallet.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_guaranteed' of REALCrowdsale.doBuy (ContributionWallet.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": "Parameter '_sender' of REALCrowdsale.isContract (ContributionWallet.sol#1216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of REALCrowdsale.claimTokens (ContributionWallet.sol#1261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public fundingLimit = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.fundingLimit' (ContributionWallet.sol#789) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 790,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public failSafeLimit = 200000 ether;\n",
                    "message": "Constant 'REALCrowdsale.failSafeLimit' (ContributionWallet.sol#790) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 791,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGuaranteedLimit = 30000 ether;\n",
                    "message": "Constant 'REALCrowdsale.maxGuaranteedLimit' (ContributionWallet.sol#791) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public exchangeRate = 220;\n",
                    "message": "Constant 'REALCrowdsale.exchangeRate' (ContributionWallet.sol#792) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGasPrice = 50000000000;\n",
                    "message": "Constant 'REALCrowdsale.maxGasPrice' (ContributionWallet.sol#793) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 794,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxCallFrequency = 100;\n",
                    "message": "Constant 'REALCrowdsale.maxCallFrequency' (ContributionWallet.sol#794) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1cap = 25000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus1cap' (ContributionWallet.sol#796) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1 = 25;\n",
                    "message": "Constant 'REALCrowdsale.bonus1' (ContributionWallet.sol#797) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2cap = 50000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus2cap' (ContributionWallet.sol#798) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 799,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2 = 20;\n",
                    "message": "Constant 'REALCrowdsale.bonus2' (ContributionWallet.sol#799) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 800,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3cap = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus3cap' (ContributionWallet.sol#800) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3 = 15;\n",
                    "message": "Constant 'REALCrowdsale.bonus3' (ContributionWallet.sol#801) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4cap = 150000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus4cap' (ContributionWallet.sol#802) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 803,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4 = 5;\n",
                    "message": "Constant 'REALCrowdsale.bonus4' (ContributionWallet.sol#803) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 805,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MiniMeToken public REAL;\n",
                    "message": "Variable 'REALCrowdsale.REAL' (ContributionWallet.sol#805) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1334,
                    "vulnerability_to_line": 1341,
                    "vulnerability_code": "    function ContributionWallet(address _multisig, uint256 _endBlock, address _contribution) {\n\n        require(_multisig != 0x0);\n\n        require(_contribution != 0x0);\n\n        require(_endBlock != 0 && _endBlock <= 4000000);\n\n        multisig = _multisig;\n\n        endBlock = _endBlock;\n\n        contribution = REALCrowdsale(_contribution);\n",
                    "message": "Function 'ContributionWallet.ContributionWallet' (ContributionWallet.sol#1334-1341) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ContributionWallet(address _multisig, uint256 _endBlock, address _contribution) {\n",
                    "message": "Parameter '_multisig' of ContributionWallet.ContributionWallet (ContributionWallet.sol#1334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ContributionWallet(address _multisig, uint256 _endBlock, address _contribution) {\n",
                    "message": "Parameter '_endBlock' of ContributionWallet.ContributionWallet (ContributionWallet.sol#1334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ContributionWallet(address _multisig, uint256 _endBlock, address _contribution) {\n",
                    "message": "Parameter '_contribution' of ContributionWallet.ContributionWallet (ContributionWallet.sol#1334) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalCollected() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBlockNumber() internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (max > min) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function initialize(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 1217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return tx.origin != _sender;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function () public payable notPaused {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function () public payable {}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Owned() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function acceptOwnership() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MiniMeToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ()  payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALCrowdsale() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ContributionWallet(address _multisig, uint256 _endBlock, address _contribution) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Checkpoint[] totalSupplyHistory;\n",
                    "message": null
                }
            ]
        }
    },
    "real_contract-master/contracts/DevTokensHolder.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "           require((_to != 0) && (_to != address(this)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(getBlockNumber() >= startBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                getBlockNumber() <= endBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                finalizedBlock == 0 &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address(REAL) != 0x0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(finalizedTime > 0 && getTime() > finalizedTime.add(months(6)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": "MiniMeToken.balances (DevTokensHolder.sol#113) is never initialized. It is used in:\n\t- doTransfer (DevTokensHolder.sol#206-244)\n\t- balanceOfAt (DevTokensHolder.sol#323-344)\n\t- generateTokens (DevTokensHolder.sol#416-426)\n\t- destroyTokens (DevTokensHolder.sol#433-443)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract (DevTokensHolder.sol#507-514) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\n\n        // Alerts the token controller of the approve function call\n\n        if (isContract(controller)) {\n\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n\n        }\n\n\n\n        allowed[msg.sender][_spender] = _amount;\n\n        Approval(msg.sender, _spender, _amount);\n\n        return true;\n",
                    "message": "Reentrancy in MiniMeToken.approve (DevTokensHolder.sol#258-275):\n\tExternal calls:\n\t- require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (DevTokensHolder.sol#269)\n\tState variables written after the call(s):\n\t- allowed (DevTokensHolder.sol#272)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1357,
                    "vulnerability_to_line": 1377,
                    "vulnerability_code": "    function collectTokens() public onlyOwner {\n\n        uint256 balance = real.balanceOf(address(this));\n\n        uint256 total = collectedTokens.add(balance);\n\n\n\n        uint256 finalizedTime = contribution.finalizedTime();\n\n\n\n        require(finalizedTime > 0 && getTime() > finalizedTime.add(months(6)));\n\n\n\n        uint256 canExtract = total.mul(getTime().sub(finalizedTime)).div(months(24));\n\n\n\n        canExtract = canExtract.sub(collectedTokens);\n\n\n\n        if (canExtract > balance) {\n\n            canExtract = balance;\n\n        }\n\n\n\n        collectedTokens = collectedTokens.add(canExtract);\n\n        assert(real.transfer(owner, canExtract));\n\n\n\n        TokensWithdrawn(owner, canExtract);\n",
                    "message": "Reentrancy in DevTokensHolder.collectTokens (DevTokensHolder.sol#1357-1377):\n\tExternal calls:\n\t- balance = real.balanceOf(address(this)) (DevTokensHolder.sol#1358)\n\t- finalizedTime = contribution.finalizedTime() (DevTokensHolder.sol#1361)\n\tState variables written after the call(s):\n\t- collectedTokens (DevTokensHolder.sol#1373)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (DevTokensHolder.sol#537-547) does not use the value returned by external calls:\n\t-token.transfer(controller,balance) (DevTokensHolder.sol#545)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (DevTokensHolder.sol#1261-1274) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (DevTokensHolder.sol#1272)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1396,
                    "vulnerability_to_line": 1407,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        require(_token != address(real));\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "DevTokensHolder.claimTokens (DevTokensHolder.sol#1396-1407) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (DevTokensHolder.sol#1405)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint min = 0;\n",
                    "message": "MiniMeToken.getValueAt.min (local variable @ DevTokensHolder.sol#474) shadows:\n\t- MiniMeToken.min (function @ DevTokensHolder.sol#517-519)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "Reentrancy in REALCrowdsale.initialize (DevTokensHolder.sol#863-900):\n\tExternal calls:\n\t- require(bool)(REAL.totalSupply() == 0) (DevTokensHolder.sol#877)\n\t- require(bool)(REAL.controller() == address(this)) (DevTokensHolder.sol#878)\n\t- require(bool)(REAL.decimals() == 18) (DevTokensHolder.sol#879)\n\tState variables written after the call(s):\n\t- destEthTeam (DevTokensHolder.sol#890)\n\t- destTokensBounties (DevTokensHolder.sol#899)\n\t- destTokensReserve (DevTokensHolder.sol#893)\n\t- destTokensTeam (DevTokensHolder.sol#896)\n\t- endBlock (DevTokensHolder.sol#887)\n\t- realController (DevTokensHolder.sol#882)\n\t- startBlock (DevTokensHolder.sol#886)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract uses assembly (DevTokensHolder.sol#507-514)\n\t- DevTokensHolder.sol#510-513\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalSupply;\n",
                    "message": "ERC20Token.totalSupply should be constant (DevTokensHolder.sol#719)\nMiniMeToken.version should be constant (DevTokensHolder.sol#84)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": "TokenController.onTransfer (DevTokensHolder.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": 946,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onTransfer (DevTokensHolder.sol#944-946) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": "TokenController.onApprove (DevTokensHolder.sol#52-53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": 950,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onApprove (DevTokensHolder.sol#948-950) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 69,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n\n        controller = _newController;\n",
                    "message": "Controlled.changeController (DevTokensHolder.sol#67-69) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": "ApproveAndCallFallBack.receiveApproval (DevTokensHolder.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n        return doTransfer(msg.sender, _to, _amount);\n",
                    "message": "MiniMeToken.transfer (DevTokensHolder.sol#172-175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n\n    ) returns (bool success) {\n\n\n\n        // The controller of this contract can move tokens around at will,\n\n        //  this is important to recognize! Confirm that you trust the\n\n        //  controller of this contract, which in most situations should be\n\n        //  another open source smart contract or 0x0\n\n        if (msg.sender != controller) {\n\n            require(transfersEnabled);\n\n\n\n            // The standard ERC 20 transferFrom functionality\n\n            if (allowed[_from][msg.sender] < _amount) return false;\n\n            allowed[_from][msg.sender] -= _amount;\n\n        }\n\n        return doTransfer(_from, _to, _amount);\n",
                    "message": "MiniMeToken.transferFrom (DevTokensHolder.sol#183-198) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n\n    ) constant returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "MiniMeToken.allowance (DevTokensHolder.sol#282-285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n\n    ) returns (bool success) {\n\n        require(approve(_spender, _amount));\n\n\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n\n            msg.sender,\n\n            _amount,\n\n            this,\n\n            _extraData\n\n        );\n\n\n\n        return true;\n",
                    "message": "MiniMeToken.approveAndCall (DevTokensHolder.sol#294-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "    function createCloneToken(\n\n        string _cloneTokenName,\n\n        uint8 _cloneDecimalUnits,\n\n        string _cloneTokenSymbol,\n\n        uint _snapshotBlock,\n\n        bool _transfersEnabled\n\n        ) returns(address) {\n\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n\n            this,\n\n            _snapshotBlock,\n\n            _cloneTokenName,\n\n            _cloneDecimalUnits,\n\n            _cloneTokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        cloneToken.changeController(msg.sender);\n\n\n\n        // An event to make the token easy to find on the blockchain\n\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n\n        return address(cloneToken);\n",
                    "message": "MiniMeToken.createCloneToken (DevTokensHolder.sol#384-406) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 426,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n\n        uint previousBalanceTo = balanceOf(_owner);\n\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n\n        Transfer(0, _owner, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.generateTokens (DevTokensHolder.sol#416-426) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": 443,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply >= _amount);\n\n        uint previousBalanceFrom = balanceOf(_owner);\n\n        require(previousBalanceFrom >= _amount);\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n\n        Transfer(_owner, 0, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.destroyTokens (DevTokensHolder.sol#433-443) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 454,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n\n        transfersEnabled = _transfersEnabled;\n",
                    "message": "MiniMeToken.enableTransfers (DevTokensHolder.sol#452-454) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "    function ()  payable {\n\n        require(isContract(controller));\n\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
                    "message": "MiniMeToken.fallback (DevTokensHolder.sol#524-527) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (DevTokensHolder.sol#537-547) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function createCloneToken(\n\n        address _parentToken,\n\n        uint _snapshotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) returns (MiniMeToken) {\n\n        MiniMeToken newToken = new MiniMeToken(\n\n            this,\n\n            _parentToken,\n\n            _snapshotBlock,\n\n            _tokenName,\n\n            _decimalUnits,\n\n            _tokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        newToken.changeController(msg.sender);\n\n        return newToken;\n",
                    "message": "MiniMeTokenFactory.createCloneToken (DevTokensHolder.sol#583-603) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": 636,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n\n        newOwner = _newOwner;\n",
                    "message": "Owned.changeOwner (DevTokensHolder.sol#634-636) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": 643,
                    "vulnerability_code": "    function acceptOwnership() {\n\n        if (msg.sender == newOwner) {\n\n            owner = newOwner;\n\n        }\n",
                    "message": "Owned.acceptOwnership (DevTokensHolder.sol#639-643) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": "ERC20Token.balanceOf (DevTokensHolder.sol#723) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transfer (DevTokensHolder.sol#729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transferFrom (DevTokensHolder.sol#736) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.approve (DevTokensHolder.sol#742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": "ERC20Token.allowance (DevTokensHolder.sol#747) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "REALCrowdsale.initialize (DevTokensHolder.sol#863-900) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": 915,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n\n        require(getBlockNumber() < startBlock);\n\n        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n\n        guaranteedBuyersLimit[_th] = _limit;\n\n        reservedGuaranteed = reservedGuaranteed + _limit;\n\n        GuaranteedAddress(_th, _limit);\n",
                    "message": "REALCrowdsale.setGuaranteedAddress (DevTokensHolder.sol#909-915) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": 921,
                    "vulnerability_code": "    function () public payable notPaused {\n\n        proxyPayment(msg.sender);\n",
                    "message": "REALCrowdsale.fallback (DevTokensHolder.sol#919-921) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1134,
                    "vulnerability_to_line": 1207,
                    "vulnerability_code": "    function finalize() public initialized {\n\n        require(getBlockNumber() >= startBlock);\n\n        require(msg.sender == owner || getBlockNumber() > endBlock);\n\n        require(finalizedBlock == 0);\n\n\n\n        // Allow premature finalization if final limit is reached\n\n        if (getBlockNumber() <= endBlock) {\n\n            require(totalNormalCollected >= fundingLimit);\n\n        }\n\n\n\n        finalizedBlock = getBlockNumber();\n\n        finalizedTime = now;\n\n\n\n        uint256 percentageToTeam = percent(20);\n\n\n\n        uint256 percentageToContributors = percent(51);\n\n\n\n        uint256 percentageToReserve = percent(15);\n\n\n\n        uint256 percentageToBounties = percent(14);\n\n\n\n\n\n        // REAL.totalSupply() -> Tokens minted during the contribution\n\n        //  totalTokens  -> Total tokens that should be after the allocation\n\n        //                   of devTokens and reserve\n\n        //  percentageToContributors -> Which percentage should go to the\n\n        //                               contribution participants\n\n        //                               (x per 10**18 format)\n\n        //  percent(100) -> 100% in (x per 10**18 format)\n\n        //\n\n        //                       percentageToContributors\n\n        //  REAL.totalSupply() = -------------------------- * totalTokens  =>\n\n        //                             percent(100)\n\n        //\n\n        //\n\n        //                            percent(100)\n\n        //  =>  totalTokens = ---------------------------- * REAL.totalSupply()\n\n        //                      percentageToContributors\n\n        //\n\n        uint256 totalTokens = REAL.totalSupply().mul(percent(100)).div(percentageToContributors);\n\n\n\n\n\n        //\n\n        //                    percentageToBounties\n\n        //  bountiesTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensBounties,\n\n            totalTokens.mul(percentageToBounties).div(percent(100))));\n\n\n\n        //\n\n        //                    percentageToReserve\n\n        //  reserveTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensReserve,\n\n            totalTokens.mul(percentageToReserve).div(percent(100))));\n\n\n\n\n\n        //\n\n        //                   percentageToTeam\n\n        //  teamTokens = ----------------------- * totalTokens\n\n        //                   percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensTeam,\n\n            totalTokens.mul(percentageToTeam).div(percent(100))));\n\n\n\n        REAL.changeController(realController);\n\n\n\n        Finalized();\n",
                    "message": "REALCrowdsale.finalize (DevTokensHolder.sol#1134-1207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": 1235,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n\n        return REAL.totalSupply();\n",
                    "message": "REALCrowdsale.tokensIssued (DevTokensHolder.sol#1233-1235) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (DevTokensHolder.sol#1261-1274) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": 1280,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n\n        paused = true;\n",
                    "message": "REALCrowdsale.pauseContribution (DevTokensHolder.sol#1278-1280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": 1285,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n\n        paused = false;\n",
                    "message": "REALCrowdsale.resumeContribution (DevTokensHolder.sol#1283-1285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1357,
                    "vulnerability_to_line": 1377,
                    "vulnerability_code": "    function collectTokens() public onlyOwner {\n\n        uint256 balance = real.balanceOf(address(this));\n\n        uint256 total = collectedTokens.add(balance);\n\n\n\n        uint256 finalizedTime = contribution.finalizedTime();\n\n\n\n        require(finalizedTime > 0 && getTime() > finalizedTime.add(months(6)));\n\n\n\n        uint256 canExtract = total.mul(getTime().sub(finalizedTime)).div(months(24));\n\n\n\n        canExtract = canExtract.sub(collectedTokens);\n\n\n\n        if (canExtract > balance) {\n\n            canExtract = balance;\n\n        }\n\n\n\n        collectedTokens = collectedTokens.add(canExtract);\n\n        assert(real.transfer(owner, canExtract));\n\n\n\n        TokensWithdrawn(owner, canExtract);\n",
                    "message": "DevTokensHolder.collectTokens (DevTokensHolder.sol#1357-1377) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1396,
                    "vulnerability_to_line": 1407,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        require(_token != address(real));\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "DevTokensHolder.claimTokens (DevTokensHolder.sol#1396-1407) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in DevTokensHolder.sol:\n\t- pragma solidity^0.4.11 (DevTokensHolder.sol#3): it allows old versions\n\t- pragma solidity^0.4.11 (DevTokensHolder.sol#608): it allows old versions\n\t- pragma solidity^0.4.11 (DevTokensHolder.sol#648): it allows old versions\n\t- pragma solidity^0.4.11 (DevTokensHolder.sol#706): it allows old versions\n\t- pragma solidity^0.4.11 (DevTokensHolder.sol#755): it allows old versions\n\t- pragma solidity^0.4.11 (DevTokensHolder.sol#1297): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": "Function 'Controlled.Controlled' (DevTokensHolder.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": "Parameter '_newController' of Controlled.changeController (DevTokensHolder.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "    function MiniMeToken(\n\n        address _tokenFactory,\n\n        address _parentToken,\n\n        uint _parentSnapShotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) {\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n\n        name = _tokenName;                                 // Set the name\n\n        decimals = _decimalUnits;                          // Set the decimals\n\n        symbol = _tokenSymbol;                             // Set the symbol\n\n        parentToken = MiniMeToken(_parentToken);\n\n        parentSnapShotBlock = _parentSnapShotBlock;\n\n        transfersEnabled = _transfersEnabled;\n\n        creationBlock = block.number;\n",
                    "message": "Function 'MiniMeToken.MiniMeToken' (DevTokensHolder.sol#144-161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenFactory,\n",
                    "message": "Parameter '_tokenFactory' of MiniMeToken.MiniMeToken (DevTokensHolder.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeToken.MiniMeToken (DevTokensHolder.sol#146) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _parentSnapShotBlock,\n",
                    "message": "Parameter '_parentSnapShotBlock' of MiniMeToken.MiniMeToken (DevTokensHolder.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeToken.MiniMeToken (DevTokensHolder.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeToken.MiniMeToken (DevTokensHolder.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeToken.MiniMeToken (DevTokensHolder.sol#150) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.MiniMeToken (DevTokensHolder.sol#151) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_to' of MiniMeToken.transfer (DevTokensHolder.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.transfer (DevTokensHolder.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.transferFrom (DevTokensHolder.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.transferFrom (DevTokensHolder.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.transferFrom (DevTokensHolder.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.doTransfer (DevTokensHolder.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.doTransfer (DevTokensHolder.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.doTransfer (DevTokensHolder.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOf (DevTokensHolder.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_spender' of MiniMeToken.approve (DevTokensHolder.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.approve (DevTokensHolder.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_owner' of MiniMeToken.allowance (DevTokensHolder.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_spender' of MiniMeToken.allowance (DevTokensHolder.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_spender' of MiniMeToken.approveAndCall (DevTokensHolder.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_amount' of MiniMeToken.approveAndCall (DevTokensHolder.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_extraData' of MiniMeToken.approveAndCall (DevTokensHolder.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOfAt (DevTokensHolder.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.balanceOfAt (DevTokensHolder.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.totalSupplyAt (DevTokensHolder.sol#349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenName,\n",
                    "message": "Parameter '_cloneTokenName' of MiniMeToken.createCloneToken (DevTokensHolder.sol#385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _cloneDecimalUnits,\n",
                    "message": "Parameter '_cloneDecimalUnits' of MiniMeToken.createCloneToken (DevTokensHolder.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenSymbol,\n",
                    "message": "Parameter '_cloneTokenSymbol' of MiniMeToken.createCloneToken (DevTokensHolder.sol#387) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeToken.createCloneToken (DevTokensHolder.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.createCloneToken (DevTokensHolder.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.generateTokens (DevTokensHolder.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.generateTokens (DevTokensHolder.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.destroyTokens (DevTokensHolder.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.destroyTokens (DevTokensHolder.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.enableTransfers (DevTokensHolder.sol#452) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": "Parameter '_block' of MiniMeToken.getValueAt (DevTokensHolder.sol#464) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n",
                    "message": "Parameter '_value' of MiniMeToken.updateValueAtNow (DevTokensHolder.sol#491) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": "Parameter '_addr' of MiniMeToken.isContract (DevTokensHolder.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": "Parameter '_token' of MiniMeToken.claimTokens (DevTokensHolder.sol#537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeTokenFactory.createCloneToken (DevTokensHolder.sol#584) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeTokenFactory.createCloneToken (DevTokensHolder.sol#585) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeTokenFactory.createCloneToken (DevTokensHolder.sol#586) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeTokenFactory.createCloneToken (DevTokensHolder.sol#587) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeTokenFactory.createCloneToken (DevTokensHolder.sol#588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeTokenFactory.createCloneToken (DevTokensHolder.sol#589) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": 627,
                    "vulnerability_code": "    function Owned() {\n\n        owner = msg.sender;\n",
                    "message": "Function 'Owned.Owned' (DevTokensHolder.sol#625-627) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Owned.changeOwner (DevTokensHolder.sol#634) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 932,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _th) public payable notPaused initialized contributionOpen returns (bool) {\n",
                    "message": "Parameter '_th' of REALCrowdsale.proxyPayment (DevTokensHolder.sol#932) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onTransfer (DevTokensHolder.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onTransfer (DevTokensHolder.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onTransfer (DevTokensHolder.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onApprove (DevTokensHolder.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onApprove (DevTokensHolder.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onApprove (DevTokensHolder.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": 851,
                    "vulnerability_code": "    function REALCrowdsale() {\n\n        paused = false;\n",
                    "message": "Function 'REALCrowdsale.REALCrowdsale' (DevTokensHolder.sol#849-851) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _real,\n",
                    "message": "Parameter '_real' of REALCrowdsale.initialize (DevTokensHolder.sol#864) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 865,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _realController,\n",
                    "message": "Parameter '_realController' of REALCrowdsale.initialize (DevTokensHolder.sol#865) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _startBlock,\n",
                    "message": "Parameter '_startBlock' of REALCrowdsale.initialize (DevTokensHolder.sol#866) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endBlock,\n",
                    "message": "Parameter '_endBlock' of REALCrowdsale.initialize (DevTokensHolder.sol#867) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destEthTeam,\n",
                    "message": "Parameter '_destEthTeam' of REALCrowdsale.initialize (DevTokensHolder.sol#868) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensReserve,\n",
                    "message": "Parameter '_destTokensReserve' of REALCrowdsale.initialize (DevTokensHolder.sol#869) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensTeam,\n",
                    "message": "Parameter '_destTokensTeam' of REALCrowdsale.initialize (DevTokensHolder.sol#870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensBounties\n",
                    "message": "Parameter '_destTokensBounties' of REALCrowdsale.initialize (DevTokensHolder.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_th' of REALCrowdsale.setGuaranteedAddress (DevTokensHolder.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_limit' of REALCrowdsale.setGuaranteedAddress (DevTokensHolder.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyNormal(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyNormal (DevTokensHolder.sol#952) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyGuaranteed(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyGuaranteed (DevTokensHolder.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.doBuy (DevTokensHolder.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_toFund' of REALCrowdsale.doBuy (DevTokensHolder.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_guaranteed' of REALCrowdsale.doBuy (DevTokensHolder.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": "Parameter '_sender' of REALCrowdsale.isContract (DevTokensHolder.sol#1216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of REALCrowdsale.claimTokens (DevTokensHolder.sol#1261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public fundingLimit = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.fundingLimit' (DevTokensHolder.sol#789) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 790,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public failSafeLimit = 200000 ether;\n",
                    "message": "Constant 'REALCrowdsale.failSafeLimit' (DevTokensHolder.sol#790) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 791,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGuaranteedLimit = 30000 ether;\n",
                    "message": "Constant 'REALCrowdsale.maxGuaranteedLimit' (DevTokensHolder.sol#791) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public exchangeRate = 220;\n",
                    "message": "Constant 'REALCrowdsale.exchangeRate' (DevTokensHolder.sol#792) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGasPrice = 50000000000;\n",
                    "message": "Constant 'REALCrowdsale.maxGasPrice' (DevTokensHolder.sol#793) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 794,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxCallFrequency = 100;\n",
                    "message": "Constant 'REALCrowdsale.maxCallFrequency' (DevTokensHolder.sol#794) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1cap = 25000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus1cap' (DevTokensHolder.sol#796) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1 = 25;\n",
                    "message": "Constant 'REALCrowdsale.bonus1' (DevTokensHolder.sol#797) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2cap = 50000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus2cap' (DevTokensHolder.sol#798) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 799,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2 = 20;\n",
                    "message": "Constant 'REALCrowdsale.bonus2' (DevTokensHolder.sol#799) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 800,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3cap = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus3cap' (DevTokensHolder.sol#800) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3 = 15;\n",
                    "message": "Constant 'REALCrowdsale.bonus3' (DevTokensHolder.sol#801) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4cap = 150000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus4cap' (DevTokensHolder.sol#802) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 803,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4 = 5;\n",
                    "message": "Constant 'REALCrowdsale.bonus4' (DevTokensHolder.sol#803) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 805,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MiniMeToken public REAL;\n",
                    "message": "Variable 'REALCrowdsale.REAL' (DevTokensHolder.sol#805) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": 1354,
                    "vulnerability_code": "    function DevTokensHolder(address _owner, address _contribution, address _real) {\n\n        owner = _owner;\n\n        contribution = REALCrowdsale(_contribution);\n\n        real = MiniMeToken(_real);\n",
                    "message": "Function 'DevTokensHolder.DevTokensHolder' (DevTokensHolder.sol#1350-1354) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function DevTokensHolder(address _owner, address _contribution, address _real) {\n",
                    "message": "Parameter '_owner' of DevTokensHolder.DevTokensHolder (DevTokensHolder.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function DevTokensHolder(address _owner, address _contribution, address _real) {\n",
                    "message": "Parameter '_contribution' of DevTokensHolder.DevTokensHolder (DevTokensHolder.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function DevTokensHolder(address _owner, address _contribution, address _real) {\n",
                    "message": "Parameter '_real' of DevTokensHolder.DevTokensHolder (DevTokensHolder.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of DevTokensHolder.claimTokens (DevTokensHolder.sol#1396) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalCollected() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBlockNumber() internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (max > min) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function initialize(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 1217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return tx.origin != _sender;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function () public payable notPaused {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MiniMeToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ()  payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Owned() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function acceptOwnership() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALCrowdsale() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function DevTokensHolder(address _owner, address _contribution, address _real) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Checkpoint[] totalSupplyHistory;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 collectedTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    REALCrowdsale contribution;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MiniMeToken real;\n",
                    "message": null
                }
            ]
        }
    },
    "real_contract-master/contracts/mocks/REALPlaceHolderMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "           require((_to != 0) && (_to != address(this)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(getBlockNumber() >= startBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                getBlockNumber() <= endBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                finalizedBlock == 0 &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address(REAL) != 0x0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_29"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": "MiniMeToken.balances (REALPlaceHolderMock.sol#113) is never initialized. It is used in:\n\t- doTransfer (REALPlaceHolderMock.sol#206-244)\n\t- balanceOfAt (REALPlaceHolderMock.sol#323-344)\n\t- generateTokens (REALPlaceHolderMock.sol#416-426)\n\t- destroyTokens (REALPlaceHolderMock.sol#433-443)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract (REALPlaceHolderMock.sol#507-514) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\n\n        // Alerts the token controller of the approve function call\n\n        if (isContract(controller)) {\n\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n\n        }\n\n\n\n        allowed[msg.sender][_spender] = _amount;\n\n        Approval(msg.sender, _spender, _amount);\n\n        return true;\n",
                    "message": "Reentrancy in MiniMeToken.approve (REALPlaceHolderMock.sol#258-275):\n\tExternal calls:\n\t- require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (REALPlaceHolderMock.sol#269)\n\tState variables written after the call(s):\n\t- allowed (REALPlaceHolderMock.sol#272)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1372,
                    "vulnerability_to_line": 1383,
                    "vulnerability_code": "    function transferable(address _from) internal returns (bool) {\n\n        // Allow the exchanger to work from the beginning\n\n        if (activationTime == 0) {\n\n            uint256 f = contribution.finalizedTime();\n\n            if (f > 0) {\n\n                activationTime = f.add(1 weeks);\n\n            } else {\n\n                return false;\n\n            }\n\n        }\n\n        return (getTime() > activationTime) || (_from == owner);\n",
                    "message": "Reentrancy in REALPlaceHolder.transferable (REALPlaceHolderMock.sol#1372-1383):\n\tExternal calls:\n\t- f = contribution.finalizedTime() (REALPlaceHolderMock.sol#1375)\n\tState variables written after the call(s):\n\t- activationTime (REALPlaceHolderMock.sol#1377)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (REALPlaceHolderMock.sol#537-547) does not use the value returned by external calls:\n\t-token.transfer(controller,balance) (REALPlaceHolderMock.sol#545)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (REALPlaceHolderMock.sol#1261-1274) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (REALPlaceHolderMock.sol#1272)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1404,
                    "vulnerability_to_line": 1417,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (real.controller() == address(this)) {\n\n            real.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALPlaceHolder.claimTokens (REALPlaceHolderMock.sol#1404-1417) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (REALPlaceHolderMock.sol#1415)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint min = 0;\n",
                    "message": "MiniMeToken.getValueAt.min (local variable @ REALPlaceHolderMock.sol#474) shadows:\n\t- MiniMeToken.min (function @ REALPlaceHolderMock.sol#517-519)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "Reentrancy in REALCrowdsale.initialize (REALPlaceHolderMock.sol#863-900):\n\tExternal calls:\n\t- require(bool)(REAL.totalSupply() == 0) (REALPlaceHolderMock.sol#877)\n\t- require(bool)(REAL.controller() == address(this)) (REALPlaceHolderMock.sol#878)\n\t- require(bool)(REAL.decimals() == 18) (REALPlaceHolderMock.sol#879)\n\tState variables written after the call(s):\n\t- destEthTeam (REALPlaceHolderMock.sol#890)\n\t- destTokensBounties (REALPlaceHolderMock.sol#899)\n\t- destTokensReserve (REALPlaceHolderMock.sol#893)\n\t- destTokensTeam (REALPlaceHolderMock.sol#896)\n\t- endBlock (REALPlaceHolderMock.sol#887)\n\t- realController (REALPlaceHolderMock.sol#882)\n\t- startBlock (REALPlaceHolderMock.sol#886)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract uses assembly (REALPlaceHolderMock.sol#507-514)\n\t- REALPlaceHolderMock.sol#510-513\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalSupply;\n",
                    "message": "ERC20Token.totalSupply should be constant (REALPlaceHolderMock.sol#719)\nMiniMeToken.version should be constant (REALPlaceHolderMock.sol#84)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": 1366,
                    "vulnerability_code": "    function onTransfer(address _from, address, uint256) public returns (bool) {\n\n      return transferable(_from);\n",
                    "message": "REALPlaceHolder.onTransfer (REALPlaceHolderMock.sol#1364-1366) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": "TokenController.onTransfer (REALPlaceHolderMock.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": 946,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onTransfer (REALPlaceHolderMock.sol#944-946) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": "TokenController.onApprove (REALPlaceHolderMock.sol#52-53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": 950,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onApprove (REALPlaceHolderMock.sol#948-950) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": 1370,
                    "vulnerability_code": "    function onApprove(address _from, address, uint256) public returns (bool) {\n\n        return transferable(_from);\n",
                    "message": "REALPlaceHolder.onApprove (REALPlaceHolderMock.sol#1368-1370) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 69,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n\n        controller = _newController;\n",
                    "message": "Controlled.changeController (REALPlaceHolderMock.sol#67-69) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": "ApproveAndCallFallBack.receiveApproval (REALPlaceHolderMock.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n        return doTransfer(msg.sender, _to, _amount);\n",
                    "message": "MiniMeToken.transfer (REALPlaceHolderMock.sol#172-175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n\n    ) returns (bool success) {\n\n\n\n        // The controller of this contract can move tokens around at will,\n\n        //  this is important to recognize! Confirm that you trust the\n\n        //  controller of this contract, which in most situations should be\n\n        //  another open source smart contract or 0x0\n\n        if (msg.sender != controller) {\n\n            require(transfersEnabled);\n\n\n\n            // The standard ERC 20 transferFrom functionality\n\n            if (allowed[_from][msg.sender] < _amount) return false;\n\n            allowed[_from][msg.sender] -= _amount;\n\n        }\n\n        return doTransfer(_from, _to, _amount);\n",
                    "message": "MiniMeToken.transferFrom (REALPlaceHolderMock.sol#183-198) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n\n    ) constant returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "MiniMeToken.allowance (REALPlaceHolderMock.sol#282-285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n\n    ) returns (bool success) {\n\n        require(approve(_spender, _amount));\n\n\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n\n            msg.sender,\n\n            _amount,\n\n            this,\n\n            _extraData\n\n        );\n\n\n\n        return true;\n",
                    "message": "MiniMeToken.approveAndCall (REALPlaceHolderMock.sol#294-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "    function createCloneToken(\n\n        string _cloneTokenName,\n\n        uint8 _cloneDecimalUnits,\n\n        string _cloneTokenSymbol,\n\n        uint _snapshotBlock,\n\n        bool _transfersEnabled\n\n        ) returns(address) {\n\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n\n            this,\n\n            _snapshotBlock,\n\n            _cloneTokenName,\n\n            _cloneDecimalUnits,\n\n            _cloneTokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        cloneToken.changeController(msg.sender);\n\n\n\n        // An event to make the token easy to find on the blockchain\n\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n\n        return address(cloneToken);\n",
                    "message": "MiniMeToken.createCloneToken (REALPlaceHolderMock.sol#384-406) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 426,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n\n        uint previousBalanceTo = balanceOf(_owner);\n\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n\n        Transfer(0, _owner, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.generateTokens (REALPlaceHolderMock.sol#416-426) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": 443,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply >= _amount);\n\n        uint previousBalanceFrom = balanceOf(_owner);\n\n        require(previousBalanceFrom >= _amount);\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n\n        Transfer(_owner, 0, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.destroyTokens (REALPlaceHolderMock.sol#433-443) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 454,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n\n        transfersEnabled = _transfersEnabled;\n",
                    "message": "MiniMeToken.enableTransfers (REALPlaceHolderMock.sol#452-454) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "    function ()  payable {\n\n        require(isContract(controller));\n\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
                    "message": "MiniMeToken.fallback (REALPlaceHolderMock.sol#524-527) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (REALPlaceHolderMock.sol#537-547) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function createCloneToken(\n\n        address _parentToken,\n\n        uint _snapshotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) returns (MiniMeToken) {\n\n        MiniMeToken newToken = new MiniMeToken(\n\n            this,\n\n            _parentToken,\n\n            _snapshotBlock,\n\n            _tokenName,\n\n            _decimalUnits,\n\n            _tokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        newToken.changeController(msg.sender);\n\n        return newToken;\n",
                    "message": "MiniMeTokenFactory.createCloneToken (REALPlaceHolderMock.sol#583-603) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": 636,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n\n        newOwner = _newOwner;\n",
                    "message": "Owned.changeOwner (REALPlaceHolderMock.sol#634-636) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": 643,
                    "vulnerability_code": "    function acceptOwnership() {\n\n        if (msg.sender == newOwner) {\n\n            owner = newOwner;\n\n        }\n",
                    "message": "Owned.acceptOwnership (REALPlaceHolderMock.sol#639-643) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": "ERC20Token.balanceOf (REALPlaceHolderMock.sol#723) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transfer (REALPlaceHolderMock.sol#729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transferFrom (REALPlaceHolderMock.sol#736) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.approve (REALPlaceHolderMock.sol#742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": "ERC20Token.allowance (REALPlaceHolderMock.sol#747) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "REALCrowdsale.initialize (REALPlaceHolderMock.sol#863-900) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": 915,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n\n        require(getBlockNumber() < startBlock);\n\n        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n\n        guaranteedBuyersLimit[_th] = _limit;\n\n        reservedGuaranteed = reservedGuaranteed + _limit;\n\n        GuaranteedAddress(_th, _limit);\n",
                    "message": "REALCrowdsale.setGuaranteedAddress (REALPlaceHolderMock.sol#909-915) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": 921,
                    "vulnerability_code": "    function () public payable notPaused {\n\n        proxyPayment(msg.sender);\n",
                    "message": "REALCrowdsale.fallback (REALPlaceHolderMock.sol#919-921) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1134,
                    "vulnerability_to_line": 1207,
                    "vulnerability_code": "    function finalize() public initialized {\n\n        require(getBlockNumber() >= startBlock);\n\n        require(msg.sender == owner || getBlockNumber() > endBlock);\n\n        require(finalizedBlock == 0);\n\n\n\n        // Allow premature finalization if final limit is reached\n\n        if (getBlockNumber() <= endBlock) {\n\n            require(totalNormalCollected >= fundingLimit);\n\n        }\n\n\n\n        finalizedBlock = getBlockNumber();\n\n        finalizedTime = now;\n\n\n\n        uint256 percentageToTeam = percent(20);\n\n\n\n        uint256 percentageToContributors = percent(51);\n\n\n\n        uint256 percentageToReserve = percent(15);\n\n\n\n        uint256 percentageToBounties = percent(14);\n\n\n\n\n\n        // REAL.totalSupply() -> Tokens minted during the contribution\n\n        //  totalTokens  -> Total tokens that should be after the allocation\n\n        //                   of devTokens and reserve\n\n        //  percentageToContributors -> Which percentage should go to the\n\n        //                               contribution participants\n\n        //                               (x per 10**18 format)\n\n        //  percent(100) -> 100% in (x per 10**18 format)\n\n        //\n\n        //                       percentageToContributors\n\n        //  REAL.totalSupply() = -------------------------- * totalTokens  =>\n\n        //                             percent(100)\n\n        //\n\n        //\n\n        //                            percent(100)\n\n        //  =>  totalTokens = ---------------------------- * REAL.totalSupply()\n\n        //                      percentageToContributors\n\n        //\n\n        uint256 totalTokens = REAL.totalSupply().mul(percent(100)).div(percentageToContributors);\n\n\n\n\n\n        //\n\n        //                    percentageToBounties\n\n        //  bountiesTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensBounties,\n\n            totalTokens.mul(percentageToBounties).div(percent(100))));\n\n\n\n        //\n\n        //                    percentageToReserve\n\n        //  reserveTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensReserve,\n\n            totalTokens.mul(percentageToReserve).div(percent(100))));\n\n\n\n\n\n        //\n\n        //                   percentageToTeam\n\n        //  teamTokens = ----------------------- * totalTokens\n\n        //                   percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensTeam,\n\n            totalTokens.mul(percentageToTeam).div(percent(100))));\n\n\n\n        REAL.changeController(realController);\n\n\n\n        Finalized();\n",
                    "message": "REALCrowdsale.finalize (REALPlaceHolderMock.sol#1134-1207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": 1235,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n\n        return REAL.totalSupply();\n",
                    "message": "REALCrowdsale.tokensIssued (REALPlaceHolderMock.sol#1233-1235) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (REALPlaceHolderMock.sol#1261-1274) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": 1280,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n\n        paused = true;\n",
                    "message": "REALCrowdsale.pauseContribution (REALPlaceHolderMock.sol#1278-1280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": 1285,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n\n        paused = false;\n",
                    "message": "REALCrowdsale.resumeContribution (REALPlaceHolderMock.sol#1283-1285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1349,
                    "vulnerability_to_line": 1352,
                    "vulnerability_code": "    function changeController(address _newController) public onlyOwner {\n\n        real.changeController(_newController);\n\n        ControllerChanged(_newController);\n",
                    "message": "REALPlaceHolder.changeController (REALPlaceHolderMock.sol#1349-1352) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1404,
                    "vulnerability_to_line": 1417,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (real.controller() == address(this)) {\n\n            real.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALPlaceHolder.claimTokens (REALPlaceHolderMock.sol#1404-1417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1443,
                    "vulnerability_to_line": 1445,
                    "vulnerability_code": "    function setMockedTime(uint _t) public {\n\n        mock_time = _t;\n",
                    "message": "REALPlaceHolderMock.setMockedTime (REALPlaceHolderMock.sol#1443-1445) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in REALPlaceHolderMock.sol:\n\t- pragma solidity^0.4.11 (REALPlaceHolderMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.11 (REALPlaceHolderMock.sol#608): it allows old versions\n\t- pragma solidity^0.4.11 (REALPlaceHolderMock.sol#648): it allows old versions\n\t- pragma solidity^0.4.11 (REALPlaceHolderMock.sol#706): it allows old versions\n\t- pragma solidity^0.4.11 (REALPlaceHolderMock.sol#755): it allows old versions\n\t- pragma solidity^0.4.11 (REALPlaceHolderMock.sol#1297): it allows old versions\n\t- pragma solidity^0.4.11 (REALPlaceHolderMock.sol#1426): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": "Function 'Controlled.Controlled' (REALPlaceHolderMock.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": "Parameter '_newController' of Controlled.changeController (REALPlaceHolderMock.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "    function MiniMeToken(\n\n        address _tokenFactory,\n\n        address _parentToken,\n\n        uint _parentSnapShotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) {\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n\n        name = _tokenName;                                 // Set the name\n\n        decimals = _decimalUnits;                          // Set the decimals\n\n        symbol = _tokenSymbol;                             // Set the symbol\n\n        parentToken = MiniMeToken(_parentToken);\n\n        parentSnapShotBlock = _parentSnapShotBlock;\n\n        transfersEnabled = _transfersEnabled;\n\n        creationBlock = block.number;\n",
                    "message": "Function 'MiniMeToken.MiniMeToken' (REALPlaceHolderMock.sol#144-161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenFactory,\n",
                    "message": "Parameter '_tokenFactory' of MiniMeToken.MiniMeToken (REALPlaceHolderMock.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeToken.MiniMeToken (REALPlaceHolderMock.sol#146) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _parentSnapShotBlock,\n",
                    "message": "Parameter '_parentSnapShotBlock' of MiniMeToken.MiniMeToken (REALPlaceHolderMock.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeToken.MiniMeToken (REALPlaceHolderMock.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeToken.MiniMeToken (REALPlaceHolderMock.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeToken.MiniMeToken (REALPlaceHolderMock.sol#150) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.MiniMeToken (REALPlaceHolderMock.sol#151) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_to' of MiniMeToken.transfer (REALPlaceHolderMock.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.transfer (REALPlaceHolderMock.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.transferFrom (REALPlaceHolderMock.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.transferFrom (REALPlaceHolderMock.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.transferFrom (REALPlaceHolderMock.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.doTransfer (REALPlaceHolderMock.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.doTransfer (REALPlaceHolderMock.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.doTransfer (REALPlaceHolderMock.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOf (REALPlaceHolderMock.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_spender' of MiniMeToken.approve (REALPlaceHolderMock.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.approve (REALPlaceHolderMock.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_owner' of MiniMeToken.allowance (REALPlaceHolderMock.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_spender' of MiniMeToken.allowance (REALPlaceHolderMock.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_spender' of MiniMeToken.approveAndCall (REALPlaceHolderMock.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_amount' of MiniMeToken.approveAndCall (REALPlaceHolderMock.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_extraData' of MiniMeToken.approveAndCall (REALPlaceHolderMock.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOfAt (REALPlaceHolderMock.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.balanceOfAt (REALPlaceHolderMock.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.totalSupplyAt (REALPlaceHolderMock.sol#349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenName,\n",
                    "message": "Parameter '_cloneTokenName' of MiniMeToken.createCloneToken (REALPlaceHolderMock.sol#385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _cloneDecimalUnits,\n",
                    "message": "Parameter '_cloneDecimalUnits' of MiniMeToken.createCloneToken (REALPlaceHolderMock.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenSymbol,\n",
                    "message": "Parameter '_cloneTokenSymbol' of MiniMeToken.createCloneToken (REALPlaceHolderMock.sol#387) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeToken.createCloneToken (REALPlaceHolderMock.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.createCloneToken (REALPlaceHolderMock.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.generateTokens (REALPlaceHolderMock.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.generateTokens (REALPlaceHolderMock.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.destroyTokens (REALPlaceHolderMock.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.destroyTokens (REALPlaceHolderMock.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.enableTransfers (REALPlaceHolderMock.sol#452) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": "Parameter '_block' of MiniMeToken.getValueAt (REALPlaceHolderMock.sol#464) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n",
                    "message": "Parameter '_value' of MiniMeToken.updateValueAtNow (REALPlaceHolderMock.sol#491) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": "Parameter '_addr' of MiniMeToken.isContract (REALPlaceHolderMock.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": "Parameter '_token' of MiniMeToken.claimTokens (REALPlaceHolderMock.sol#537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeTokenFactory.createCloneToken (REALPlaceHolderMock.sol#584) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeTokenFactory.createCloneToken (REALPlaceHolderMock.sol#585) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeTokenFactory.createCloneToken (REALPlaceHolderMock.sol#586) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeTokenFactory.createCloneToken (REALPlaceHolderMock.sol#587) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeTokenFactory.createCloneToken (REALPlaceHolderMock.sol#588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeTokenFactory.createCloneToken (REALPlaceHolderMock.sol#589) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": 627,
                    "vulnerability_code": "    function Owned() {\n\n        owner = msg.sender;\n",
                    "message": "Function 'Owned.Owned' (REALPlaceHolderMock.sol#625-627) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Owned.changeOwner (REALPlaceHolderMock.sol#634) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 932,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _th) public payable notPaused initialized contributionOpen returns (bool) {\n",
                    "message": "Parameter '_th' of REALCrowdsale.proxyPayment (REALPlaceHolderMock.sol#932) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onTransfer (REALPlaceHolderMock.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onTransfer (REALPlaceHolderMock.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onTransfer (REALPlaceHolderMock.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onApprove (REALPlaceHolderMock.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onApprove (REALPlaceHolderMock.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onApprove (REALPlaceHolderMock.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": 851,
                    "vulnerability_code": "    function REALCrowdsale() {\n\n        paused = false;\n",
                    "message": "Function 'REALCrowdsale.REALCrowdsale' (REALPlaceHolderMock.sol#849-851) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _real,\n",
                    "message": "Parameter '_real' of REALCrowdsale.initialize (REALPlaceHolderMock.sol#864) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 865,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _realController,\n",
                    "message": "Parameter '_realController' of REALCrowdsale.initialize (REALPlaceHolderMock.sol#865) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _startBlock,\n",
                    "message": "Parameter '_startBlock' of REALCrowdsale.initialize (REALPlaceHolderMock.sol#866) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endBlock,\n",
                    "message": "Parameter '_endBlock' of REALCrowdsale.initialize (REALPlaceHolderMock.sol#867) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destEthTeam,\n",
                    "message": "Parameter '_destEthTeam' of REALCrowdsale.initialize (REALPlaceHolderMock.sol#868) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensReserve,\n",
                    "message": "Parameter '_destTokensReserve' of REALCrowdsale.initialize (REALPlaceHolderMock.sol#869) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensTeam,\n",
                    "message": "Parameter '_destTokensTeam' of REALCrowdsale.initialize (REALPlaceHolderMock.sol#870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensBounties\n",
                    "message": "Parameter '_destTokensBounties' of REALCrowdsale.initialize (REALPlaceHolderMock.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_th' of REALCrowdsale.setGuaranteedAddress (REALPlaceHolderMock.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_limit' of REALCrowdsale.setGuaranteedAddress (REALPlaceHolderMock.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyNormal(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyNormal (REALPlaceHolderMock.sol#952) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyGuaranteed(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyGuaranteed (REALPlaceHolderMock.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.doBuy (REALPlaceHolderMock.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_toFund' of REALCrowdsale.doBuy (REALPlaceHolderMock.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_guaranteed' of REALCrowdsale.doBuy (REALPlaceHolderMock.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": "Parameter '_sender' of REALCrowdsale.isContract (REALPlaceHolderMock.sol#1216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of REALCrowdsale.claimTokens (REALPlaceHolderMock.sol#1261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public fundingLimit = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.fundingLimit' (REALPlaceHolderMock.sol#789) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 790,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public failSafeLimit = 200000 ether;\n",
                    "message": "Constant 'REALCrowdsale.failSafeLimit' (REALPlaceHolderMock.sol#790) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 791,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGuaranteedLimit = 30000 ether;\n",
                    "message": "Constant 'REALCrowdsale.maxGuaranteedLimit' (REALPlaceHolderMock.sol#791) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public exchangeRate = 220;\n",
                    "message": "Constant 'REALCrowdsale.exchangeRate' (REALPlaceHolderMock.sol#792) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGasPrice = 50000000000;\n",
                    "message": "Constant 'REALCrowdsale.maxGasPrice' (REALPlaceHolderMock.sol#793) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 794,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxCallFrequency = 100;\n",
                    "message": "Constant 'REALCrowdsale.maxCallFrequency' (REALPlaceHolderMock.sol#794) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1cap = 25000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus1cap' (REALPlaceHolderMock.sol#796) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1 = 25;\n",
                    "message": "Constant 'REALCrowdsale.bonus1' (REALPlaceHolderMock.sol#797) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2cap = 50000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus2cap' (REALPlaceHolderMock.sol#798) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 799,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2 = 20;\n",
                    "message": "Constant 'REALCrowdsale.bonus2' (REALPlaceHolderMock.sol#799) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 800,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3cap = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus3cap' (REALPlaceHolderMock.sol#800) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3 = 15;\n",
                    "message": "Constant 'REALCrowdsale.bonus3' (REALPlaceHolderMock.sol#801) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4cap = 150000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus4cap' (REALPlaceHolderMock.sol#802) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 803,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4 = 5;\n",
                    "message": "Constant 'REALCrowdsale.bonus4' (REALPlaceHolderMock.sol#803) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 805,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MiniMeToken public REAL;\n",
                    "message": "Variable 'REALCrowdsale.REAL' (REALPlaceHolderMock.sol#805) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address) public payable returns (bool) {\n",
                    "message": "Parameter '' of REALPlaceHolder.proxyPayment (REALPlaceHolderMock.sol#1360) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_from' of REALPlaceHolder.onTransfer (REALPlaceHolderMock.sol#1364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALPlaceHolder.onTransfer (REALPlaceHolderMock.sol#1364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALPlaceHolder.onTransfer (REALPlaceHolderMock.sol#1364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _from, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_from' of REALPlaceHolder.onApprove (REALPlaceHolderMock.sol#1368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _from, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALPlaceHolder.onApprove (REALPlaceHolderMock.sol#1368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _from, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALPlaceHolder.onApprove (REALPlaceHolderMock.sol#1368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1339,
                    "vulnerability_to_line": 1343,
                    "vulnerability_code": "    function REALPlaceHolder(address _owner, address _real, address _contribution) {\n\n        owner = _owner;\n\n        real = MiniMeToken(_real);\n\n        contribution = REALCrowdsale(_contribution);\n",
                    "message": "Function 'REALPlaceHolder.REALPlaceHolder' (REALPlaceHolderMock.sol#1339-1343) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALPlaceHolder(address _owner, address _real, address _contribution) {\n",
                    "message": "Parameter '_owner' of REALPlaceHolder.REALPlaceHolder (REALPlaceHolderMock.sol#1339) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALPlaceHolder(address _owner, address _real, address _contribution) {\n",
                    "message": "Parameter '_real' of REALPlaceHolder.REALPlaceHolder (REALPlaceHolderMock.sol#1339) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALPlaceHolder(address _owner, address _real, address _contribution) {\n",
                    "message": "Parameter '_contribution' of REALPlaceHolder.REALPlaceHolder (REALPlaceHolderMock.sol#1339) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) public onlyOwner {\n",
                    "message": "Parameter '_newController' of REALPlaceHolder.changeController (REALPlaceHolderMock.sol#1349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferable(address _from) internal returns (bool) {\n",
                    "message": "Parameter '_from' of REALPlaceHolder.transferable (REALPlaceHolderMock.sol#1372) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of REALPlaceHolder.claimTokens (REALPlaceHolderMock.sol#1404) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1434,
                    "vulnerability_to_line": 1437,
                    "vulnerability_code": "    function REALPlaceHolderMock(address _owner, address _real, address _contribution)\n\n            REALPlaceHolder(_owner, _real, _contribution) {\n\n        mock_time = now;\n",
                    "message": "Function 'REALPlaceHolderMock.REALPlaceHolderMock' (REALPlaceHolderMock.sol#1434-1437) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMockedTime(uint _t) public {\n",
                    "message": "Parameter '_t' of REALPlaceHolderMock.setMockedTime (REALPlaceHolderMock.sol#1443) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint mock_time;\n",
                    "message": "Variable 'REALPlaceHolderMock.mock_time' (REALPlaceHolderMock.sol#1432) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalCollected() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBlockNumber() internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (max > min) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function initialize(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 1329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 1217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return tx.origin != _sender;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function () public payable notPaused {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MiniMeToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ()  payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Owned() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function acceptOwnership() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALCrowdsale() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALPlaceHolder(address _owner, address _real, address _contribution) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALPlaceHolderMock(address _owner, address _real, address _contribution)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Checkpoint[] totalSupplyHistory;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint mock_time;\n",
                    "message": null
                }
            ]
        }
    },
    "real_contract-master/contracts/mocks/ReserveTokensHolderMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "           require((_to != 0) && (_to != address(this)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(getBlockNumber() >= startBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                getBlockNumber() <= endBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                finalizedBlock == 0 &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address(REAL) != 0x0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(collectedTokens == 0 && finalizedTime > 0 && getTime() > finalizedTime.add(months(12)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": "MiniMeToken.balances (ReserveTokensHolderMock.sol#113) is never initialized. It is used in:\n\t- doTransfer (ReserveTokensHolderMock.sol#206-244)\n\t- balanceOfAt (ReserveTokensHolderMock.sol#323-344)\n\t- generateTokens (ReserveTokensHolderMock.sol#416-426)\n\t- destroyTokens (ReserveTokensHolderMock.sol#433-443)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract (ReserveTokensHolderMock.sol#507-514) is declared view but contains assembly code\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1357,
                    "vulnerability_to_line": 1368,
                    "vulnerability_code": "    function collectTokens() public onlyOwner {\n\n        uint256 finalizedTime = contribution.finalizedTime();\n\n\n\n        require(collectedTokens == 0 && finalizedTime > 0 && getTime() > finalizedTime.add(months(12)));\n\n\n\n        uint256 balance = real.balanceOf(address(this));\n\n\n\n        collectedTokens = balance;\n\n        assert(real.transfer(owner, balance));\n\n\n\n        TokensWithdrawn(owner, balance);\n",
                    "message": "ReserveTokensHolder.collectTokens (ReserveTokensHolderMock.sol#1357-1368) uses a dangerous strict equality:\n\t- require(bool)(collectedTokens == 0 && finalizedTime > 0 && getTime() > finalizedTime.add(months(12)))\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\n\n        // Alerts the token controller of the approve function call\n\n        if (isContract(controller)) {\n\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n\n        }\n\n\n\n        allowed[msg.sender][_spender] = _amount;\n\n        Approval(msg.sender, _spender, _amount);\n\n        return true;\n",
                    "message": "Reentrancy in MiniMeToken.approve (ReserveTokensHolderMock.sol#258-275):\n\tExternal calls:\n\t- require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (ReserveTokensHolderMock.sol#269)\n\tState variables written after the call(s):\n\t- allowed (ReserveTokensHolderMock.sol#272)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1357,
                    "vulnerability_to_line": 1368,
                    "vulnerability_code": "    function collectTokens() public onlyOwner {\n\n        uint256 finalizedTime = contribution.finalizedTime();\n\n\n\n        require(collectedTokens == 0 && finalizedTime > 0 && getTime() > finalizedTime.add(months(12)));\n\n\n\n        uint256 balance = real.balanceOf(address(this));\n\n\n\n        collectedTokens = balance;\n\n        assert(real.transfer(owner, balance));\n\n\n\n        TokensWithdrawn(owner, balance);\n",
                    "message": "Reentrancy in ReserveTokensHolder.collectTokens (ReserveTokensHolderMock.sol#1357-1368):\n\tExternal calls:\n\t- finalizedTime = contribution.finalizedTime() (ReserveTokensHolderMock.sol#1358)\n\t- balance = real.balanceOf(address(this)) (ReserveTokensHolderMock.sol#1362)\n\tState variables written after the call(s):\n\t- collectedTokens (ReserveTokensHolderMock.sol#1364)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (ReserveTokensHolderMock.sol#537-547) does not use the value returned by external calls:\n\t-token.transfer(controller,balance) (ReserveTokensHolderMock.sol#545)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (ReserveTokensHolderMock.sol#1261-1274) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (ReserveTokensHolderMock.sol#1272)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1387,
                    "vulnerability_to_line": 1398,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        require(_token != address(real));\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "ReserveTokensHolder.claimTokens (ReserveTokensHolderMock.sol#1387-1398) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (ReserveTokensHolderMock.sol#1396)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint min = 0;\n",
                    "message": "MiniMeToken.getValueAt.min (local variable @ ReserveTokensHolderMock.sol#474) shadows:\n\t- MiniMeToken.min (function @ ReserveTokensHolderMock.sol#517-519)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "Reentrancy in REALCrowdsale.initialize (ReserveTokensHolderMock.sol#863-900):\n\tExternal calls:\n\t- require(bool)(REAL.totalSupply() == 0) (ReserveTokensHolderMock.sol#877)\n\t- require(bool)(REAL.controller() == address(this)) (ReserveTokensHolderMock.sol#878)\n\t- require(bool)(REAL.decimals() == 18) (ReserveTokensHolderMock.sol#879)\n\tState variables written after the call(s):\n\t- destEthTeam (ReserveTokensHolderMock.sol#890)\n\t- destTokensBounties (ReserveTokensHolderMock.sol#899)\n\t- destTokensReserve (ReserveTokensHolderMock.sol#893)\n\t- destTokensTeam (ReserveTokensHolderMock.sol#896)\n\t- endBlock (ReserveTokensHolderMock.sol#887)\n\t- realController (ReserveTokensHolderMock.sol#882)\n\t- startBlock (ReserveTokensHolderMock.sol#886)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract uses assembly (ReserveTokensHolderMock.sol#507-514)\n\t- ReserveTokensHolderMock.sol#510-513\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalSupply;\n",
                    "message": "ERC20Token.totalSupply should be constant (ReserveTokensHolderMock.sol#719)\nMiniMeToken.version should be constant (ReserveTokensHolderMock.sol#84)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": "TokenController.onTransfer (ReserveTokensHolderMock.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": 946,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onTransfer (ReserveTokensHolderMock.sol#944-946) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": "TokenController.onApprove (ReserveTokensHolderMock.sol#52-53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": 950,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onApprove (ReserveTokensHolderMock.sol#948-950) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 69,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n\n        controller = _newController;\n",
                    "message": "Controlled.changeController (ReserveTokensHolderMock.sol#67-69) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": "ApproveAndCallFallBack.receiveApproval (ReserveTokensHolderMock.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n        return doTransfer(msg.sender, _to, _amount);\n",
                    "message": "MiniMeToken.transfer (ReserveTokensHolderMock.sol#172-175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n\n    ) returns (bool success) {\n\n\n\n        // The controller of this contract can move tokens around at will,\n\n        //  this is important to recognize! Confirm that you trust the\n\n        //  controller of this contract, which in most situations should be\n\n        //  another open source smart contract or 0x0\n\n        if (msg.sender != controller) {\n\n            require(transfersEnabled);\n\n\n\n            // The standard ERC 20 transferFrom functionality\n\n            if (allowed[_from][msg.sender] < _amount) return false;\n\n            allowed[_from][msg.sender] -= _amount;\n\n        }\n\n        return doTransfer(_from, _to, _amount);\n",
                    "message": "MiniMeToken.transferFrom (ReserveTokensHolderMock.sol#183-198) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n\n    ) constant returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "MiniMeToken.allowance (ReserveTokensHolderMock.sol#282-285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n\n    ) returns (bool success) {\n\n        require(approve(_spender, _amount));\n\n\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n\n            msg.sender,\n\n            _amount,\n\n            this,\n\n            _extraData\n\n        );\n\n\n\n        return true;\n",
                    "message": "MiniMeToken.approveAndCall (ReserveTokensHolderMock.sol#294-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "    function createCloneToken(\n\n        string _cloneTokenName,\n\n        uint8 _cloneDecimalUnits,\n\n        string _cloneTokenSymbol,\n\n        uint _snapshotBlock,\n\n        bool _transfersEnabled\n\n        ) returns(address) {\n\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n\n            this,\n\n            _snapshotBlock,\n\n            _cloneTokenName,\n\n            _cloneDecimalUnits,\n\n            _cloneTokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        cloneToken.changeController(msg.sender);\n\n\n\n        // An event to make the token easy to find on the blockchain\n\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n\n        return address(cloneToken);\n",
                    "message": "MiniMeToken.createCloneToken (ReserveTokensHolderMock.sol#384-406) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 426,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n\n        uint previousBalanceTo = balanceOf(_owner);\n\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n\n        Transfer(0, _owner, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.generateTokens (ReserveTokensHolderMock.sol#416-426) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": 443,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply >= _amount);\n\n        uint previousBalanceFrom = balanceOf(_owner);\n\n        require(previousBalanceFrom >= _amount);\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n\n        Transfer(_owner, 0, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.destroyTokens (ReserveTokensHolderMock.sol#433-443) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 454,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n\n        transfersEnabled = _transfersEnabled;\n",
                    "message": "MiniMeToken.enableTransfers (ReserveTokensHolderMock.sol#452-454) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "    function ()  payable {\n\n        require(isContract(controller));\n\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
                    "message": "MiniMeToken.fallback (ReserveTokensHolderMock.sol#524-527) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (ReserveTokensHolderMock.sol#537-547) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function createCloneToken(\n\n        address _parentToken,\n\n        uint _snapshotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) returns (MiniMeToken) {\n\n        MiniMeToken newToken = new MiniMeToken(\n\n            this,\n\n            _parentToken,\n\n            _snapshotBlock,\n\n            _tokenName,\n\n            _decimalUnits,\n\n            _tokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        newToken.changeController(msg.sender);\n\n        return newToken;\n",
                    "message": "MiniMeTokenFactory.createCloneToken (ReserveTokensHolderMock.sol#583-603) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": 636,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n\n        newOwner = _newOwner;\n",
                    "message": "Owned.changeOwner (ReserveTokensHolderMock.sol#634-636) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": 643,
                    "vulnerability_code": "    function acceptOwnership() {\n\n        if (msg.sender == newOwner) {\n\n            owner = newOwner;\n\n        }\n",
                    "message": "Owned.acceptOwnership (ReserveTokensHolderMock.sol#639-643) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": "ERC20Token.balanceOf (ReserveTokensHolderMock.sol#723) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transfer (ReserveTokensHolderMock.sol#729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transferFrom (ReserveTokensHolderMock.sol#736) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.approve (ReserveTokensHolderMock.sol#742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": "ERC20Token.allowance (ReserveTokensHolderMock.sol#747) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "REALCrowdsale.initialize (ReserveTokensHolderMock.sol#863-900) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": 915,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n\n        require(getBlockNumber() < startBlock);\n\n        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n\n        guaranteedBuyersLimit[_th] = _limit;\n\n        reservedGuaranteed = reservedGuaranteed + _limit;\n\n        GuaranteedAddress(_th, _limit);\n",
                    "message": "REALCrowdsale.setGuaranteedAddress (ReserveTokensHolderMock.sol#909-915) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": 921,
                    "vulnerability_code": "    function () public payable notPaused {\n\n        proxyPayment(msg.sender);\n",
                    "message": "REALCrowdsale.fallback (ReserveTokensHolderMock.sol#919-921) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1134,
                    "vulnerability_to_line": 1207,
                    "vulnerability_code": "    function finalize() public initialized {\n\n        require(getBlockNumber() >= startBlock);\n\n        require(msg.sender == owner || getBlockNumber() > endBlock);\n\n        require(finalizedBlock == 0);\n\n\n\n        // Allow premature finalization if final limit is reached\n\n        if (getBlockNumber() <= endBlock) {\n\n            require(totalNormalCollected >= fundingLimit);\n\n        }\n\n\n\n        finalizedBlock = getBlockNumber();\n\n        finalizedTime = now;\n\n\n\n        uint256 percentageToTeam = percent(20);\n\n\n\n        uint256 percentageToContributors = percent(51);\n\n\n\n        uint256 percentageToReserve = percent(15);\n\n\n\n        uint256 percentageToBounties = percent(14);\n\n\n\n\n\n        // REAL.totalSupply() -> Tokens minted during the contribution\n\n        //  totalTokens  -> Total tokens that should be after the allocation\n\n        //                   of devTokens and reserve\n\n        //  percentageToContributors -> Which percentage should go to the\n\n        //                               contribution participants\n\n        //                               (x per 10**18 format)\n\n        //  percent(100) -> 100% in (x per 10**18 format)\n\n        //\n\n        //                       percentageToContributors\n\n        //  REAL.totalSupply() = -------------------------- * totalTokens  =>\n\n        //                             percent(100)\n\n        //\n\n        //\n\n        //                            percent(100)\n\n        //  =>  totalTokens = ---------------------------- * REAL.totalSupply()\n\n        //                      percentageToContributors\n\n        //\n\n        uint256 totalTokens = REAL.totalSupply().mul(percent(100)).div(percentageToContributors);\n\n\n\n\n\n        //\n\n        //                    percentageToBounties\n\n        //  bountiesTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensBounties,\n\n            totalTokens.mul(percentageToBounties).div(percent(100))));\n\n\n\n        //\n\n        //                    percentageToReserve\n\n        //  reserveTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensReserve,\n\n            totalTokens.mul(percentageToReserve).div(percent(100))));\n\n\n\n\n\n        //\n\n        //                   percentageToTeam\n\n        //  teamTokens = ----------------------- * totalTokens\n\n        //                   percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensTeam,\n\n            totalTokens.mul(percentageToTeam).div(percent(100))));\n\n\n\n        REAL.changeController(realController);\n\n\n\n        Finalized();\n",
                    "message": "REALCrowdsale.finalize (ReserveTokensHolderMock.sol#1134-1207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": 1235,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n\n        return REAL.totalSupply();\n",
                    "message": "REALCrowdsale.tokensIssued (ReserveTokensHolderMock.sol#1233-1235) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (ReserveTokensHolderMock.sol#1261-1274) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": 1280,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n\n        paused = true;\n",
                    "message": "REALCrowdsale.pauseContribution (ReserveTokensHolderMock.sol#1278-1280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": 1285,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n\n        paused = false;\n",
                    "message": "REALCrowdsale.resumeContribution (ReserveTokensHolderMock.sol#1283-1285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1357,
                    "vulnerability_to_line": 1368,
                    "vulnerability_code": "    function collectTokens() public onlyOwner {\n\n        uint256 finalizedTime = contribution.finalizedTime();\n\n\n\n        require(collectedTokens == 0 && finalizedTime > 0 && getTime() > finalizedTime.add(months(12)));\n\n\n\n        uint256 balance = real.balanceOf(address(this));\n\n\n\n        collectedTokens = balance;\n\n        assert(real.transfer(owner, balance));\n\n\n\n        TokensWithdrawn(owner, balance);\n",
                    "message": "ReserveTokensHolder.collectTokens (ReserveTokensHolderMock.sol#1357-1368) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1387,
                    "vulnerability_to_line": 1398,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        require(_token != address(real));\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "ReserveTokensHolder.claimTokens (ReserveTokensHolderMock.sol#1387-1398) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1418,
                    "vulnerability_to_line": 1420,
                    "vulnerability_code": "    function setMockedDate(uint256 date) public {\n\n        mock_date = date;\n",
                    "message": "ReserveTokensHolderMock.setMockedDate (ReserveTokensHolderMock.sol#1418-1420) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in ReserveTokensHolderMock.sol:\n\t- pragma solidity^0.4.11 (ReserveTokensHolderMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.11 (ReserveTokensHolderMock.sol#608): it allows old versions\n\t- pragma solidity^0.4.11 (ReserveTokensHolderMock.sol#648): it allows old versions\n\t- pragma solidity^0.4.11 (ReserveTokensHolderMock.sol#706): it allows old versions\n\t- pragma solidity^0.4.11 (ReserveTokensHolderMock.sol#755): it allows old versions\n\t- pragma solidity^0.4.11 (ReserveTokensHolderMock.sol#1297): it allows old versions\n\t- pragma solidity^0.4.11 (ReserveTokensHolderMock.sol#1406): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": "Function 'Controlled.Controlled' (ReserveTokensHolderMock.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": "Parameter '_newController' of Controlled.changeController (ReserveTokensHolderMock.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "    function MiniMeToken(\n\n        address _tokenFactory,\n\n        address _parentToken,\n\n        uint _parentSnapShotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) {\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n\n        name = _tokenName;                                 // Set the name\n\n        decimals = _decimalUnits;                          // Set the decimals\n\n        symbol = _tokenSymbol;                             // Set the symbol\n\n        parentToken = MiniMeToken(_parentToken);\n\n        parentSnapShotBlock = _parentSnapShotBlock;\n\n        transfersEnabled = _transfersEnabled;\n\n        creationBlock = block.number;\n",
                    "message": "Function 'MiniMeToken.MiniMeToken' (ReserveTokensHolderMock.sol#144-161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenFactory,\n",
                    "message": "Parameter '_tokenFactory' of MiniMeToken.MiniMeToken (ReserveTokensHolderMock.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeToken.MiniMeToken (ReserveTokensHolderMock.sol#146) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _parentSnapShotBlock,\n",
                    "message": "Parameter '_parentSnapShotBlock' of MiniMeToken.MiniMeToken (ReserveTokensHolderMock.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeToken.MiniMeToken (ReserveTokensHolderMock.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeToken.MiniMeToken (ReserveTokensHolderMock.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeToken.MiniMeToken (ReserveTokensHolderMock.sol#150) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.MiniMeToken (ReserveTokensHolderMock.sol#151) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_to' of MiniMeToken.transfer (ReserveTokensHolderMock.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.transfer (ReserveTokensHolderMock.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.transferFrom (ReserveTokensHolderMock.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.transferFrom (ReserveTokensHolderMock.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.transferFrom (ReserveTokensHolderMock.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.doTransfer (ReserveTokensHolderMock.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.doTransfer (ReserveTokensHolderMock.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.doTransfer (ReserveTokensHolderMock.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOf (ReserveTokensHolderMock.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_spender' of MiniMeToken.approve (ReserveTokensHolderMock.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.approve (ReserveTokensHolderMock.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_owner' of MiniMeToken.allowance (ReserveTokensHolderMock.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_spender' of MiniMeToken.allowance (ReserveTokensHolderMock.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_spender' of MiniMeToken.approveAndCall (ReserveTokensHolderMock.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_amount' of MiniMeToken.approveAndCall (ReserveTokensHolderMock.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_extraData' of MiniMeToken.approveAndCall (ReserveTokensHolderMock.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOfAt (ReserveTokensHolderMock.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.balanceOfAt (ReserveTokensHolderMock.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.totalSupplyAt (ReserveTokensHolderMock.sol#349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenName,\n",
                    "message": "Parameter '_cloneTokenName' of MiniMeToken.createCloneToken (ReserveTokensHolderMock.sol#385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _cloneDecimalUnits,\n",
                    "message": "Parameter '_cloneDecimalUnits' of MiniMeToken.createCloneToken (ReserveTokensHolderMock.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenSymbol,\n",
                    "message": "Parameter '_cloneTokenSymbol' of MiniMeToken.createCloneToken (ReserveTokensHolderMock.sol#387) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeToken.createCloneToken (ReserveTokensHolderMock.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.createCloneToken (ReserveTokensHolderMock.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.generateTokens (ReserveTokensHolderMock.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.generateTokens (ReserveTokensHolderMock.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.destroyTokens (ReserveTokensHolderMock.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.destroyTokens (ReserveTokensHolderMock.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.enableTransfers (ReserveTokensHolderMock.sol#452) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": "Parameter '_block' of MiniMeToken.getValueAt (ReserveTokensHolderMock.sol#464) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n",
                    "message": "Parameter '_value' of MiniMeToken.updateValueAtNow (ReserveTokensHolderMock.sol#491) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": "Parameter '_addr' of MiniMeToken.isContract (ReserveTokensHolderMock.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": "Parameter '_token' of MiniMeToken.claimTokens (ReserveTokensHolderMock.sol#537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeTokenFactory.createCloneToken (ReserveTokensHolderMock.sol#584) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeTokenFactory.createCloneToken (ReserveTokensHolderMock.sol#585) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeTokenFactory.createCloneToken (ReserveTokensHolderMock.sol#586) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeTokenFactory.createCloneToken (ReserveTokensHolderMock.sol#587) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeTokenFactory.createCloneToken (ReserveTokensHolderMock.sol#588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeTokenFactory.createCloneToken (ReserveTokensHolderMock.sol#589) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": 627,
                    "vulnerability_code": "    function Owned() {\n\n        owner = msg.sender;\n",
                    "message": "Function 'Owned.Owned' (ReserveTokensHolderMock.sol#625-627) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Owned.changeOwner (ReserveTokensHolderMock.sol#634) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 932,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _th) public payable notPaused initialized contributionOpen returns (bool) {\n",
                    "message": "Parameter '_th' of REALCrowdsale.proxyPayment (ReserveTokensHolderMock.sol#932) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onTransfer (ReserveTokensHolderMock.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onTransfer (ReserveTokensHolderMock.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onTransfer (ReserveTokensHolderMock.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onApprove (ReserveTokensHolderMock.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onApprove (ReserveTokensHolderMock.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onApprove (ReserveTokensHolderMock.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": 851,
                    "vulnerability_code": "    function REALCrowdsale() {\n\n        paused = false;\n",
                    "message": "Function 'REALCrowdsale.REALCrowdsale' (ReserveTokensHolderMock.sol#849-851) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _real,\n",
                    "message": "Parameter '_real' of REALCrowdsale.initialize (ReserveTokensHolderMock.sol#864) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 865,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _realController,\n",
                    "message": "Parameter '_realController' of REALCrowdsale.initialize (ReserveTokensHolderMock.sol#865) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _startBlock,\n",
                    "message": "Parameter '_startBlock' of REALCrowdsale.initialize (ReserveTokensHolderMock.sol#866) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endBlock,\n",
                    "message": "Parameter '_endBlock' of REALCrowdsale.initialize (ReserveTokensHolderMock.sol#867) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destEthTeam,\n",
                    "message": "Parameter '_destEthTeam' of REALCrowdsale.initialize (ReserveTokensHolderMock.sol#868) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensReserve,\n",
                    "message": "Parameter '_destTokensReserve' of REALCrowdsale.initialize (ReserveTokensHolderMock.sol#869) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensTeam,\n",
                    "message": "Parameter '_destTokensTeam' of REALCrowdsale.initialize (ReserveTokensHolderMock.sol#870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensBounties\n",
                    "message": "Parameter '_destTokensBounties' of REALCrowdsale.initialize (ReserveTokensHolderMock.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_th' of REALCrowdsale.setGuaranteedAddress (ReserveTokensHolderMock.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_limit' of REALCrowdsale.setGuaranteedAddress (ReserveTokensHolderMock.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyNormal(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyNormal (ReserveTokensHolderMock.sol#952) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyGuaranteed(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyGuaranteed (ReserveTokensHolderMock.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.doBuy (ReserveTokensHolderMock.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_toFund' of REALCrowdsale.doBuy (ReserveTokensHolderMock.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_guaranteed' of REALCrowdsale.doBuy (ReserveTokensHolderMock.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": "Parameter '_sender' of REALCrowdsale.isContract (ReserveTokensHolderMock.sol#1216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of REALCrowdsale.claimTokens (ReserveTokensHolderMock.sol#1261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public fundingLimit = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.fundingLimit' (ReserveTokensHolderMock.sol#789) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 790,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public failSafeLimit = 200000 ether;\n",
                    "message": "Constant 'REALCrowdsale.failSafeLimit' (ReserveTokensHolderMock.sol#790) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 791,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGuaranteedLimit = 30000 ether;\n",
                    "message": "Constant 'REALCrowdsale.maxGuaranteedLimit' (ReserveTokensHolderMock.sol#791) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public exchangeRate = 220;\n",
                    "message": "Constant 'REALCrowdsale.exchangeRate' (ReserveTokensHolderMock.sol#792) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGasPrice = 50000000000;\n",
                    "message": "Constant 'REALCrowdsale.maxGasPrice' (ReserveTokensHolderMock.sol#793) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 794,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxCallFrequency = 100;\n",
                    "message": "Constant 'REALCrowdsale.maxCallFrequency' (ReserveTokensHolderMock.sol#794) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1cap = 25000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus1cap' (ReserveTokensHolderMock.sol#796) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1 = 25;\n",
                    "message": "Constant 'REALCrowdsale.bonus1' (ReserveTokensHolderMock.sol#797) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2cap = 50000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus2cap' (ReserveTokensHolderMock.sol#798) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 799,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2 = 20;\n",
                    "message": "Constant 'REALCrowdsale.bonus2' (ReserveTokensHolderMock.sol#799) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 800,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3cap = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus3cap' (ReserveTokensHolderMock.sol#800) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3 = 15;\n",
                    "message": "Constant 'REALCrowdsale.bonus3' (ReserveTokensHolderMock.sol#801) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4cap = 150000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus4cap' (ReserveTokensHolderMock.sol#802) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 803,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4 = 5;\n",
                    "message": "Constant 'REALCrowdsale.bonus4' (ReserveTokensHolderMock.sol#803) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 805,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MiniMeToken public REAL;\n",
                    "message": "Variable 'REALCrowdsale.REAL' (ReserveTokensHolderMock.sol#805) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": 1354,
                    "vulnerability_code": "    function ReserveTokensHolder(address _owner, address _contribution, address _real) {\n\n        owner = _owner;\n\n        contribution = REALCrowdsale(_contribution);\n\n        real = MiniMeToken(_real);\n",
                    "message": "Function 'ReserveTokensHolder.ReserveTokensHolder' (ReserveTokensHolderMock.sol#1350-1354) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ReserveTokensHolder(address _owner, address _contribution, address _real) {\n",
                    "message": "Parameter '_owner' of ReserveTokensHolder.ReserveTokensHolder (ReserveTokensHolderMock.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ReserveTokensHolder(address _owner, address _contribution, address _real) {\n",
                    "message": "Parameter '_contribution' of ReserveTokensHolder.ReserveTokensHolder (ReserveTokensHolderMock.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ReserveTokensHolder(address _owner, address _contribution, address _real) {\n",
                    "message": "Parameter '_real' of ReserveTokensHolder.ReserveTokensHolder (ReserveTokensHolderMock.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of ReserveTokensHolder.claimTokens (ReserveTokensHolderMock.sol#1387) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ReserveTokensHolderMock(address _owner, address _crowdsale, address _real) ReserveTokensHolder(_owner, _crowdsale, _real) {}\n",
                    "message": "Function 'ReserveTokensHolderMock.ReserveTokensHolderMock' (ReserveTokensHolderMock.sol#1412) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1422,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 mock_date = now;\n",
                    "message": "Variable 'ReserveTokensHolderMock.mock_date' (ReserveTokensHolderMock.sol#1422) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalCollected() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBlockNumber() internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (max > min) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function initialize(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 1217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return tx.origin != _sender;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function () public payable notPaused {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MiniMeToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ()  payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Owned() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function acceptOwnership() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALCrowdsale() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ReserveTokensHolder(address _owner, address _contribution, address _real) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ReserveTokensHolderMock(address _owner, address _crowdsale, address _real) ReserveTokensHolder(_owner, _crowdsale, _real) {}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Checkpoint[] totalSupplyHistory;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 collectedTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    REALCrowdsale contribution;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MiniMeToken real;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1422,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 mock_date = now;\n",
                    "message": null
                }
            ]
        }
    },
    "real_contract-master/contracts/mocks/DevTokensHolderMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "           require((_to != 0) && (_to != address(this)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(getBlockNumber() >= startBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                getBlockNumber() <= endBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                finalizedBlock == 0 &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address(REAL) != 0x0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(finalizedTime > 0 && getTime() > finalizedTime.add(months(6)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": "MiniMeToken.balances (DevTokensHolderMock.sol#113) is never initialized. It is used in:\n\t- doTransfer (DevTokensHolderMock.sol#206-244)\n\t- balanceOfAt (DevTokensHolderMock.sol#323-344)\n\t- generateTokens (DevTokensHolderMock.sol#416-426)\n\t- destroyTokens (DevTokensHolderMock.sol#433-443)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract (DevTokensHolderMock.sol#507-514) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\n\n        // Alerts the token controller of the approve function call\n\n        if (isContract(controller)) {\n\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n\n        }\n\n\n\n        allowed[msg.sender][_spender] = _amount;\n\n        Approval(msg.sender, _spender, _amount);\n\n        return true;\n",
                    "message": "Reentrancy in MiniMeToken.approve (DevTokensHolderMock.sol#258-275):\n\tExternal calls:\n\t- require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (DevTokensHolderMock.sol#269)\n\tState variables written after the call(s):\n\t- allowed (DevTokensHolderMock.sol#272)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1357,
                    "vulnerability_to_line": 1377,
                    "vulnerability_code": "    function collectTokens() public onlyOwner {\n\n        uint256 balance = real.balanceOf(address(this));\n\n        uint256 total = collectedTokens.add(balance);\n\n\n\n        uint256 finalizedTime = contribution.finalizedTime();\n\n\n\n        require(finalizedTime > 0 && getTime() > finalizedTime.add(months(6)));\n\n\n\n        uint256 canExtract = total.mul(getTime().sub(finalizedTime)).div(months(24));\n\n\n\n        canExtract = canExtract.sub(collectedTokens);\n\n\n\n        if (canExtract > balance) {\n\n            canExtract = balance;\n\n        }\n\n\n\n        collectedTokens = collectedTokens.add(canExtract);\n\n        assert(real.transfer(owner, canExtract));\n\n\n\n        TokensWithdrawn(owner, canExtract);\n",
                    "message": "Reentrancy in DevTokensHolder.collectTokens (DevTokensHolderMock.sol#1357-1377):\n\tExternal calls:\n\t- balance = real.balanceOf(address(this)) (DevTokensHolderMock.sol#1358)\n\t- finalizedTime = contribution.finalizedTime() (DevTokensHolderMock.sol#1361)\n\tState variables written after the call(s):\n\t- collectedTokens (DevTokensHolderMock.sol#1373)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (DevTokensHolderMock.sol#537-547) does not use the value returned by external calls:\n\t-token.transfer(controller,balance) (DevTokensHolderMock.sol#545)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (DevTokensHolderMock.sol#1261-1274) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (DevTokensHolderMock.sol#1272)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1396,
                    "vulnerability_to_line": 1407,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        require(_token != address(real));\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "DevTokensHolder.claimTokens (DevTokensHolderMock.sol#1396-1407) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (DevTokensHolderMock.sol#1405)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint min = 0;\n",
                    "message": "MiniMeToken.getValueAt.min (local variable @ DevTokensHolderMock.sol#474) shadows:\n\t- MiniMeToken.min (function @ DevTokensHolderMock.sol#517-519)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "Reentrancy in REALCrowdsale.initialize (DevTokensHolderMock.sol#863-900):\n\tExternal calls:\n\t- require(bool)(REAL.totalSupply() == 0) (DevTokensHolderMock.sol#877)\n\t- require(bool)(REAL.controller() == address(this)) (DevTokensHolderMock.sol#878)\n\t- require(bool)(REAL.decimals() == 18) (DevTokensHolderMock.sol#879)\n\tState variables written after the call(s):\n\t- destEthTeam (DevTokensHolderMock.sol#890)\n\t- destTokensBounties (DevTokensHolderMock.sol#899)\n\t- destTokensReserve (DevTokensHolderMock.sol#893)\n\t- destTokensTeam (DevTokensHolderMock.sol#896)\n\t- endBlock (DevTokensHolderMock.sol#887)\n\t- realController (DevTokensHolderMock.sol#882)\n\t- startBlock (DevTokensHolderMock.sol#886)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract uses assembly (DevTokensHolderMock.sol#507-514)\n\t- DevTokensHolderMock.sol#510-513\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalSupply;\n",
                    "message": "ERC20Token.totalSupply should be constant (DevTokensHolderMock.sol#719)\nMiniMeToken.version should be constant (DevTokensHolderMock.sol#84)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": "TokenController.onTransfer (DevTokensHolderMock.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": 946,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onTransfer (DevTokensHolderMock.sol#944-946) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": 950,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onApprove (DevTokensHolderMock.sol#948-950) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": "TokenController.onApprove (DevTokensHolderMock.sol#52-53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 69,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n\n        controller = _newController;\n",
                    "message": "Controlled.changeController (DevTokensHolderMock.sol#67-69) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": "ApproveAndCallFallBack.receiveApproval (DevTokensHolderMock.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n        return doTransfer(msg.sender, _to, _amount);\n",
                    "message": "MiniMeToken.transfer (DevTokensHolderMock.sol#172-175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n\n    ) returns (bool success) {\n\n\n\n        // The controller of this contract can move tokens around at will,\n\n        //  this is important to recognize! Confirm that you trust the\n\n        //  controller of this contract, which in most situations should be\n\n        //  another open source smart contract or 0x0\n\n        if (msg.sender != controller) {\n\n            require(transfersEnabled);\n\n\n\n            // The standard ERC 20 transferFrom functionality\n\n            if (allowed[_from][msg.sender] < _amount) return false;\n\n            allowed[_from][msg.sender] -= _amount;\n\n        }\n\n        return doTransfer(_from, _to, _amount);\n",
                    "message": "MiniMeToken.transferFrom (DevTokensHolderMock.sol#183-198) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n\n    ) constant returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "MiniMeToken.allowance (DevTokensHolderMock.sol#282-285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n\n    ) returns (bool success) {\n\n        require(approve(_spender, _amount));\n\n\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n\n            msg.sender,\n\n            _amount,\n\n            this,\n\n            _extraData\n\n        );\n\n\n\n        return true;\n",
                    "message": "MiniMeToken.approveAndCall (DevTokensHolderMock.sol#294-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "    function createCloneToken(\n\n        string _cloneTokenName,\n\n        uint8 _cloneDecimalUnits,\n\n        string _cloneTokenSymbol,\n\n        uint _snapshotBlock,\n\n        bool _transfersEnabled\n\n        ) returns(address) {\n\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n\n            this,\n\n            _snapshotBlock,\n\n            _cloneTokenName,\n\n            _cloneDecimalUnits,\n\n            _cloneTokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        cloneToken.changeController(msg.sender);\n\n\n\n        // An event to make the token easy to find on the blockchain\n\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n\n        return address(cloneToken);\n",
                    "message": "MiniMeToken.createCloneToken (DevTokensHolderMock.sol#384-406) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 426,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n\n        uint previousBalanceTo = balanceOf(_owner);\n\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n\n        Transfer(0, _owner, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.generateTokens (DevTokensHolderMock.sol#416-426) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": 443,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply >= _amount);\n\n        uint previousBalanceFrom = balanceOf(_owner);\n\n        require(previousBalanceFrom >= _amount);\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n\n        Transfer(_owner, 0, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.destroyTokens (DevTokensHolderMock.sol#433-443) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 454,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n\n        transfersEnabled = _transfersEnabled;\n",
                    "message": "MiniMeToken.enableTransfers (DevTokensHolderMock.sol#452-454) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "    function ()  payable {\n\n        require(isContract(controller));\n\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
                    "message": "MiniMeToken.fallback (DevTokensHolderMock.sol#524-527) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (DevTokensHolderMock.sol#537-547) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function createCloneToken(\n\n        address _parentToken,\n\n        uint _snapshotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) returns (MiniMeToken) {\n\n        MiniMeToken newToken = new MiniMeToken(\n\n            this,\n\n            _parentToken,\n\n            _snapshotBlock,\n\n            _tokenName,\n\n            _decimalUnits,\n\n            _tokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        newToken.changeController(msg.sender);\n\n        return newToken;\n",
                    "message": "MiniMeTokenFactory.createCloneToken (DevTokensHolderMock.sol#583-603) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": 636,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n\n        newOwner = _newOwner;\n",
                    "message": "Owned.changeOwner (DevTokensHolderMock.sol#634-636) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": 643,
                    "vulnerability_code": "    function acceptOwnership() {\n\n        if (msg.sender == newOwner) {\n\n            owner = newOwner;\n\n        }\n",
                    "message": "Owned.acceptOwnership (DevTokensHolderMock.sol#639-643) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": "ERC20Token.balanceOf (DevTokensHolderMock.sol#723) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transfer (DevTokensHolderMock.sol#729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transferFrom (DevTokensHolderMock.sol#736) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.approve (DevTokensHolderMock.sol#742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": "ERC20Token.allowance (DevTokensHolderMock.sol#747) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "REALCrowdsale.initialize (DevTokensHolderMock.sol#863-900) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": 915,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n\n        require(getBlockNumber() < startBlock);\n\n        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n\n        guaranteedBuyersLimit[_th] = _limit;\n\n        reservedGuaranteed = reservedGuaranteed + _limit;\n\n        GuaranteedAddress(_th, _limit);\n",
                    "message": "REALCrowdsale.setGuaranteedAddress (DevTokensHolderMock.sol#909-915) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": 921,
                    "vulnerability_code": "    function () public payable notPaused {\n\n        proxyPayment(msg.sender);\n",
                    "message": "REALCrowdsale.fallback (DevTokensHolderMock.sol#919-921) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1134,
                    "vulnerability_to_line": 1207,
                    "vulnerability_code": "    function finalize() public initialized {\n\n        require(getBlockNumber() >= startBlock);\n\n        require(msg.sender == owner || getBlockNumber() > endBlock);\n\n        require(finalizedBlock == 0);\n\n\n\n        // Allow premature finalization if final limit is reached\n\n        if (getBlockNumber() <= endBlock) {\n\n            require(totalNormalCollected >= fundingLimit);\n\n        }\n\n\n\n        finalizedBlock = getBlockNumber();\n\n        finalizedTime = now;\n\n\n\n        uint256 percentageToTeam = percent(20);\n\n\n\n        uint256 percentageToContributors = percent(51);\n\n\n\n        uint256 percentageToReserve = percent(15);\n\n\n\n        uint256 percentageToBounties = percent(14);\n\n\n\n\n\n        // REAL.totalSupply() -> Tokens minted during the contribution\n\n        //  totalTokens  -> Total tokens that should be after the allocation\n\n        //                   of devTokens and reserve\n\n        //  percentageToContributors -> Which percentage should go to the\n\n        //                               contribution participants\n\n        //                               (x per 10**18 format)\n\n        //  percent(100) -> 100% in (x per 10**18 format)\n\n        //\n\n        //                       percentageToContributors\n\n        //  REAL.totalSupply() = -------------------------- * totalTokens  =>\n\n        //                             percent(100)\n\n        //\n\n        //\n\n        //                            percent(100)\n\n        //  =>  totalTokens = ---------------------------- * REAL.totalSupply()\n\n        //                      percentageToContributors\n\n        //\n\n        uint256 totalTokens = REAL.totalSupply().mul(percent(100)).div(percentageToContributors);\n\n\n\n\n\n        //\n\n        //                    percentageToBounties\n\n        //  bountiesTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensBounties,\n\n            totalTokens.mul(percentageToBounties).div(percent(100))));\n\n\n\n        //\n\n        //                    percentageToReserve\n\n        //  reserveTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensReserve,\n\n            totalTokens.mul(percentageToReserve).div(percent(100))));\n\n\n\n\n\n        //\n\n        //                   percentageToTeam\n\n        //  teamTokens = ----------------------- * totalTokens\n\n        //                   percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensTeam,\n\n            totalTokens.mul(percentageToTeam).div(percent(100))));\n\n\n\n        REAL.changeController(realController);\n\n\n\n        Finalized();\n",
                    "message": "REALCrowdsale.finalize (DevTokensHolderMock.sol#1134-1207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": 1235,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n\n        return REAL.totalSupply();\n",
                    "message": "REALCrowdsale.tokensIssued (DevTokensHolderMock.sol#1233-1235) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (DevTokensHolderMock.sol#1261-1274) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": 1280,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n\n        paused = true;\n",
                    "message": "REALCrowdsale.pauseContribution (DevTokensHolderMock.sol#1278-1280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": 1285,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n\n        paused = false;\n",
                    "message": "REALCrowdsale.resumeContribution (DevTokensHolderMock.sol#1283-1285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1357,
                    "vulnerability_to_line": 1377,
                    "vulnerability_code": "    function collectTokens() public onlyOwner {\n\n        uint256 balance = real.balanceOf(address(this));\n\n        uint256 total = collectedTokens.add(balance);\n\n\n\n        uint256 finalizedTime = contribution.finalizedTime();\n\n\n\n        require(finalizedTime > 0 && getTime() > finalizedTime.add(months(6)));\n\n\n\n        uint256 canExtract = total.mul(getTime().sub(finalizedTime)).div(months(24));\n\n\n\n        canExtract = canExtract.sub(collectedTokens);\n\n\n\n        if (canExtract > balance) {\n\n            canExtract = balance;\n\n        }\n\n\n\n        collectedTokens = collectedTokens.add(canExtract);\n\n        assert(real.transfer(owner, canExtract));\n\n\n\n        TokensWithdrawn(owner, canExtract);\n",
                    "message": "DevTokensHolder.collectTokens (DevTokensHolderMock.sol#1357-1377) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1396,
                    "vulnerability_to_line": 1407,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        require(_token != address(real));\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "DevTokensHolder.claimTokens (DevTokensHolderMock.sol#1396-1407) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1432,
                    "vulnerability_to_line": 1434,
                    "vulnerability_code": "    function setMockedTime(uint _t) {\n\n        mock_time = _t;\n",
                    "message": "DevTokensHolderMock.setMockedTime (DevTokensHolderMock.sol#1432-1434) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in DevTokensHolderMock.sol:\n\t- pragma solidity^0.4.11 (DevTokensHolderMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.11 (DevTokensHolderMock.sol#608): it allows old versions\n\t- pragma solidity^0.4.11 (DevTokensHolderMock.sol#648): it allows old versions\n\t- pragma solidity^0.4.11 (DevTokensHolderMock.sol#706): it allows old versions\n\t- pragma solidity^0.4.11 (DevTokensHolderMock.sol#755): it allows old versions\n\t- pragma solidity^0.4.11 (DevTokensHolderMock.sol#1297): it allows old versions\n\t- pragma solidity^0.4.11 (DevTokensHolderMock.sol#1415): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": "Function 'Controlled.Controlled' (DevTokensHolderMock.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": "Parameter '_newController' of Controlled.changeController (DevTokensHolderMock.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "    function MiniMeToken(\n\n        address _tokenFactory,\n\n        address _parentToken,\n\n        uint _parentSnapShotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) {\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n\n        name = _tokenName;                                 // Set the name\n\n        decimals = _decimalUnits;                          // Set the decimals\n\n        symbol = _tokenSymbol;                             // Set the symbol\n\n        parentToken = MiniMeToken(_parentToken);\n\n        parentSnapShotBlock = _parentSnapShotBlock;\n\n        transfersEnabled = _transfersEnabled;\n\n        creationBlock = block.number;\n",
                    "message": "Function 'MiniMeToken.MiniMeToken' (DevTokensHolderMock.sol#144-161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenFactory,\n",
                    "message": "Parameter '_tokenFactory' of MiniMeToken.MiniMeToken (DevTokensHolderMock.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeToken.MiniMeToken (DevTokensHolderMock.sol#146) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _parentSnapShotBlock,\n",
                    "message": "Parameter '_parentSnapShotBlock' of MiniMeToken.MiniMeToken (DevTokensHolderMock.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeToken.MiniMeToken (DevTokensHolderMock.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeToken.MiniMeToken (DevTokensHolderMock.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeToken.MiniMeToken (DevTokensHolderMock.sol#150) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.MiniMeToken (DevTokensHolderMock.sol#151) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_to' of MiniMeToken.transfer (DevTokensHolderMock.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.transfer (DevTokensHolderMock.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.transferFrom (DevTokensHolderMock.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.transferFrom (DevTokensHolderMock.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.transferFrom (DevTokensHolderMock.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.doTransfer (DevTokensHolderMock.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.doTransfer (DevTokensHolderMock.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.doTransfer (DevTokensHolderMock.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOf (DevTokensHolderMock.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_spender' of MiniMeToken.approve (DevTokensHolderMock.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.approve (DevTokensHolderMock.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_owner' of MiniMeToken.allowance (DevTokensHolderMock.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_spender' of MiniMeToken.allowance (DevTokensHolderMock.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_spender' of MiniMeToken.approveAndCall (DevTokensHolderMock.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_amount' of MiniMeToken.approveAndCall (DevTokensHolderMock.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_extraData' of MiniMeToken.approveAndCall (DevTokensHolderMock.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOfAt (DevTokensHolderMock.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.balanceOfAt (DevTokensHolderMock.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.totalSupplyAt (DevTokensHolderMock.sol#349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenName,\n",
                    "message": "Parameter '_cloneTokenName' of MiniMeToken.createCloneToken (DevTokensHolderMock.sol#385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _cloneDecimalUnits,\n",
                    "message": "Parameter '_cloneDecimalUnits' of MiniMeToken.createCloneToken (DevTokensHolderMock.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenSymbol,\n",
                    "message": "Parameter '_cloneTokenSymbol' of MiniMeToken.createCloneToken (DevTokensHolderMock.sol#387) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeToken.createCloneToken (DevTokensHolderMock.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.createCloneToken (DevTokensHolderMock.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.generateTokens (DevTokensHolderMock.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.generateTokens (DevTokensHolderMock.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.destroyTokens (DevTokensHolderMock.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.destroyTokens (DevTokensHolderMock.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.enableTransfers (DevTokensHolderMock.sol#452) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": "Parameter '_block' of MiniMeToken.getValueAt (DevTokensHolderMock.sol#464) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n",
                    "message": "Parameter '_value' of MiniMeToken.updateValueAtNow (DevTokensHolderMock.sol#491) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": "Parameter '_addr' of MiniMeToken.isContract (DevTokensHolderMock.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": "Parameter '_token' of MiniMeToken.claimTokens (DevTokensHolderMock.sol#537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeTokenFactory.createCloneToken (DevTokensHolderMock.sol#584) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeTokenFactory.createCloneToken (DevTokensHolderMock.sol#585) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeTokenFactory.createCloneToken (DevTokensHolderMock.sol#586) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeTokenFactory.createCloneToken (DevTokensHolderMock.sol#587) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeTokenFactory.createCloneToken (DevTokensHolderMock.sol#588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeTokenFactory.createCloneToken (DevTokensHolderMock.sol#589) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": 627,
                    "vulnerability_code": "    function Owned() {\n\n        owner = msg.sender;\n",
                    "message": "Function 'Owned.Owned' (DevTokensHolderMock.sol#625-627) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Owned.changeOwner (DevTokensHolderMock.sol#634) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 932,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _th) public payable notPaused initialized contributionOpen returns (bool) {\n",
                    "message": "Parameter '_th' of REALCrowdsale.proxyPayment (DevTokensHolderMock.sol#932) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onTransfer (DevTokensHolderMock.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onTransfer (DevTokensHolderMock.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onTransfer (DevTokensHolderMock.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onApprove (DevTokensHolderMock.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onApprove (DevTokensHolderMock.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onApprove (DevTokensHolderMock.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": 851,
                    "vulnerability_code": "    function REALCrowdsale() {\n\n        paused = false;\n",
                    "message": "Function 'REALCrowdsale.REALCrowdsale' (DevTokensHolderMock.sol#849-851) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _real,\n",
                    "message": "Parameter '_real' of REALCrowdsale.initialize (DevTokensHolderMock.sol#864) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 865,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _realController,\n",
                    "message": "Parameter '_realController' of REALCrowdsale.initialize (DevTokensHolderMock.sol#865) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _startBlock,\n",
                    "message": "Parameter '_startBlock' of REALCrowdsale.initialize (DevTokensHolderMock.sol#866) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endBlock,\n",
                    "message": "Parameter '_endBlock' of REALCrowdsale.initialize (DevTokensHolderMock.sol#867) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destEthTeam,\n",
                    "message": "Parameter '_destEthTeam' of REALCrowdsale.initialize (DevTokensHolderMock.sol#868) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensReserve,\n",
                    "message": "Parameter '_destTokensReserve' of REALCrowdsale.initialize (DevTokensHolderMock.sol#869) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensTeam,\n",
                    "message": "Parameter '_destTokensTeam' of REALCrowdsale.initialize (DevTokensHolderMock.sol#870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensBounties\n",
                    "message": "Parameter '_destTokensBounties' of REALCrowdsale.initialize (DevTokensHolderMock.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_th' of REALCrowdsale.setGuaranteedAddress (DevTokensHolderMock.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_limit' of REALCrowdsale.setGuaranteedAddress (DevTokensHolderMock.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyNormal(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyNormal (DevTokensHolderMock.sol#952) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyGuaranteed(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyGuaranteed (DevTokensHolderMock.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.doBuy (DevTokensHolderMock.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_toFund' of REALCrowdsale.doBuy (DevTokensHolderMock.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_guaranteed' of REALCrowdsale.doBuy (DevTokensHolderMock.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": "Parameter '_sender' of REALCrowdsale.isContract (DevTokensHolderMock.sol#1216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of REALCrowdsale.claimTokens (DevTokensHolderMock.sol#1261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public fundingLimit = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.fundingLimit' (DevTokensHolderMock.sol#789) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 790,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public failSafeLimit = 200000 ether;\n",
                    "message": "Constant 'REALCrowdsale.failSafeLimit' (DevTokensHolderMock.sol#790) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 791,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGuaranteedLimit = 30000 ether;\n",
                    "message": "Constant 'REALCrowdsale.maxGuaranteedLimit' (DevTokensHolderMock.sol#791) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public exchangeRate = 220;\n",
                    "message": "Constant 'REALCrowdsale.exchangeRate' (DevTokensHolderMock.sol#792) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGasPrice = 50000000000;\n",
                    "message": "Constant 'REALCrowdsale.maxGasPrice' (DevTokensHolderMock.sol#793) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 794,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxCallFrequency = 100;\n",
                    "message": "Constant 'REALCrowdsale.maxCallFrequency' (DevTokensHolderMock.sol#794) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1cap = 25000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus1cap' (DevTokensHolderMock.sol#796) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1 = 25;\n",
                    "message": "Constant 'REALCrowdsale.bonus1' (DevTokensHolderMock.sol#797) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2cap = 50000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus2cap' (DevTokensHolderMock.sol#798) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 799,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2 = 20;\n",
                    "message": "Constant 'REALCrowdsale.bonus2' (DevTokensHolderMock.sol#799) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 800,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3cap = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus3cap' (DevTokensHolderMock.sol#800) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3 = 15;\n",
                    "message": "Constant 'REALCrowdsale.bonus3' (DevTokensHolderMock.sol#801) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4cap = 150000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus4cap' (DevTokensHolderMock.sol#802) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 803,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4 = 5;\n",
                    "message": "Constant 'REALCrowdsale.bonus4' (DevTokensHolderMock.sol#803) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 805,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MiniMeToken public REAL;\n",
                    "message": "Variable 'REALCrowdsale.REAL' (DevTokensHolderMock.sol#805) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": 1354,
                    "vulnerability_code": "    function DevTokensHolder(address _owner, address _contribution, address _real) {\n\n        owner = _owner;\n\n        contribution = REALCrowdsale(_contribution);\n\n        real = MiniMeToken(_real);\n",
                    "message": "Function 'DevTokensHolder.DevTokensHolder' (DevTokensHolderMock.sol#1350-1354) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function DevTokensHolder(address _owner, address _contribution, address _real) {\n",
                    "message": "Parameter '_owner' of DevTokensHolder.DevTokensHolder (DevTokensHolderMock.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function DevTokensHolder(address _owner, address _contribution, address _real) {\n",
                    "message": "Parameter '_contribution' of DevTokensHolder.DevTokensHolder (DevTokensHolderMock.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function DevTokensHolder(address _owner, address _contribution, address _real) {\n",
                    "message": "Parameter '_real' of DevTokensHolder.DevTokensHolder (DevTokensHolderMock.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of DevTokensHolder.claimTokens (DevTokensHolderMock.sol#1396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1423,
                    "vulnerability_to_line": 1426,
                    "vulnerability_code": "    function DevTokensHolderMock(address _owner, address _contribution, address _real)\n\n    DevTokensHolder(_owner, _contribution, _real) {\n\n        mock_time = now;\n",
                    "message": "Function 'DevTokensHolderMock.DevTokensHolderMock' (DevTokensHolderMock.sol#1423-1426) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMockedTime(uint _t) {\n",
                    "message": "Parameter '_t' of DevTokensHolderMock.setMockedTime (DevTokensHolderMock.sol#1432) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1421,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint mock_time;\n",
                    "message": "Variable 'DevTokensHolderMock.mock_time' (DevTokensHolderMock.sol#1421) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalCollected() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBlockNumber() internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (max > min) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function initialize(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 1217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return tx.origin != _sender;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function () public payable notPaused {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MiniMeToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ()  payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Owned() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function acceptOwnership() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALCrowdsale() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function DevTokensHolder(address _owner, address _contribution, address _real) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function DevTokensHolderMock(address _owner, address _contribution, address _real)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMockedTime(uint _t) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Checkpoint[] totalSupplyHistory;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 collectedTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    REALCrowdsale contribution;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MiniMeToken real;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1421,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint mock_time;\n",
                    "message": null
                }
            ]
        }
    },
    "real_contract-master/contracts/mocks/REALMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "           require((_to != 0) && (_to != address(this)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_78"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": "MiniMeToken.balances (REALMock.sol#113) is never initialized. It is used in:\n\t- doTransfer (REALMock.sol#206-244)\n\t- balanceOfAt (REALMock.sol#323-344)\n\t- generateTokens (REALMock.sol#416-426)\n\t- destroyTokens (REALMock.sol#433-443)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract (REALMock.sol#507-514) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\n\n        // Alerts the token controller of the approve function call\n\n        if (isContract(controller)) {\n\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n\n        }\n\n\n\n        allowed[msg.sender][_spender] = _amount;\n\n        Approval(msg.sender, _spender, _amount);\n\n        return true;\n",
                    "message": "Reentrancy in MiniMeToken.approve (REALMock.sol#258-275):\n\tExternal calls:\n\t- require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (REALMock.sol#269)\n\tState variables written after the call(s):\n\t- allowed (REALMock.sol#272)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (REALMock.sol#537-547) does not use the value returned by external calls:\n\t-token.transfer(controller,balance) (REALMock.sol#545)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint min = 0;\n",
                    "message": "MiniMeToken.getValueAt.min (local variable @ REALMock.sol#474) shadows:\n\t- MiniMeToken.min (function @ REALMock.sol#517-519)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract uses assembly (REALMock.sol#507-514)\n\t- REALMock.sol#510-513\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\n",
                    "message": "MiniMeToken.version should be constant (REALMock.sol#84)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
                    "message": "TokenController.proxyPayment (REALMock.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": "TokenController.onTransfer (REALMock.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": "TokenController.onApprove (REALMock.sol#52-53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 69,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n\n        controller = _newController;\n",
                    "message": "Controlled.changeController (REALMock.sol#67-69) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": "ApproveAndCallFallBack.receiveApproval (REALMock.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n        return doTransfer(msg.sender, _to, _amount);\n",
                    "message": "MiniMeToken.transfer (REALMock.sol#172-175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n\n    ) returns (bool success) {\n\n\n\n        // The controller of this contract can move tokens around at will,\n\n        //  this is important to recognize! Confirm that you trust the\n\n        //  controller of this contract, which in most situations should be\n\n        //  another open source smart contract or 0x0\n\n        if (msg.sender != controller) {\n\n            require(transfersEnabled);\n\n\n\n            // The standard ERC 20 transferFrom functionality\n\n            if (allowed[_from][msg.sender] < _amount) return false;\n\n            allowed[_from][msg.sender] -= _amount;\n\n        }\n\n        return doTransfer(_from, _to, _amount);\n",
                    "message": "MiniMeToken.transferFrom (REALMock.sol#183-198) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n\n    ) constant returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "MiniMeToken.allowance (REALMock.sol#282-285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n\n    ) returns (bool success) {\n\n        require(approve(_spender, _amount));\n\n\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n\n            msg.sender,\n\n            _amount,\n\n            this,\n\n            _extraData\n\n        );\n\n\n\n        return true;\n",
                    "message": "MiniMeToken.approveAndCall (REALMock.sol#294-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "    function createCloneToken(\n\n        string _cloneTokenName,\n\n        uint8 _cloneDecimalUnits,\n\n        string _cloneTokenSymbol,\n\n        uint _snapshotBlock,\n\n        bool _transfersEnabled\n\n        ) returns(address) {\n\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n\n            this,\n\n            _snapshotBlock,\n\n            _cloneTokenName,\n\n            _cloneDecimalUnits,\n\n            _cloneTokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        cloneToken.changeController(msg.sender);\n\n\n\n        // An event to make the token easy to find on the blockchain\n\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n\n        return address(cloneToken);\n",
                    "message": "MiniMeToken.createCloneToken (REALMock.sol#384-406) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 426,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n\n        uint previousBalanceTo = balanceOf(_owner);\n\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n\n        Transfer(0, _owner, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.generateTokens (REALMock.sol#416-426) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": 443,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply >= _amount);\n\n        uint previousBalanceFrom = balanceOf(_owner);\n\n        require(previousBalanceFrom >= _amount);\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n\n        Transfer(_owner, 0, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.destroyTokens (REALMock.sol#433-443) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 454,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n\n        transfersEnabled = _transfersEnabled;\n",
                    "message": "MiniMeToken.enableTransfers (REALMock.sol#452-454) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "    function ()  payable {\n\n        require(isContract(controller));\n\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
                    "message": "MiniMeToken.fallback (REALMock.sol#524-527) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (REALMock.sol#537-547) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function createCloneToken(\n\n        address _parentToken,\n\n        uint _snapshotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) returns (MiniMeToken) {\n\n        MiniMeToken newToken = new MiniMeToken(\n\n            this,\n\n            _parentToken,\n\n            _snapshotBlock,\n\n            _tokenName,\n\n            _decimalUnits,\n\n            _tokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        newToken.changeController(msg.sender);\n\n        return newToken;\n",
                    "message": "MiniMeTokenFactory.createCloneToken (REALMock.sol#583-603) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": 641,
                    "vulnerability_code": "    function setMockedBlockNumber(uint _b) public {\n\n        mock_blockNumber = _b;\n",
                    "message": "REALMock.setMockedBlockNumber (REALMock.sol#639-641) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in REALMock.sol:\n\t- pragma solidity^0.4.11 (REALMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.11 (REALMock.sol#609): it allows old versions\n\t- pragma solidity^0.4.11 (REALMock.sol#627): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": "Function 'Controlled.Controlled' (REALMock.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": "Parameter '_newController' of Controlled.changeController (REALMock.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "    function MiniMeToken(\n\n        address _tokenFactory,\n\n        address _parentToken,\n\n        uint _parentSnapShotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) {\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n\n        name = _tokenName;                                 // Set the name\n\n        decimals = _decimalUnits;                          // Set the decimals\n\n        symbol = _tokenSymbol;                             // Set the symbol\n\n        parentToken = MiniMeToken(_parentToken);\n\n        parentSnapShotBlock = _parentSnapShotBlock;\n\n        transfersEnabled = _transfersEnabled;\n\n        creationBlock = block.number;\n",
                    "message": "Function 'MiniMeToken.MiniMeToken' (REALMock.sol#144-161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenFactory,\n",
                    "message": "Parameter '_tokenFactory' of MiniMeToken.MiniMeToken (REALMock.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeToken.MiniMeToken (REALMock.sol#146) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _parentSnapShotBlock,\n",
                    "message": "Parameter '_parentSnapShotBlock' of MiniMeToken.MiniMeToken (REALMock.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeToken.MiniMeToken (REALMock.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeToken.MiniMeToken (REALMock.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeToken.MiniMeToken (REALMock.sol#150) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.MiniMeToken (REALMock.sol#151) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_to' of MiniMeToken.transfer (REALMock.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.transfer (REALMock.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.transferFrom (REALMock.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.transferFrom (REALMock.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.transferFrom (REALMock.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.doTransfer (REALMock.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.doTransfer (REALMock.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.doTransfer (REALMock.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOf (REALMock.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_spender' of MiniMeToken.approve (REALMock.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.approve (REALMock.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_owner' of MiniMeToken.allowance (REALMock.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_spender' of MiniMeToken.allowance (REALMock.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_spender' of MiniMeToken.approveAndCall (REALMock.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_amount' of MiniMeToken.approveAndCall (REALMock.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_extraData' of MiniMeToken.approveAndCall (REALMock.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOfAt (REALMock.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.balanceOfAt (REALMock.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.totalSupplyAt (REALMock.sol#349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenName,\n",
                    "message": "Parameter '_cloneTokenName' of MiniMeToken.createCloneToken (REALMock.sol#385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _cloneDecimalUnits,\n",
                    "message": "Parameter '_cloneDecimalUnits' of MiniMeToken.createCloneToken (REALMock.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenSymbol,\n",
                    "message": "Parameter '_cloneTokenSymbol' of MiniMeToken.createCloneToken (REALMock.sol#387) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeToken.createCloneToken (REALMock.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.createCloneToken (REALMock.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.generateTokens (REALMock.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.generateTokens (REALMock.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.destroyTokens (REALMock.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.destroyTokens (REALMock.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.enableTransfers (REALMock.sol#452) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": "Parameter '_block' of MiniMeToken.getValueAt (REALMock.sol#464) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n",
                    "message": "Parameter '_value' of MiniMeToken.updateValueAtNow (REALMock.sol#491) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": "Parameter '_addr' of MiniMeToken.isContract (REALMock.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": "Parameter '_token' of MiniMeToken.claimTokens (REALMock.sol#537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeTokenFactory.createCloneToken (REALMock.sol#584) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeTokenFactory.createCloneToken (REALMock.sol#585) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeTokenFactory.createCloneToken (REALMock.sol#586) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeTokenFactory.createCloneToken (REALMock.sol#587) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeTokenFactory.createCloneToken (REALMock.sol#588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeTokenFactory.createCloneToken (REALMock.sol#589) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": 622,
                    "vulnerability_code": "    function REAL(address _tokenFactory)\n\n            MiniMeToken(\n\n                _tokenFactory,\n\n                0x0,                         // no parent token\n\n                0,                           // no snapshot block number from parent\n\n                \"Real Estate Asset Ledger\",  // Token name\n\n                18,                          // Decimals\n\n                \"REAL\",                      // Symbol\n\n                true                         // Enable transfers\n",
                    "message": "Function 'REAL.REAL' (REALMock.sol#613-622) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 633,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALMock(address _tokenFactory) REAL(_tokenFactory) {}\n",
                    "message": "Function 'REALMock.REALMock' (REALMock.sol#633) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMockedBlockNumber(uint _b) public {\n",
                    "message": "Parameter '_b' of REALMock.setMockedBlockNumber (REALMock.sol#639) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 643,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint mock_blockNumber = 1;\n",
                    "message": "Variable 'REALMock.mock_blockNumber' (REALMock.sol#643) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 635,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBlockNumber() internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (max > min) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 627,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MiniMeToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ()  payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REAL(address _tokenFactory)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 633,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALMock(address _tokenFactory) REAL(_tokenFactory) {}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Checkpoint[] totalSupplyHistory;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 643,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint mock_blockNumber = 1;\n",
                    "message": null
                }
            ]
        }
    },
    "real_contract-master/contracts/mocks/TeamTokensHolderMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "           require((_to != 0) && (_to != address(this)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(getBlockNumber() >= startBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                getBlockNumber() <= endBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                finalizedBlock == 0 &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address(REAL) != 0x0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(finalizedTime > 0 && getTime() > finalizedTime.add(months(6)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_17"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": "MiniMeToken.balances (TeamTokensHolderMock.sol#113) is never initialized. It is used in:\n\t- doTransfer (TeamTokensHolderMock.sol#206-244)\n\t- balanceOfAt (TeamTokensHolderMock.sol#323-344)\n\t- generateTokens (TeamTokensHolderMock.sol#416-426)\n\t- destroyTokens (TeamTokensHolderMock.sol#433-443)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract (TeamTokensHolderMock.sol#507-514) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\n\n        // Alerts the token controller of the approve function call\n\n        if (isContract(controller)) {\n\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n\n        }\n\n\n\n        allowed[msg.sender][_spender] = _amount;\n\n        Approval(msg.sender, _spender, _amount);\n\n        return true;\n",
                    "message": "Reentrancy in MiniMeToken.approve (TeamTokensHolderMock.sol#258-275):\n\tExternal calls:\n\t- require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (TeamTokensHolderMock.sol#269)\n\tState variables written after the call(s):\n\t- allowed (TeamTokensHolderMock.sol#272)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": 1378,
                    "vulnerability_code": "    function collectTokens() public onlyOwner {\n\n        uint256 balance = real.balanceOf(address(this));\n\n        uint256 total = collectedTokens.add(balance);\n\n\n\n        uint256 finalizedTime = crowdsale.finalizedTime();\n\n\n\n        require(finalizedTime > 0 && getTime() > finalizedTime.add(months(6)));\n\n\n\n        uint256 canExtract = total.mul(getTime().sub(finalizedTime)).div(months(24));\n\n\n\n        canExtract = canExtract.sub(collectedTokens);\n\n\n\n        if (canExtract > balance) {\n\n            canExtract = balance;\n\n        }\n\n\n\n        collectedTokens = collectedTokens.add(canExtract);\n\n        assert(real.transfer(owner, canExtract));\n\n\n\n        TokensWithdrawn(owner, canExtract);\n",
                    "message": "Reentrancy in TeamTokensHolder.collectTokens (TeamTokensHolderMock.sol#1358-1378):\n\tExternal calls:\n\t- balance = real.balanceOf(address(this)) (TeamTokensHolderMock.sol#1359)\n\t- finalizedTime = crowdsale.finalizedTime() (TeamTokensHolderMock.sol#1362)\n\tState variables written after the call(s):\n\t- collectedTokens (TeamTokensHolderMock.sol#1374)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (TeamTokensHolderMock.sol#537-547) does not use the value returned by external calls:\n\t-token.transfer(controller,balance) (TeamTokensHolderMock.sol#545)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (TeamTokensHolderMock.sol#1261-1274) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (TeamTokensHolderMock.sol#1272)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": 1408,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        require(_token != address(real));\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "TeamTokensHolder.claimTokens (TeamTokensHolderMock.sol#1397-1408) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (TeamTokensHolderMock.sol#1406)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint min = 0;\n",
                    "message": "MiniMeToken.getValueAt.min (local variable @ TeamTokensHolderMock.sol#474) shadows:\n\t- MiniMeToken.min (function @ TeamTokensHolderMock.sol#517-519)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "Reentrancy in REALCrowdsale.initialize (TeamTokensHolderMock.sol#863-900):\n\tExternal calls:\n\t- require(bool)(REAL.totalSupply() == 0) (TeamTokensHolderMock.sol#877)\n\t- require(bool)(REAL.controller() == address(this)) (TeamTokensHolderMock.sol#878)\n\t- require(bool)(REAL.decimals() == 18) (TeamTokensHolderMock.sol#879)\n\tState variables written after the call(s):\n\t- destEthTeam (TeamTokensHolderMock.sol#890)\n\t- destTokensBounties (TeamTokensHolderMock.sol#899)\n\t- destTokensReserve (TeamTokensHolderMock.sol#893)\n\t- destTokensTeam (TeamTokensHolderMock.sol#896)\n\t- endBlock (TeamTokensHolderMock.sol#887)\n\t- realController (TeamTokensHolderMock.sol#882)\n\t- startBlock (TeamTokensHolderMock.sol#886)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract uses assembly (TeamTokensHolderMock.sol#507-514)\n\t- TeamTokensHolderMock.sol#510-513\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalSupply;\n",
                    "message": "ERC20Token.totalSupply should be constant (TeamTokensHolderMock.sol#719)\nMiniMeToken.version should be constant (TeamTokensHolderMock.sol#84)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": 946,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onTransfer (TeamTokensHolderMock.sol#944-946) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": "TokenController.onTransfer (TeamTokensHolderMock.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": "TokenController.onApprove (TeamTokensHolderMock.sol#52-53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": 950,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onApprove (TeamTokensHolderMock.sol#948-950) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": 69,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n\n        controller = _newController;\n",
                    "message": "Controlled.changeController (TeamTokensHolderMock.sol#67-69) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": "ApproveAndCallFallBack.receiveApproval (TeamTokensHolderMock.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n        return doTransfer(msg.sender, _to, _amount);\n",
                    "message": "MiniMeToken.transfer (TeamTokensHolderMock.sol#172-175) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n\n    ) returns (bool success) {\n\n\n\n        // The controller of this contract can move tokens around at will,\n\n        //  this is important to recognize! Confirm that you trust the\n\n        //  controller of this contract, which in most situations should be\n\n        //  another open source smart contract or 0x0\n\n        if (msg.sender != controller) {\n\n            require(transfersEnabled);\n\n\n\n            // The standard ERC 20 transferFrom functionality\n\n            if (allowed[_from][msg.sender] < _amount) return false;\n\n            allowed[_from][msg.sender] -= _amount;\n\n        }\n\n        return doTransfer(_from, _to, _amount);\n",
                    "message": "MiniMeToken.transferFrom (TeamTokensHolderMock.sol#183-198) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n\n    ) constant returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "MiniMeToken.allowance (TeamTokensHolderMock.sol#282-285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n\n    ) returns (bool success) {\n\n        require(approve(_spender, _amount));\n\n\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n\n            msg.sender,\n\n            _amount,\n\n            this,\n\n            _extraData\n\n        );\n\n\n\n        return true;\n",
                    "message": "MiniMeToken.approveAndCall (TeamTokensHolderMock.sol#294-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "    function createCloneToken(\n\n        string _cloneTokenName,\n\n        uint8 _cloneDecimalUnits,\n\n        string _cloneTokenSymbol,\n\n        uint _snapshotBlock,\n\n        bool _transfersEnabled\n\n        ) returns(address) {\n\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n\n            this,\n\n            _snapshotBlock,\n\n            _cloneTokenName,\n\n            _cloneDecimalUnits,\n\n            _cloneTokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        cloneToken.changeController(msg.sender);\n\n\n\n        // An event to make the token easy to find on the blockchain\n\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n\n        return address(cloneToken);\n",
                    "message": "MiniMeToken.createCloneToken (TeamTokensHolderMock.sol#384-406) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 426,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n\n        uint previousBalanceTo = balanceOf(_owner);\n\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n\n        Transfer(0, _owner, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.generateTokens (TeamTokensHolderMock.sol#416-426) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": 443,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply >= _amount);\n\n        uint previousBalanceFrom = balanceOf(_owner);\n\n        require(previousBalanceFrom >= _amount);\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n\n        Transfer(_owner, 0, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.destroyTokens (TeamTokensHolderMock.sol#433-443) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 454,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n\n        transfersEnabled = _transfersEnabled;\n",
                    "message": "MiniMeToken.enableTransfers (TeamTokensHolderMock.sol#452-454) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "    function ()  payable {\n\n        require(isContract(controller));\n\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
                    "message": "MiniMeToken.fallback (TeamTokensHolderMock.sol#524-527) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (TeamTokensHolderMock.sol#537-547) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function createCloneToken(\n\n        address _parentToken,\n\n        uint _snapshotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) returns (MiniMeToken) {\n\n        MiniMeToken newToken = new MiniMeToken(\n\n            this,\n\n            _parentToken,\n\n            _snapshotBlock,\n\n            _tokenName,\n\n            _decimalUnits,\n\n            _tokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        newToken.changeController(msg.sender);\n\n        return newToken;\n",
                    "message": "MiniMeTokenFactory.createCloneToken (TeamTokensHolderMock.sol#583-603) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": 636,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n\n        newOwner = _newOwner;\n",
                    "message": "Owned.changeOwner (TeamTokensHolderMock.sol#634-636) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": 643,
                    "vulnerability_code": "    function acceptOwnership() {\n\n        if (msg.sender == newOwner) {\n\n            owner = newOwner;\n\n        }\n",
                    "message": "Owned.acceptOwnership (TeamTokensHolderMock.sol#639-643) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": "ERC20Token.balanceOf (TeamTokensHolderMock.sol#723) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transfer (TeamTokensHolderMock.sol#729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transferFrom (TeamTokensHolderMock.sol#736) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.approve (TeamTokensHolderMock.sol#742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": "ERC20Token.allowance (TeamTokensHolderMock.sol#747) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "REALCrowdsale.initialize (TeamTokensHolderMock.sol#863-900) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": 915,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n\n        require(getBlockNumber() < startBlock);\n\n        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n\n        guaranteedBuyersLimit[_th] = _limit;\n\n        reservedGuaranteed = reservedGuaranteed + _limit;\n\n        GuaranteedAddress(_th, _limit);\n",
                    "message": "REALCrowdsale.setGuaranteedAddress (TeamTokensHolderMock.sol#909-915) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": 921,
                    "vulnerability_code": "    function () public payable notPaused {\n\n        proxyPayment(msg.sender);\n",
                    "message": "REALCrowdsale.fallback (TeamTokensHolderMock.sol#919-921) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1134,
                    "vulnerability_to_line": 1207,
                    "vulnerability_code": "    function finalize() public initialized {\n\n        require(getBlockNumber() >= startBlock);\n\n        require(msg.sender == owner || getBlockNumber() > endBlock);\n\n        require(finalizedBlock == 0);\n\n\n\n        // Allow premature finalization if final limit is reached\n\n        if (getBlockNumber() <= endBlock) {\n\n            require(totalNormalCollected >= fundingLimit);\n\n        }\n\n\n\n        finalizedBlock = getBlockNumber();\n\n        finalizedTime = now;\n\n\n\n        uint256 percentageToTeam = percent(20);\n\n\n\n        uint256 percentageToContributors = percent(51);\n\n\n\n        uint256 percentageToReserve = percent(15);\n\n\n\n        uint256 percentageToBounties = percent(14);\n\n\n\n\n\n        // REAL.totalSupply() -> Tokens minted during the contribution\n\n        //  totalTokens  -> Total tokens that should be after the allocation\n\n        //                   of devTokens and reserve\n\n        //  percentageToContributors -> Which percentage should go to the\n\n        //                               contribution participants\n\n        //                               (x per 10**18 format)\n\n        //  percent(100) -> 100% in (x per 10**18 format)\n\n        //\n\n        //                       percentageToContributors\n\n        //  REAL.totalSupply() = -------------------------- * totalTokens  =>\n\n        //                             percent(100)\n\n        //\n\n        //\n\n        //                            percent(100)\n\n        //  =>  totalTokens = ---------------------------- * REAL.totalSupply()\n\n        //                      percentageToContributors\n\n        //\n\n        uint256 totalTokens = REAL.totalSupply().mul(percent(100)).div(percentageToContributors);\n\n\n\n\n\n        //\n\n        //                    percentageToBounties\n\n        //  bountiesTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensBounties,\n\n            totalTokens.mul(percentageToBounties).div(percent(100))));\n\n\n\n        //\n\n        //                    percentageToReserve\n\n        //  reserveTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensReserve,\n\n            totalTokens.mul(percentageToReserve).div(percent(100))));\n\n\n\n\n\n        //\n\n        //                   percentageToTeam\n\n        //  teamTokens = ----------------------- * totalTokens\n\n        //                   percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensTeam,\n\n            totalTokens.mul(percentageToTeam).div(percent(100))));\n\n\n\n        REAL.changeController(realController);\n\n\n\n        Finalized();\n",
                    "message": "REALCrowdsale.finalize (TeamTokensHolderMock.sol#1134-1207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": 1235,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n\n        return REAL.totalSupply();\n",
                    "message": "REALCrowdsale.tokensIssued (TeamTokensHolderMock.sol#1233-1235) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (TeamTokensHolderMock.sol#1261-1274) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": 1280,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n\n        paused = true;\n",
                    "message": "REALCrowdsale.pauseContribution (TeamTokensHolderMock.sol#1278-1280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": 1285,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n\n        paused = false;\n",
                    "message": "REALCrowdsale.resumeContribution (TeamTokensHolderMock.sol#1283-1285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": 1378,
                    "vulnerability_code": "    function collectTokens() public onlyOwner {\n\n        uint256 balance = real.balanceOf(address(this));\n\n        uint256 total = collectedTokens.add(balance);\n\n\n\n        uint256 finalizedTime = crowdsale.finalizedTime();\n\n\n\n        require(finalizedTime > 0 && getTime() > finalizedTime.add(months(6)));\n\n\n\n        uint256 canExtract = total.mul(getTime().sub(finalizedTime)).div(months(24));\n\n\n\n        canExtract = canExtract.sub(collectedTokens);\n\n\n\n        if (canExtract > balance) {\n\n            canExtract = balance;\n\n        }\n\n\n\n        collectedTokens = collectedTokens.add(canExtract);\n\n        assert(real.transfer(owner, canExtract));\n\n\n\n        TokensWithdrawn(owner, canExtract);\n",
                    "message": "TeamTokensHolder.collectTokens (TeamTokensHolderMock.sol#1358-1378) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": 1408,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        require(_token != address(real));\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "TeamTokensHolder.claimTokens (TeamTokensHolderMock.sol#1397-1408) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1428,
                    "vulnerability_to_line": 1430,
                    "vulnerability_code": "    function setMockedDate(uint256 date) public {\n\n        mock_date = date;\n",
                    "message": "TeamTokensHolderMock.setMockedDate (TeamTokensHolderMock.sol#1428-1430) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in TeamTokensHolderMock.sol:\n\t- pragma solidity^0.4.11 (TeamTokensHolderMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.11 (TeamTokensHolderMock.sol#608): it allows old versions\n\t- pragma solidity^0.4.11 (TeamTokensHolderMock.sol#648): it allows old versions\n\t- pragma solidity^0.4.11 (TeamTokensHolderMock.sol#706): it allows old versions\n\t- pragma solidity^0.4.11 (TeamTokensHolderMock.sol#755): it allows old versions\n\t- pragma solidity^0.4.11 (TeamTokensHolderMock.sol#1297): it allows old versions\n\t- pragma solidity^0.4.11 (TeamTokensHolderMock.sol#1416): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": "Function 'Controlled.Controlled' (TeamTokensHolderMock.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": "Parameter '_newController' of Controlled.changeController (TeamTokensHolderMock.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "    function MiniMeToken(\n\n        address _tokenFactory,\n\n        address _parentToken,\n\n        uint _parentSnapShotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) {\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n\n        name = _tokenName;                                 // Set the name\n\n        decimals = _decimalUnits;                          // Set the decimals\n\n        symbol = _tokenSymbol;                             // Set the symbol\n\n        parentToken = MiniMeToken(_parentToken);\n\n        parentSnapShotBlock = _parentSnapShotBlock;\n\n        transfersEnabled = _transfersEnabled;\n\n        creationBlock = block.number;\n",
                    "message": "Function 'MiniMeToken.MiniMeToken' (TeamTokensHolderMock.sol#144-161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenFactory,\n",
                    "message": "Parameter '_tokenFactory' of MiniMeToken.MiniMeToken (TeamTokensHolderMock.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeToken.MiniMeToken (TeamTokensHolderMock.sol#146) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _parentSnapShotBlock,\n",
                    "message": "Parameter '_parentSnapShotBlock' of MiniMeToken.MiniMeToken (TeamTokensHolderMock.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeToken.MiniMeToken (TeamTokensHolderMock.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeToken.MiniMeToken (TeamTokensHolderMock.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeToken.MiniMeToken (TeamTokensHolderMock.sol#150) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.MiniMeToken (TeamTokensHolderMock.sol#151) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_to' of MiniMeToken.transfer (TeamTokensHolderMock.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.transfer (TeamTokensHolderMock.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.transferFrom (TeamTokensHolderMock.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.transferFrom (TeamTokensHolderMock.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.transferFrom (TeamTokensHolderMock.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.doTransfer (TeamTokensHolderMock.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.doTransfer (TeamTokensHolderMock.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.doTransfer (TeamTokensHolderMock.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOf (TeamTokensHolderMock.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_spender' of MiniMeToken.approve (TeamTokensHolderMock.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.approve (TeamTokensHolderMock.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_owner' of MiniMeToken.allowance (TeamTokensHolderMock.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_spender' of MiniMeToken.allowance (TeamTokensHolderMock.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_spender' of MiniMeToken.approveAndCall (TeamTokensHolderMock.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_amount' of MiniMeToken.approveAndCall (TeamTokensHolderMock.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_extraData' of MiniMeToken.approveAndCall (TeamTokensHolderMock.sol#294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOfAt (TeamTokensHolderMock.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.balanceOfAt (TeamTokensHolderMock.sol#323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.totalSupplyAt (TeamTokensHolderMock.sol#349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenName,\n",
                    "message": "Parameter '_cloneTokenName' of MiniMeToken.createCloneToken (TeamTokensHolderMock.sol#385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _cloneDecimalUnits,\n",
                    "message": "Parameter '_cloneDecimalUnits' of MiniMeToken.createCloneToken (TeamTokensHolderMock.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenSymbol,\n",
                    "message": "Parameter '_cloneTokenSymbol' of MiniMeToken.createCloneToken (TeamTokensHolderMock.sol#387) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeToken.createCloneToken (TeamTokensHolderMock.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.createCloneToken (TeamTokensHolderMock.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.generateTokens (TeamTokensHolderMock.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.generateTokens (TeamTokensHolderMock.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.destroyTokens (TeamTokensHolderMock.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.destroyTokens (TeamTokensHolderMock.sol#433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.enableTransfers (TeamTokensHolderMock.sol#452) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": "Parameter '_block' of MiniMeToken.getValueAt (TeamTokensHolderMock.sol#464) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n",
                    "message": "Parameter '_value' of MiniMeToken.updateValueAtNow (TeamTokensHolderMock.sol#491) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": "Parameter '_addr' of MiniMeToken.isContract (TeamTokensHolderMock.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": "Parameter '_token' of MiniMeToken.claimTokens (TeamTokensHolderMock.sol#537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeTokenFactory.createCloneToken (TeamTokensHolderMock.sol#584) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeTokenFactory.createCloneToken (TeamTokensHolderMock.sol#585) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeTokenFactory.createCloneToken (TeamTokensHolderMock.sol#586) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeTokenFactory.createCloneToken (TeamTokensHolderMock.sol#587) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeTokenFactory.createCloneToken (TeamTokensHolderMock.sol#588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeTokenFactory.createCloneToken (TeamTokensHolderMock.sol#589) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": 627,
                    "vulnerability_code": "    function Owned() {\n\n        owner = msg.sender;\n",
                    "message": "Function 'Owned.Owned' (TeamTokensHolderMock.sol#625-627) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Owned.changeOwner (TeamTokensHolderMock.sol#634) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 932,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _th) public payable notPaused initialized contributionOpen returns (bool) {\n",
                    "message": "Parameter '_th' of REALCrowdsale.proxyPayment (TeamTokensHolderMock.sol#932) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onTransfer (TeamTokensHolderMock.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onTransfer (TeamTokensHolderMock.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onTransfer (TeamTokensHolderMock.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onApprove (TeamTokensHolderMock.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onApprove (TeamTokensHolderMock.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onApprove (TeamTokensHolderMock.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": 851,
                    "vulnerability_code": "    function REALCrowdsale() {\n\n        paused = false;\n",
                    "message": "Function 'REALCrowdsale.REALCrowdsale' (TeamTokensHolderMock.sol#849-851) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _real,\n",
                    "message": "Parameter '_real' of REALCrowdsale.initialize (TeamTokensHolderMock.sol#864) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 865,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _realController,\n",
                    "message": "Parameter '_realController' of REALCrowdsale.initialize (TeamTokensHolderMock.sol#865) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _startBlock,\n",
                    "message": "Parameter '_startBlock' of REALCrowdsale.initialize (TeamTokensHolderMock.sol#866) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endBlock,\n",
                    "message": "Parameter '_endBlock' of REALCrowdsale.initialize (TeamTokensHolderMock.sol#867) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destEthTeam,\n",
                    "message": "Parameter '_destEthTeam' of REALCrowdsale.initialize (TeamTokensHolderMock.sol#868) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensReserve,\n",
                    "message": "Parameter '_destTokensReserve' of REALCrowdsale.initialize (TeamTokensHolderMock.sol#869) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensTeam,\n",
                    "message": "Parameter '_destTokensTeam' of REALCrowdsale.initialize (TeamTokensHolderMock.sol#870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensBounties\n",
                    "message": "Parameter '_destTokensBounties' of REALCrowdsale.initialize (TeamTokensHolderMock.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_th' of REALCrowdsale.setGuaranteedAddress (TeamTokensHolderMock.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_limit' of REALCrowdsale.setGuaranteedAddress (TeamTokensHolderMock.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyNormal(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyNormal (TeamTokensHolderMock.sol#952) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyGuaranteed(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyGuaranteed (TeamTokensHolderMock.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.doBuy (TeamTokensHolderMock.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_toFund' of REALCrowdsale.doBuy (TeamTokensHolderMock.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_guaranteed' of REALCrowdsale.doBuy (TeamTokensHolderMock.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": "Parameter '_sender' of REALCrowdsale.isContract (TeamTokensHolderMock.sol#1216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of REALCrowdsale.claimTokens (TeamTokensHolderMock.sol#1261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public fundingLimit = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.fundingLimit' (TeamTokensHolderMock.sol#789) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 790,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public failSafeLimit = 200000 ether;\n",
                    "message": "Constant 'REALCrowdsale.failSafeLimit' (TeamTokensHolderMock.sol#790) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 791,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGuaranteedLimit = 30000 ether;\n",
                    "message": "Constant 'REALCrowdsale.maxGuaranteedLimit' (TeamTokensHolderMock.sol#791) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public exchangeRate = 220;\n",
                    "message": "Constant 'REALCrowdsale.exchangeRate' (TeamTokensHolderMock.sol#792) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGasPrice = 50000000000;\n",
                    "message": "Constant 'REALCrowdsale.maxGasPrice' (TeamTokensHolderMock.sol#793) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 794,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxCallFrequency = 100;\n",
                    "message": "Constant 'REALCrowdsale.maxCallFrequency' (TeamTokensHolderMock.sol#794) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1cap = 25000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus1cap' (TeamTokensHolderMock.sol#796) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1 = 25;\n",
                    "message": "Constant 'REALCrowdsale.bonus1' (TeamTokensHolderMock.sol#797) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2cap = 50000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus2cap' (TeamTokensHolderMock.sol#798) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 799,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2 = 20;\n",
                    "message": "Constant 'REALCrowdsale.bonus2' (TeamTokensHolderMock.sol#799) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 800,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3cap = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus3cap' (TeamTokensHolderMock.sol#800) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3 = 15;\n",
                    "message": "Constant 'REALCrowdsale.bonus3' (TeamTokensHolderMock.sol#801) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4cap = 150000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus4cap' (TeamTokensHolderMock.sol#802) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 803,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4 = 5;\n",
                    "message": "Constant 'REALCrowdsale.bonus4' (TeamTokensHolderMock.sol#803) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 805,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MiniMeToken public REAL;\n",
                    "message": "Variable 'REALCrowdsale.REAL' (TeamTokensHolderMock.sol#805) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": 1354,
                    "vulnerability_code": "    function TeamTokensHolder(address _owner, address _crowdsale, address _real) {\n\n        owner = _owner;\n\n        crowdsale = REALCrowdsale(_crowdsale);\n\n        real = MiniMeToken(_real);\n",
                    "message": "Function 'TeamTokensHolder.TeamTokensHolder' (TeamTokensHolderMock.sol#1350-1354) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function TeamTokensHolder(address _owner, address _crowdsale, address _real) {\n",
                    "message": "Parameter '_owner' of TeamTokensHolder.TeamTokensHolder (TeamTokensHolderMock.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function TeamTokensHolder(address _owner, address _crowdsale, address _real) {\n",
                    "message": "Parameter '_crowdsale' of TeamTokensHolder.TeamTokensHolder (TeamTokensHolderMock.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function TeamTokensHolder(address _owner, address _crowdsale, address _real) {\n",
                    "message": "Parameter '_real' of TeamTokensHolder.TeamTokensHolder (TeamTokensHolderMock.sol#1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of TeamTokensHolder.claimTokens (TeamTokensHolderMock.sol#1397) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1422,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function TeamTokensHolderMock(address _owner, address _crowdsale, address _real) TeamTokensHolder(_owner, _crowdsale, _real) {}\n",
                    "message": "Function 'TeamTokensHolderMock.TeamTokensHolderMock' (TeamTokensHolderMock.sol#1422) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 mock_date = now;\n",
                    "message": "Variable 'TeamTokensHolderMock.mock_date' (TeamTokensHolderMock.sol#1432) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalCollected() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBlockNumber() internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (max > min) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function initialize(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 1217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return tx.origin != _sender;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function () public payable notPaused {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MiniMeToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ()  payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Owned() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function acceptOwnership() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALCrowdsale() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function TeamTokensHolder(address _owner, address _crowdsale, address _real) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1422,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function TeamTokensHolderMock(address _owner, address _crowdsale, address _real) TeamTokensHolder(_owner, _crowdsale, _real) {}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Checkpoint[] totalSupplyHistory;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 collectedTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    REALCrowdsale crowdsale;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MiniMeToken real;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 mock_date = now;\n",
                    "message": null
                }
            ]
        }
    },
    "real_contract-master/contracts/mocks/REALCrowdsaleMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "           require((_to != 0) && (_to != address(this)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(getBlockNumber() >= startBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                getBlockNumber() <= endBlock &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                finalizedBlock == 0 &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                address(REAL) != 0x0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_KILL_OOM"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": "MiniMeToken.balances (REALCrowdsaleMock.sol#153) is never initialized. It is used in:\n\t- doTransfer (REALCrowdsaleMock.sol#246-284)\n\t- balanceOfAt (REALCrowdsaleMock.sol#363-384)\n\t- generateTokens (REALCrowdsaleMock.sol#456-466)\n\t- destroyTokens (REALCrowdsaleMock.sol#473-483)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": 554,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract (REALCrowdsaleMock.sol#547-554) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\n\n        // Alerts the token controller of the approve function call\n\n        if (isContract(controller)) {\n\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n\n        }\n\n\n\n        allowed[msg.sender][_spender] = _amount;\n\n        Approval(msg.sender, _spender, _amount);\n\n        return true;\n",
                    "message": "Reentrancy in MiniMeToken.approve (REALCrowdsaleMock.sol#298-315):\n\tExternal calls:\n\t- require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (REALCrowdsaleMock.sol#309)\n\tState variables written after the call(s):\n\t- allowed (REALCrowdsaleMock.sol#312)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": 587,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (REALCrowdsaleMock.sol#577-587) does not use the value returned by external calls:\n\t-token.transfer(controller,balance) (REALCrowdsaleMock.sol#585)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (REALCrowdsaleMock.sol#1261-1274) does not use the value returned by external calls:\n\t-token.transfer(owner,balance) (REALCrowdsaleMock.sol#1272)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 514,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint min = 0;\n",
                    "message": "MiniMeToken.getValueAt.min (local variable @ REALCrowdsaleMock.sol#514) shadows:\n\t- MiniMeToken.min (function @ REALCrowdsaleMock.sol#557-559)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "Reentrancy in REALCrowdsale.initialize (REALCrowdsaleMock.sol#863-900):\n\tExternal calls:\n\t- require(bool)(REAL.totalSupply() == 0) (REALCrowdsaleMock.sol#877)\n\t- require(bool)(REAL.controller() == address(this)) (REALCrowdsaleMock.sol#878)\n\t- require(bool)(REAL.decimals() == 18) (REALCrowdsaleMock.sol#879)\n\tState variables written after the call(s):\n\t- destEthTeam (REALCrowdsaleMock.sol#890)\n\t- destTokensBounties (REALCrowdsaleMock.sol#899)\n\t- destTokensReserve (REALCrowdsaleMock.sol#893)\n\t- destTokensTeam (REALCrowdsaleMock.sol#896)\n\t- endBlock (REALCrowdsaleMock.sol#887)\n\t- realController (REALCrowdsaleMock.sol#882)\n\t- startBlock (REALCrowdsaleMock.sol#886)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": 554,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n\n        uint size;\n\n        if (_addr == 0) return false;\n\n        assembly {\n\n            size := extcodesize(_addr)\n\n        }\n\n        return size>0;\n",
                    "message": "MiniMeToken.isContract uses assembly (REALCrowdsaleMock.sol#547-554)\n\t- REALCrowdsaleMock.sol#550-553\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalSupply;\n",
                    "message": "ERC20Token.totalSupply should be constant (REALCrowdsaleMock.sol#719)\nMiniMeToken.version should be constant (REALCrowdsaleMock.sol#124)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": 31,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n\n        newOwner = _newOwner;\n",
                    "message": "Owned.changeOwner (REALCrowdsaleMock.sol#29-31) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "    function acceptOwnership() {\n\n        if (msg.sender == newOwner) {\n\n            owner = newOwner;\n\n        }\n",
                    "message": "Owned.acceptOwnership (REALCrowdsaleMock.sol#34-38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": 946,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onTransfer (REALCrowdsaleMock.sol#944-946) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": "TokenController.onTransfer (REALCrowdsaleMock.sol#84) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 93,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": "TokenController.onApprove (REALCrowdsaleMock.sol#92-93) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": 950,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n\n        return false;\n",
                    "message": "REALCrowdsale.onApprove (REALCrowdsaleMock.sol#948-950) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 109,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n\n        controller = _newController;\n",
                    "message": "Controlled.changeController (REALCrowdsaleMock.sol#107-109) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": "ApproveAndCallFallBack.receiveApproval (REALCrowdsaleMock.sol#113) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n\n        require(transfersEnabled);\n\n        return doTransfer(msg.sender, _to, _amount);\n",
                    "message": "MiniMeToken.transfer (REALCrowdsaleMock.sol#212-215) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": 238,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n\n    ) returns (bool success) {\n\n\n\n        // The controller of this contract can move tokens around at will,\n\n        //  this is important to recognize! Confirm that you trust the\n\n        //  controller of this contract, which in most situations should be\n\n        //  another open source smart contract or 0x0\n\n        if (msg.sender != controller) {\n\n            require(transfersEnabled);\n\n\n\n            // The standard ERC 20 transferFrom functionality\n\n            if (allowed[_from][msg.sender] < _amount) return false;\n\n            allowed[_from][msg.sender] -= _amount;\n\n        }\n\n        return doTransfer(_from, _to, _amount);\n",
                    "message": "MiniMeToken.transferFrom (REALCrowdsaleMock.sol#223-238) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": 325,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n\n    ) constant returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "MiniMeToken.allowance (REALCrowdsaleMock.sol#322-325) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": 346,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n\n    ) returns (bool success) {\n\n        require(approve(_spender, _amount));\n\n\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n\n            msg.sender,\n\n            _amount,\n\n            this,\n\n            _extraData\n\n        );\n\n\n\n        return true;\n",
                    "message": "MiniMeToken.approveAndCall (REALCrowdsaleMock.sol#334-346) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": 446,
                    "vulnerability_code": "    function createCloneToken(\n\n        string _cloneTokenName,\n\n        uint8 _cloneDecimalUnits,\n\n        string _cloneTokenSymbol,\n\n        uint _snapshotBlock,\n\n        bool _transfersEnabled\n\n        ) returns(address) {\n\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n\n            this,\n\n            _snapshotBlock,\n\n            _cloneTokenName,\n\n            _cloneDecimalUnits,\n\n            _cloneTokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        cloneToken.changeController(msg.sender);\n\n\n\n        // An event to make the token easy to find on the blockchain\n\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n\n        return address(cloneToken);\n",
                    "message": "MiniMeToken.createCloneToken (REALCrowdsaleMock.sol#424-446) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": 466,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n\n        uint previousBalanceTo = balanceOf(_owner);\n\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n\n        Transfer(0, _owner, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.generateTokens (REALCrowdsaleMock.sol#456-466) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": 483,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n\n    ) onlyController returns (bool) {\n\n        uint curTotalSupply = totalSupply();\n\n        require(curTotalSupply >= _amount);\n\n        uint previousBalanceFrom = balanceOf(_owner);\n\n        require(previousBalanceFrom >= _amount);\n\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n\n        Transfer(_owner, 0, _amount);\n\n        return true;\n",
                    "message": "MiniMeToken.destroyTokens (REALCrowdsaleMock.sol#473-483) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n\n        transfersEnabled = _transfersEnabled;\n",
                    "message": "MiniMeToken.enableTransfers (REALCrowdsaleMock.sol#492-494) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": 567,
                    "vulnerability_code": "    function ()  payable {\n\n        require(isContract(controller));\n\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n",
                    "message": "MiniMeToken.fallback (REALCrowdsaleMock.sol#564-567) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": 587,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n\n        if (_token == 0x0) {\n\n            controller.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        MiniMeToken token = MiniMeToken(_token);\n\n        uint balance = token.balanceOf(this);\n\n        token.transfer(controller, balance);\n\n        ClaimedTokens(_token, controller, balance);\n",
                    "message": "MiniMeToken.claimTokens (REALCrowdsaleMock.sol#577-587) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": 643,
                    "vulnerability_code": "    function createCloneToken(\n\n        address _parentToken,\n\n        uint _snapshotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) returns (MiniMeToken) {\n\n        MiniMeToken newToken = new MiniMeToken(\n\n            this,\n\n            _parentToken,\n\n            _snapshotBlock,\n\n            _tokenName,\n\n            _decimalUnits,\n\n            _tokenSymbol,\n\n            _transfersEnabled\n\n            );\n\n\n\n        newToken.changeController(msg.sender);\n\n        return newToken;\n",
                    "message": "MiniMeTokenFactory.createCloneToken (REALCrowdsaleMock.sol#623-643) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": "ERC20Token.balanceOf (REALCrowdsaleMock.sol#723) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transfer (REALCrowdsaleMock.sol#729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.transferFrom (REALCrowdsaleMock.sol#736) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": "ERC20Token.approve (REALCrowdsaleMock.sol#742) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": "ERC20Token.allowance (REALCrowdsaleMock.sol#747) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": 900,
                    "vulnerability_code": "    function initialize(\n\n        address _real,\n\n        address _realController,\n\n        uint256 _startBlock,\n\n        uint256 _endBlock,\n\n        address _destEthTeam,\n\n        address _destTokensReserve,\n\n        address _destTokensTeam,\n\n        address _destTokensBounties\n\n    ) public onlyOwner {\n\n        // Initialize only once\n\n        require(address(REAL) == 0x0);\n\n\n\n        REAL = MiniMeToken(_real);\n\n        require(REAL.totalSupply() == 0);\n\n        require(REAL.controller() == address(this));\n\n        require(REAL.decimals() == 18);  // Same amount of decimals as ETH\n\n\n\n        require(_realController != 0x0);\n\n        realController = _realController;\n\n\n\n        require(_startBlock >= getBlockNumber());\n\n        require(_startBlock < _endBlock);\n\n        startBlock = _startBlock;\n\n        endBlock = _endBlock;\n\n\n\n        require(_destEthTeam != 0x0);\n\n        destEthTeam = _destEthTeam;\n\n\n\n        require(_destTokensReserve != 0x0);\n\n        destTokensReserve = _destTokensReserve;\n\n\n\n        require(_destTokensTeam != 0x0);\n\n        destTokensTeam = _destTokensTeam;\n\n\n\n        require(_destTokensBounties != 0x0);\n\n        destTokensBounties = _destTokensBounties;\n",
                    "message": "REALCrowdsale.initialize (REALCrowdsaleMock.sol#863-900) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": 915,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n\n        require(getBlockNumber() < startBlock);\n\n        require(_limit > 0 && _limit <= maxGuaranteedLimit);\n\n        guaranteedBuyersLimit[_th] = _limit;\n\n        reservedGuaranteed = reservedGuaranteed + _limit;\n\n        GuaranteedAddress(_th, _limit);\n",
                    "message": "REALCrowdsale.setGuaranteedAddress (REALCrowdsaleMock.sol#909-915) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": 921,
                    "vulnerability_code": "    function () public payable notPaused {\n\n        proxyPayment(msg.sender);\n",
                    "message": "REALCrowdsale.fallback (REALCrowdsaleMock.sol#919-921) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1134,
                    "vulnerability_to_line": 1207,
                    "vulnerability_code": "    function finalize() public initialized {\n\n        require(getBlockNumber() >= startBlock);\n\n        require(msg.sender == owner || getBlockNumber() > endBlock);\n\n        require(finalizedBlock == 0);\n\n\n\n        // Allow premature finalization if final limit is reached\n\n        if (getBlockNumber() <= endBlock) {\n\n            require(totalNormalCollected >= fundingLimit);\n\n        }\n\n\n\n        finalizedBlock = getBlockNumber();\n\n        finalizedTime = now;\n\n\n\n        uint256 percentageToTeam = percent(20);\n\n\n\n        uint256 percentageToContributors = percent(51);\n\n\n\n        uint256 percentageToReserve = percent(15);\n\n\n\n        uint256 percentageToBounties = percent(14);\n\n\n\n\n\n        // REAL.totalSupply() -> Tokens minted during the contribution\n\n        //  totalTokens  -> Total tokens that should be after the allocation\n\n        //                   of devTokens and reserve\n\n        //  percentageToContributors -> Which percentage should go to the\n\n        //                               contribution participants\n\n        //                               (x per 10**18 format)\n\n        //  percent(100) -> 100% in (x per 10**18 format)\n\n        //\n\n        //                       percentageToContributors\n\n        //  REAL.totalSupply() = -------------------------- * totalTokens  =>\n\n        //                             percent(100)\n\n        //\n\n        //\n\n        //                            percent(100)\n\n        //  =>  totalTokens = ---------------------------- * REAL.totalSupply()\n\n        //                      percentageToContributors\n\n        //\n\n        uint256 totalTokens = REAL.totalSupply().mul(percent(100)).div(percentageToContributors);\n\n\n\n\n\n        //\n\n        //                    percentageToBounties\n\n        //  bountiesTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensBounties,\n\n            totalTokens.mul(percentageToBounties).div(percent(100))));\n\n\n\n        //\n\n        //                    percentageToReserve\n\n        //  reserveTokens = ----------------------- * totalTokens\n\n        //                      percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensReserve,\n\n            totalTokens.mul(percentageToReserve).div(percent(100))));\n\n\n\n\n\n        //\n\n        //                   percentageToTeam\n\n        //  teamTokens = ----------------------- * totalTokens\n\n        //                   percentage(100)\n\n        //\n\n        assert(REAL.generateTokens(\n\n            destTokensTeam,\n\n            totalTokens.mul(percentageToTeam).div(percent(100))));\n\n\n\n        REAL.changeController(realController);\n\n\n\n        Finalized();\n",
                    "message": "REALCrowdsale.finalize (REALCrowdsaleMock.sol#1134-1207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": 1235,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n\n        return REAL.totalSupply();\n",
                    "message": "REALCrowdsale.tokensIssued (REALCrowdsaleMock.sol#1233-1235) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n\n        if (REAL.controller() == address(this)) {\n\n            REAL.claimTokens(_token);\n\n        }\n\n        if (_token == 0x0) {\n\n            owner.transfer(this.balance);\n\n            return;\n\n        }\n\n\n\n        ERC20Token token = ERC20Token(_token);\n\n        uint256 balance = token.balanceOf(this);\n\n        token.transfer(owner, balance);\n\n        ClaimedTokens(_token, owner, balance);\n",
                    "message": "REALCrowdsale.claimTokens (REALCrowdsaleMock.sol#1261-1274) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": 1280,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n\n        paused = true;\n",
                    "message": "REALCrowdsale.pauseContribution (REALCrowdsaleMock.sol#1278-1280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": 1285,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n\n        paused = false;\n",
                    "message": "REALCrowdsale.resumeContribution (REALCrowdsaleMock.sol#1283-1285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1309,
                    "vulnerability_to_line": 1311,
                    "vulnerability_code": "    function setMockedBlockNumber(uint _b) public {\n\n        mock_blockNumber = _b;\n",
                    "message": "REALCrowdsaleMock.setMockedBlockNumber (REALCrowdsaleMock.sol#1309-1311) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": "Detected issues with version pragma in REALCrowdsaleMock.sol:\n\t- pragma solidity^0.4.11 (REALCrowdsaleMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.11 (REALCrowdsaleMock.sol#43): it allows old versions\n\t- pragma solidity^0.4.11 (REALCrowdsaleMock.sol#648): it allows old versions\n\t- pragma solidity^0.4.11 (REALCrowdsaleMock.sol#706): it allows old versions\n\t- pragma solidity^0.4.11 (REALCrowdsaleMock.sol#755): it allows old versions\n\t- pragma solidity^0.4.11 (REALCrowdsaleMock.sol#1297): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 22,
                    "vulnerability_code": "    function Owned() {\n\n        owner = msg.sender;\n",
                    "message": "Function 'Owned.Owned' (REALCrowdsaleMock.sol#20-22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Owned.changeOwner (REALCrowdsaleMock.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": "Function 'Controlled.Controlled' (REALCrowdsaleMock.sol#103) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": "Parameter '_newController' of Controlled.changeController (REALCrowdsaleMock.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": 201,
                    "vulnerability_code": "    function MiniMeToken(\n\n        address _tokenFactory,\n\n        address _parentToken,\n\n        uint _parentSnapShotBlock,\n\n        string _tokenName,\n\n        uint8 _decimalUnits,\n\n        string _tokenSymbol,\n\n        bool _transfersEnabled\n\n    ) {\n\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n\n        name = _tokenName;                                 // Set the name\n\n        decimals = _decimalUnits;                          // Set the decimals\n\n        symbol = _tokenSymbol;                             // Set the symbol\n\n        parentToken = MiniMeToken(_parentToken);\n\n        parentSnapShotBlock = _parentSnapShotBlock;\n\n        transfersEnabled = _transfersEnabled;\n\n        creationBlock = block.number;\n",
                    "message": "Function 'MiniMeToken.MiniMeToken' (REALCrowdsaleMock.sol#184-201) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenFactory,\n",
                    "message": "Parameter '_tokenFactory' of MiniMeToken.MiniMeToken (REALCrowdsaleMock.sol#185) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeToken.MiniMeToken (REALCrowdsaleMock.sol#186) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _parentSnapShotBlock,\n",
                    "message": "Parameter '_parentSnapShotBlock' of MiniMeToken.MiniMeToken (REALCrowdsaleMock.sol#187) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeToken.MiniMeToken (REALCrowdsaleMock.sol#188) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeToken.MiniMeToken (REALCrowdsaleMock.sol#189) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeToken.MiniMeToken (REALCrowdsaleMock.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.MiniMeToken (REALCrowdsaleMock.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_to' of MiniMeToken.transfer (REALCrowdsaleMock.sol#212) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.transfer (REALCrowdsaleMock.sol#212) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.transferFrom (REALCrowdsaleMock.sol#223) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.transferFrom (REALCrowdsaleMock.sol#223) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.transferFrom (REALCrowdsaleMock.sol#223) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_from' of MiniMeToken.doTransfer (REALCrowdsaleMock.sol#246) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_to' of MiniMeToken.doTransfer (REALCrowdsaleMock.sol#246) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doTransfer(address _from, address _to, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.doTransfer (REALCrowdsaleMock.sol#246) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOf (REALCrowdsaleMock.sol#288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_spender' of MiniMeToken.approve (REALCrowdsaleMock.sol#298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": "Parameter '_amount' of MiniMeToken.approve (REALCrowdsaleMock.sol#298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_owner' of MiniMeToken.allowance (REALCrowdsaleMock.sol#322) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": "Parameter '_spender' of MiniMeToken.allowance (REALCrowdsaleMock.sol#322) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_spender' of MiniMeToken.approveAndCall (REALCrowdsaleMock.sol#334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_amount' of MiniMeToken.approveAndCall (REALCrowdsaleMock.sol#334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": "Parameter '_extraData' of MiniMeToken.approveAndCall (REALCrowdsaleMock.sol#334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_owner' of MiniMeToken.balanceOfAt (REALCrowdsaleMock.sol#363) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.balanceOfAt (REALCrowdsaleMock.sol#363) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": "Parameter '_blockNumber' of MiniMeToken.totalSupplyAt (REALCrowdsaleMock.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenName,\n",
                    "message": "Parameter '_cloneTokenName' of MiniMeToken.createCloneToken (REALCrowdsaleMock.sol#425) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _cloneDecimalUnits,\n",
                    "message": "Parameter '_cloneDecimalUnits' of MiniMeToken.createCloneToken (REALCrowdsaleMock.sol#426) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _cloneTokenSymbol,\n",
                    "message": "Parameter '_cloneTokenSymbol' of MiniMeToken.createCloneToken (REALCrowdsaleMock.sol#427) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeToken.createCloneToken (REALCrowdsaleMock.sol#428) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.createCloneToken (REALCrowdsaleMock.sol#429) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.generateTokens (REALCrowdsaleMock.sol#456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.generateTokens (REALCrowdsaleMock.sol#456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_owner' of MiniMeToken.destroyTokens (REALCrowdsaleMock.sol#473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": "Parameter '_amount' of MiniMeToken.destroyTokens (REALCrowdsaleMock.sol#473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeToken.enableTransfers (REALCrowdsaleMock.sol#492) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": "Parameter '_block' of MiniMeToken.getValueAt (REALCrowdsaleMock.sol#504) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n",
                    "message": "Parameter '_value' of MiniMeToken.updateValueAtNow (REALCrowdsaleMock.sol#531) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": "Parameter '_addr' of MiniMeToken.isContract (REALCrowdsaleMock.sol#547) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": "Parameter '_token' of MiniMeToken.claimTokens (REALCrowdsaleMock.sol#577) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _parentToken,\n",
                    "message": "Parameter '_parentToken' of MiniMeTokenFactory.createCloneToken (REALCrowdsaleMock.sol#624) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _snapshotBlock,\n",
                    "message": "Parameter '_snapshotBlock' of MiniMeTokenFactory.createCloneToken (REALCrowdsaleMock.sol#625) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 626,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenName,\n",
                    "message": "Parameter '_tokenName' of MiniMeTokenFactory.createCloneToken (REALCrowdsaleMock.sol#626) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 627,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimalUnits,\n",
                    "message": "Parameter '_decimalUnits' of MiniMeTokenFactory.createCloneToken (REALCrowdsaleMock.sol#627) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 628,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string _tokenSymbol,\n",
                    "message": "Parameter '_tokenSymbol' of MiniMeTokenFactory.createCloneToken (REALCrowdsaleMock.sol#628) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 629,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _transfersEnabled\n",
                    "message": "Parameter '_transfersEnabled' of MiniMeTokenFactory.createCloneToken (REALCrowdsaleMock.sol#629) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 932,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _th) public payable notPaused initialized contributionOpen returns (bool) {\n",
                    "message": "Parameter '_th' of REALCrowdsale.proxyPayment (REALCrowdsaleMock.sol#932) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onTransfer (REALCrowdsaleMock.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onTransfer (REALCrowdsaleMock.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onTransfer (REALCrowdsaleMock.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '' of REALCrowdsale.onApprove (REALCrowdsaleMock.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of REALCrowdsale.onApprove (REALCrowdsaleMock.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address, address, uint256) public returns (bool) {\n",
                    "message": "Parameter '_scope_1' of REALCrowdsale.onApprove (REALCrowdsaleMock.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": 851,
                    "vulnerability_code": "    function REALCrowdsale() {\n\n        paused = false;\n",
                    "message": "Function 'REALCrowdsale.REALCrowdsale' (REALCrowdsaleMock.sol#849-851) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _real,\n",
                    "message": "Parameter '_real' of REALCrowdsale.initialize (REALCrowdsaleMock.sol#864) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 865,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _realController,\n",
                    "message": "Parameter '_realController' of REALCrowdsale.initialize (REALCrowdsaleMock.sol#865) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _startBlock,\n",
                    "message": "Parameter '_startBlock' of REALCrowdsale.initialize (REALCrowdsaleMock.sol#866) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endBlock,\n",
                    "message": "Parameter '_endBlock' of REALCrowdsale.initialize (REALCrowdsaleMock.sol#867) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destEthTeam,\n",
                    "message": "Parameter '_destEthTeam' of REALCrowdsale.initialize (REALCrowdsaleMock.sol#868) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensReserve,\n",
                    "message": "Parameter '_destTokensReserve' of REALCrowdsale.initialize (REALCrowdsaleMock.sol#869) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensTeam,\n",
                    "message": "Parameter '_destTokensTeam' of REALCrowdsale.initialize (REALCrowdsaleMock.sol#870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _destTokensBounties\n",
                    "message": "Parameter '_destTokensBounties' of REALCrowdsale.initialize (REALCrowdsaleMock.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_th' of REALCrowdsale.setGuaranteedAddress (REALCrowdsaleMock.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": "Parameter '_limit' of REALCrowdsale.setGuaranteedAddress (REALCrowdsaleMock.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyNormal(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyNormal (REALCrowdsaleMock.sol#952) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyGuaranteed(address _th) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.buyGuaranteed (REALCrowdsaleMock.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_th' of REALCrowdsale.doBuy (REALCrowdsaleMock.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_toFund' of REALCrowdsale.doBuy (REALCrowdsaleMock.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function doBuy(address _th, uint256 _toFund, bool _guaranteed) internal {\n",
                    "message": "Parameter '_guaranteed' of REALCrowdsale.doBuy (REALCrowdsaleMock.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": "Parameter '_sender' of REALCrowdsale.isContract (REALCrowdsaleMock.sol#1216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of REALCrowdsale.claimTokens (REALCrowdsaleMock.sol#1261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public fundingLimit = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.fundingLimit' (REALCrowdsaleMock.sol#789) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 790,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public failSafeLimit = 200000 ether;\n",
                    "message": "Constant 'REALCrowdsale.failSafeLimit' (REALCrowdsaleMock.sol#790) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 791,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGuaranteedLimit = 30000 ether;\n",
                    "message": "Constant 'REALCrowdsale.maxGuaranteedLimit' (REALCrowdsaleMock.sol#791) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public exchangeRate = 220;\n",
                    "message": "Constant 'REALCrowdsale.exchangeRate' (REALCrowdsaleMock.sol#792) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxGasPrice = 50000000000;\n",
                    "message": "Constant 'REALCrowdsale.maxGasPrice' (REALCrowdsaleMock.sol#793) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 794,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public maxCallFrequency = 100;\n",
                    "message": "Constant 'REALCrowdsale.maxCallFrequency' (REALCrowdsaleMock.sol#794) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1cap = 25000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus1cap' (REALCrowdsaleMock.sol#796) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus1 = 25;\n",
                    "message": "Constant 'REALCrowdsale.bonus1' (REALCrowdsaleMock.sol#797) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2cap = 50000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus2cap' (REALCrowdsaleMock.sol#798) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 799,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus2 = 20;\n",
                    "message": "Constant 'REALCrowdsale.bonus2' (REALCrowdsaleMock.sol#799) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 800,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3cap = 100000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus3cap' (REALCrowdsaleMock.sol#800) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 801,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus3 = 15;\n",
                    "message": "Constant 'REALCrowdsale.bonus3' (REALCrowdsaleMock.sol#801) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4cap = 150000 ether;\n",
                    "message": "Constant 'REALCrowdsale.bonus4cap' (REALCrowdsaleMock.sol#802) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 803,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant public bonus4 = 5;\n",
                    "message": "Constant 'REALCrowdsale.bonus4' (REALCrowdsaleMock.sol#803) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 805,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MiniMeToken public REAL;\n",
                    "message": "Variable 'REALCrowdsale.REAL' (REALCrowdsaleMock.sol#805) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALCrowdsaleMock() REALCrowdsale() {}\n",
                    "message": "Function 'REALCrowdsaleMock.REALCrowdsaleMock' (REALCrowdsaleMock.sol#1303) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMockedBlockNumber(uint _b) public {\n",
                    "message": "Parameter '_b' of REALCrowdsaleMock.setMockedBlockNumber (REALCrowdsaleMock.sol#1309) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint mock_blockNumber = 1;\n",
                    "message": "Variable 'REALCrowdsaleMock.mock_blockNumber' (REALCrowdsaleMock.sol#1313) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _addr) constant internal returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address _sender) constant internal returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokensIssued() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalCollected() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBlockNumber() internal constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBlockNumber() internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (max > min) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function initialize(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGuaranteedAddress(address _th, uint256 _limit) public initialized onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.11;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 1217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return tx.origin != _sender;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function () public payable notPaused {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Owned() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOwner(address _newOwner) onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function acceptOwnership() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proxyPayment(address _owner) payable returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onApprove(address _owner, address _spender, uint _amount)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Controlled() { controller = msg.sender;}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeController(address _newController) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MiniMeToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _amount) returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOfAt(address _owner, uint _blockNumber) constant\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyTokens(address _owner, uint _amount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enableTransfers(bool _transfersEnabled) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ()  payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimTokens(address _token) onlyController {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCloneToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) returns (bool success);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALCrowdsale() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pauseContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function resumeContribution() onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function REALCrowdsaleMock() REALCrowdsale() {}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Checkpoint[]) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Checkpoint[] totalSupplyHistory;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint mock_blockNumber = 1;\n",
                    "message": null
                }
            ]
        }
    }
}