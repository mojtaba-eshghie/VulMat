{
    "xswap-326a3246b327cd2b8481fd8c22fe8d864e43b0da/contracts/XSwapProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _implementation, bytes memory _data) public AdminUpgradeabilityProxy(_implementation, msg.sender, _data) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_30"
            ],
            "vulnerability_findings": [
                {
                    "name": "controlled-delegatecall",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "  constructor(address _logic, bytes memory _data) public payable {\n\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n\n    _setImplementation(_logic);\n\n    if(_data.length > 0) {\n\n      (bool success,) = _logic.delegatecall(_data);\n\n      require(success);\n\n    }\n",
                    "message": "UpgradeabilityProxy.constructor (XSwapProxy.sol#183-190) uses delegatecall to a input-controlled function id\n\t(success) = _logic.delegatecall(_data) (XSwapProxy.sol#187)\n"
                },
                {
                    "name": "controlled-delegatecall",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\n\n    _upgradeTo(newImplementation);\n\n    (bool success,) = newImplementation.delegatecall(data);\n\n    require(success);\n",
                    "message": "BaseAdminUpgradeabilityProxy.upgradeToAndCall (XSwapProxy.sol#277-281) uses delegatecall to a input-controlled function id\n\t(success) = newImplementation.delegatecall(data) (XSwapProxy.sol#279)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "OpenZeppelinUpgradesAddress.isContract (XSwapProxy.sol#91-102) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "BaseUpgradeabilityProxy._implementation (XSwapProxy.sol#134-139) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "BaseAdminUpgradeabilityProxy._admin (XSwapProxy.sol#286-291) is declared view but contains assembly code\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\n",
                    "message": "AdminUpgradeabilityProxy.constructor._admin (local variable @ XSwapProxy.sol#333) shadows:\n\t- BaseAdminUpgradeabilityProxy._admin (function @ XSwapProxy.sol#286-291)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _implementation, bytes memory _data) public AdminUpgradeabilityProxy(_implementation, msg.sender, _data) {\n",
                    "message": "XSwapProxy.constructor._implementation (local variable @ XSwapProxy.sol#344) shadows:\n\t- BaseUpgradeabilityProxy._implementation (function @ XSwapProxy.sol#134-139)\n\t- Proxy._implementation (function @ XSwapProxy.sol#24)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 51,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize)\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize)\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize) }\n\n      default { return(0, returndatasize) }\n\n    }\n",
                    "message": "Proxy._delegate uses assembly (XSwapProxy.sol#32-51)\n\t- XSwapProxy.sol#33-50\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "OpenZeppelinUpgradesAddress.isContract uses assembly (XSwapProxy.sol#91-102)\n\t- XSwapProxy.sol#100\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "BaseUpgradeabilityProxy._implementation uses assembly (XSwapProxy.sol#134-139)\n\t- XSwapProxy.sol#136-138\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 162,
                    "vulnerability_code": "  function _setImplementation(address newImplementation) internal {\n\n    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newImplementation)\n\n    }\n",
                    "message": "BaseUpgradeabilityProxy._setImplementation uses assembly (XSwapProxy.sol#154-162)\n\t- XSwapProxy.sol#159-161\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "BaseAdminUpgradeabilityProxy._admin uses assembly (XSwapProxy.sol#286-291)\n\t- XSwapProxy.sol#288-290\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 303,
                    "vulnerability_code": "  function _setAdmin(address newAdmin) internal {\n\n    bytes32 slot = ADMIN_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newAdmin)\n\n    }\n",
                    "message": "BaseAdminUpgradeabilityProxy._setAdmin uses assembly (XSwapProxy.sol#297-303)\n\t- XSwapProxy.sol#300-302\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Different versions of Solidity is used in XSwapProxy.sol:\n\t- Version used: ['^0.5.0', '^0.5.4']\n\t- XSwapProxy.sol#3 declares pragma solidity^0.5.4\n\t- XSwapProxy.sol#73 declares pragma solidity^0.5.0\n\t- XSwapProxy.sol#107 declares pragma solidity^0.5.4\n\t- XSwapProxy.sol#167 declares pragma solidity^0.5.4\n\t- XSwapProxy.sol#195 declares pragma solidity^0.5.4\n\t- XSwapProxy.sol#316 declares pragma solidity^0.5.4\n\t- XSwapProxy.sol#341 declares pragma solidity^0.5.4\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in XSwapProxy.sol:\n\t- pragma solidity^0.5.4 (XSwapProxy.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (XSwapProxy.sol#73): it allows old versions\n\t- pragma solidity^0.5.4 (XSwapProxy.sol#107): it allows old versions\n\t- pragma solidity^0.5.4 (XSwapProxy.sol#167): it allows old versions\n\t- pragma solidity^0.5.4 (XSwapProxy.sol#195): it allows old versions\n\t- pragma solidity^0.5.4 (XSwapProxy.sol#316): it allows old versions\n\t- pragma solidity^0.5.4 (XSwapProxy.sol#341): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "  constructor(address _logic, bytes memory _data) public payable {\n\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n\n    _setImplementation(_logic);\n\n    if(_data.length > 0) {\n\n      (bool success,) = _logic.delegatecall(_data);\n\n      require(success);\n\n    }\n",
                    "message": "Low level call in UpgradeabilityProxy.constructor (XSwapProxy.sol#183-190):\n\t-(success) = _logic.delegatecall(_data) XSwapProxy.sol#187\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\n\n    _upgradeTo(newImplementation);\n\n    (bool success,) = newImplementation.delegatecall(data);\n\n    require(success);\n",
                    "message": "Low level call in BaseAdminUpgradeabilityProxy.upgradeToAndCall (XSwapProxy.sol#277-281):\n\t-(success) = newImplementation.delegatecall(data) XSwapProxy.sol#279\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address);\n",
                    "message": "Function 'Proxy._implementation' (XSwapProxy.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 51,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize)\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize)\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize) }\n\n      default { return(0, returndatasize) }\n\n    }\n",
                    "message": "Function 'Proxy._delegate' (XSwapProxy.sol#32-51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 59,
                    "vulnerability_code": "  function _willFallback() internal {\n",
                    "message": "Function 'Proxy._willFallback' (XSwapProxy.sol#58-59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 68,
                    "vulnerability_code": "  function _fallback() internal {\n\n    _willFallback();\n\n    _delegate(_implementation());\n",
                    "message": "Function 'Proxy._fallback' (XSwapProxy.sol#65-68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "Function 'BaseUpgradeabilityProxy._implementation' (XSwapProxy.sol#134-139) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "  function _upgradeTo(address newImplementation) internal {\n\n    _setImplementation(newImplementation);\n\n    emit Upgraded(newImplementation);\n",
                    "message": "Function 'BaseUpgradeabilityProxy._upgradeTo' (XSwapProxy.sol#145-148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 162,
                    "vulnerability_code": "  function _setImplementation(address newImplementation) internal {\n\n    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newImplementation)\n\n    }\n",
                    "message": "Function 'BaseUpgradeabilityProxy._setImplementation' (XSwapProxy.sol#154-162) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _logic, bytes memory _data) public payable {\n",
                    "message": "Parameter '_logic' of UpgradeabilityProxy. (XSwapProxy.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _logic, bytes memory _data) public payable {\n",
                    "message": "Parameter '_data' of UpgradeabilityProxy. (XSwapProxy.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "  function _willFallback() internal {\n\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n\n    super._willFallback();\n",
                    "message": "Function 'BaseAdminUpgradeabilityProxy._willFallback' (XSwapProxy.sol#308-311) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "Function 'BaseAdminUpgradeabilityProxy._admin' (XSwapProxy.sol#286-291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 303,
                    "vulnerability_code": "  function _setAdmin(address newAdmin) internal {\n\n    bytes32 slot = ADMIN_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newAdmin)\n\n    }\n",
                    "message": "Function 'BaseAdminUpgradeabilityProxy._setAdmin' (XSwapProxy.sol#297-303) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\n",
                    "message": "Parameter '_admin' of AdminUpgradeabilityProxy. (XSwapProxy.sol#333) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract UpgradeabilityProxy is BaseUpgradeabilityProxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    (bool success,) = newImplementation.delegatecall(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "xswap-326a3246b327cd2b8481fd8c22fe8d864e43b0da/contracts/XSwap.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tconstructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\trequire(actived == false, \"already actived.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\trequire(isOpen, \"not open\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\trequire(prices[_input][_output] != 0, \"invalid token address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\trequire(decimals[_input] != 0, \"input decimal not setteled\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\trequire(decimals[_output] != 0, \"output decimal not setteled\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\trequire(!supportLending[_token], \"the token is already supported lending\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\trequire(supportLending[_token], \"the token doesnt support lending\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\trequire(_decimals <= 18, \"not supported decimal\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\trequire(!supportLending[_token], \"the token is already supported lending\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_64"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 113,
                    "vulnerability_code": "interface NonStandardIERC20Token {\n\n    function balanceOf(address _owner) external view returns (uint);\n\n    function allowance(address _owner, address _spender) external view returns (uint);\n\n    function transfer(address _to, uint _value) external;\n\n    function transferFrom(address _from, address _to, uint _value) external;\n\n    function approve(address _spender, uint _value) external;\n",
                    "message": "NonStandardIERC20Token (XSwap.sol#107-113) has incorrect ERC20 function interface(s):\n\t-transfer (XSwap.sol#110)\n\t-transferFrom (XSwap.sol#111)\n\t-approve (XSwap.sol#112)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": 223,
                    "vulnerability_code": "\tfunction trade(address _input, address _output, uint256 _inputAmount, address _receiver) public returns (bool) {\n\n\t\trequire(isOpen, \"not open\");\n\n\t\trequire(prices[_input][_output] != 0, \"invalid token address\");\n\n\t\trequire(decimals[_input] != 0, \"input decimal not setteled\");\n\n\t\trequire(decimals[_output] != 0, \"output decimal not setteled\");\n\n\n\n\t\tNonStandardIERC20Token(_input).transferFrom(msg.sender, address(this), _inputAmount);\n\n\t\tif(supportLending[_input]) {\n\n\t\t\tif (_input == dai) {\n\n\t\t\t\tIChai(chai).join(address(this), _inputAmount);\n\n\t\t\t\tILendFMe(lendFMe).supply(chai, IERC20Token(chai).balanceOf(address(this)));\n\n\t\t\t}\n\n\t\t\telse\n\n\t\t\t\tILendFMe(lendFMe).supply(_input, _inputAmount);\n\n\t\t}\n\n\t\tuint256 _tokenAmount = normalizeToken(_input, _inputAmount).mul(prices[_input][_output]).div(OFFSET);\n\n\t\tuint256 _fee = _tokenAmount.mul(fee[_input][_output]).div(OFFSET);\n\n\t\tuint256 _amountToUser = _tokenAmount.sub(_fee);\n\n\n\n\t\tif(supportLending[_output]) {\n\n\t\t\tif (_output == dai) {\n\n\t\t\t\tILendFMe(lendFMe).withdraw(chai, _amountToUser); //assume chai / dai >= 1;\n\n\t\t\t\tIChai(chai).draw(address(this), _amountToUser);\n\n\t\t\t}\n\n\t\t\telse\n\n\t\t\t\tILendFMe(lendFMe).withdraw(_output, denormalizedToken(_output, _amountToUser));\n\n\t\t}\n\n\t\tNonStandardIERC20Token(_output).transfer(_receiver, denormalizedToken(_output, _amountToUser));\n\n\t\treturn true;\n",
                    "message": "XSwap.trade (XSwap.sol#194-223) does not use the value returned by external calls:\n\t-ILendFMe(lendFMe).supply(chai,IERC20Token(chai).balanceOf(address(this))) (XSwap.sol#204)\n\t-ILendFMe(lendFMe).supply(_input,_inputAmount) (XSwap.sol#207)\n\t-ILendFMe(lendFMe).withdraw(chai,_amountToUser) (XSwap.sol#215)\n\t-ILendFMe(lendFMe).withdraw(_output,denormalizedToken(_output,_amountToUser)) (XSwap.sol#219)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "\tfunction enableLending(address _token) public auth returns (bool) {\n\n\t\trequire(!supportLending[_token], \"the token is already supported lending\");\n\n\t\tsupportLending[_token] = true;\n\n\n\n\t\tif (_token == dai) {\n\n\t\t\tIERC20Token(_token).approve(chai, uint256(-1));\n\n\t\t\tIERC20Token(chai).approve(lendFMe, uint256(-1));\n\n\t\t}\n\n\t\telse {\n\n\t\t\tNonStandardIERC20Token(_token).approve(lendFMe, uint256(-1));\n\n\t\t}\n\n\n\n\t\tuint256 _balance = NonStandardIERC20Token(_token).balanceOf(address(this));\n\n\t\tif(_balance > 0) {\n\n\t\t\tif (_token == dai) {\n\n\t\t\t\tIChai(chai).join(address(this), _balance);\n\n\t\t\t\tILendFMe(lendFMe).supply(chai, IERC20Token(chai).balanceOf(address(this)));\n\n\t\t\t}\n\n\t\t\telse\n\n\t\t\t\tILendFMe(lendFMe).supply(_token, _balance);\n\n\t\t}\n\n\t\treturn true;\n",
                    "message": "XSwap.enableLending (XSwap.sol#235-257) does not use the value returned by external calls:\n\t-IERC20Token(_token).approve(chai,uint256(- 1)) (XSwap.sol#240)\n\t-IERC20Token(chai).approve(lendFMe,uint256(- 1)) (XSwap.sol#241)\n\t-ILendFMe(lendFMe).supply(chai,IERC20Token(chai).balanceOf(address(this))) (XSwap.sol#251)\n\t-ILendFMe(lendFMe).supply(_token,_balance) (XSwap.sol#254)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 271,
                    "vulnerability_code": "\tfunction disableLending(address _token) public auth returns (bool) {\n\n\t\trequire(supportLending[_token], \"the token doesnt support lending\");\n\n\t\tsupportLending[_token] = false;\n\n\n\n\t\tif (_token == dai) {\n\n\t\t\tILendFMe(lendFMe).withdraw(chai, uint256(-1));\n\n\t\t\tIChai(chai).exit(address(this), IERC20Token(chai).balanceOf(address(this)));\n\n\t\t}\n\n\t\telse\n\n\t\t\tILendFMe(lendFMe).withdraw(_token, uint256(-1));\n\n\n\n\t\treturn true;\n",
                    "message": "XSwap.disableLending (XSwap.sol#259-271) does not use the value returned by external calls:\n\t-ILendFMe(lendFMe).withdraw(chai,uint256(- 1)) (XSwap.sol#264)\n\t-ILendFMe(lendFMe).withdraw(_token,uint256(- 1)) (XSwap.sol#268)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 323,
                    "vulnerability_code": "\tfunction transferOut(address _token, address _receiver, uint256 _amount) external auth returns (bool) {\n\n\t\tif(supportLending[_token]) {\n\n\t\t\tif (_token == dai) {\n\n\t\t\t\tILendFMe(lendFMe).withdraw(chai, _amount);\n\n\t\t\t\tIChai(chai).draw(address(this), _amount);\n\n\t\t\t}\n\n\t\t\telse\n\n\t\t\t\tILendFMe(lendFMe).withdraw(_token, _amount);\n\n\t\t}\n\n\t\tuint256 _balance = NonStandardIERC20Token(_token).balanceOf(address(this));\n\n\t\tif(_balance >= _amount) {\n\n\t\t\tNonStandardIERC20Token(_token).transfer(_receiver, _amount);\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n",
                    "message": "XSwap.transferOut (XSwap.sol#308-323) does not use the value returned by external calls:\n\t-ILendFMe(lendFMe).withdraw(chai,_amount) (XSwap.sol#311)\n\t-ILendFMe(lendFMe).withdraw(_token,_amount) (XSwap.sol#315)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 340,
                    "vulnerability_code": "\tfunction transferOutALL(address _token, address _receiver) external auth returns (bool) {\n\n\t\tif(supportLending[_token]) {\n\n\t\t\tif (_token == dai) {\n\n\t\t\t\tILendFMe(lendFMe).withdraw(chai, uint256(-1));\n\n\t\t\t\tIChai(chai).exit(address(this), IERC20Token(chai).balanceOf(address(this)));\n\n\t\t\t}\n\n\t\t\telse\n\n\t\t\t\tILendFMe(lendFMe).withdraw(_token, uint256(-1));\n\n\t\t}\n\n\t\tuint256 _balance = NonStandardIERC20Token(_token).balanceOf(address(this));\n\n\t\tif(_balance > 0) {\n\n\t\t\tNonStandardIERC20Token(_token).transfer(_receiver, _balance);\n\n\t\t}\n\n\n\n\t\treturn true;\n",
                    "message": "XSwap.transferOutALL (XSwap.sol#325-340) does not use the value returned by external calls:\n\t-ILendFMe(lendFMe).withdraw(chai,uint256(- 1)) (XSwap.sol#328)\n\t-ILendFMe(lendFMe).withdraw(_token,uint256(- 1)) (XSwap.sol#332)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": 353,
                    "vulnerability_code": "\tfunction transferIn(address _token, uint256 _amount) external auth returns (bool) {\n\n\t\tNonStandardIERC20Token(_token).transferFrom(msg.sender, address(this), _amount);\n\n\t\tif(supportLending[_token]) {\n\n\t\t\tif (_token == dai) {\n\n\t\t\t\tIChai(chai).join(address(this), NonStandardIERC20Token(dai).balanceOf(address(this)));\n\n\t\t\t\tILendFMe(lendFMe).supply(chai, IERC20Token(chai).balanceOf(address(this)));\n\n\t\t\t}\n\n\t\t\telse\n\n\t\t\t\tILendFMe(lendFMe).supply(_token, NonStandardIERC20Token(_token).balanceOf(address(this)));\n\n\t\t}\n\n\t    return true;\n",
                    "message": "XSwap.transferIn (XSwap.sol#342-353) does not use the value returned by external calls:\n\t-ILendFMe(lendFMe).supply(chai,IERC20Token(chai).balanceOf(address(this))) (XSwap.sol#347)\n\t-ILendFMe(lendFMe).supply(_token,NonStandardIERC20Token(_token).balanceOf(address(this))) (XSwap.sol#350)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": 278,
                    "vulnerability_code": "\tfunction createPair(address _input, address _output, uint256 _priceInOut, uint256 _priceOutIn, uint256 _fee) external auth returns (bool) {\n\n\t\tsetPrices(_input, _output, _priceInOut, _priceOutIn);\n\n\t\tsetFee(_input, _output, _fee);\n\n\t\treturn true;\n",
                    "message": "Reentrancy in XSwap.createPair (XSwap.sol#274-278):\n\tExternal calls:\n\t- setPrices(_input,_output,_priceInOut,_priceOutIn) (XSwap.sol#275)\n\t- setFee(_input,_output,_fee) (XSwap.sol#276)\n\tState variables written after the call(s):\n\t- fee (XSwap.sol#276)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": 284,
                    "vulnerability_code": "\tfunction setPrices(address _input, address _output, uint256 _priceInOut, uint256 _priceOutIn) public auth returns (bool) {\n\n\t\tsetPrices(_input, _output, _priceInOut);\n\n\t\tsetPrices(_output, _input, _priceOutIn);\n\n\t\treturn true;\n",
                    "message": "Reentrancy in XSwap.setPrices (XSwap.sol#280-284):\n\tExternal calls:\n\t- setPrices(_input,_output,_priceInOut) (XSwap.sol#281)\n\t- setPrices(_output,_input,_priceOutIn) (XSwap.sol#282)\n\tState variables written after the call(s):\n\t- prices (XSwap.sol#282)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress private chai = 0x8a5C1BD4D75e168a4f65eB902c289400B90FD980;\n",
                    "message": "XSwap.chai should be constant (XSwap.sol#167)\nXSwap.dai should be constant (XSwap.sol#168)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (XSwap.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (XSwap.sol#41-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (XSwap.sol#46-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (XSwap.sol#51-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (XSwap.sol#59-65) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": 187,
                    "vulnerability_code": "\tfunction active(address _lendFMe) public {\n\n\t\trequire(actived == false, \"already actived.\");\n\n\t\towner = msg.sender;\n\n\t\tisOpen = true;\n\n\t\tlendFMe = _lendFMe;\n\n\t\tactived = true;\n",
                    "message": "XSwap.active (XSwap.sol#181-187) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": 192,
                    "vulnerability_code": "\tfunction trade(address _input, address _output, uint256 _inputAmount) public returns (bool) {\n\n\t\treturn trade(_input, _output, _inputAmount, msg.sender);\n",
                    "message": "XSwap.trade (XSwap.sol#190-192) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": 228,
                    "vulnerability_code": "\tfunction getTokenLiquidation(address _token) public view returns (uint256) {\n\n\t\tuint256 balanceInDefi = ILendFMe(lendFMe).getSupplyBalance(address(this), _token);\n\n\t\treturn balanceInDefi.add(NonStandardIERC20Token(_token).balanceOf(address(this)));\n",
                    "message": "XSwap.getTokenLiquidation (XSwap.sol#225-228) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": 233,
                    "vulnerability_code": "\tfunction setLendFMe(address _lendFMe) public auth returns (bool) {\n\n\t\tlendFMe = _lendFMe;\n\n\t\treturn true;\n",
                    "message": "XSwap.setLendFMe (XSwap.sol#230-233) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "\tfunction enableLending(address _token) public auth returns (bool) {\n\n\t\trequire(!supportLending[_token], \"the token is already supported lending\");\n\n\t\tsupportLending[_token] = true;\n\n\n\n\t\tif (_token == dai) {\n\n\t\t\tIERC20Token(_token).approve(chai, uint256(-1));\n\n\t\t\tIERC20Token(chai).approve(lendFMe, uint256(-1));\n\n\t\t}\n\n\t\telse {\n\n\t\t\tNonStandardIERC20Token(_token).approve(lendFMe, uint256(-1));\n\n\t\t}\n\n\n\n\t\tuint256 _balance = NonStandardIERC20Token(_token).balanceOf(address(this));\n\n\t\tif(_balance > 0) {\n\n\t\t\tif (_token == dai) {\n\n\t\t\t\tIChai(chai).join(address(this), _balance);\n\n\t\t\t\tILendFMe(lendFMe).supply(chai, IERC20Token(chai).balanceOf(address(this)));\n\n\t\t\t}\n\n\t\t\telse\n\n\t\t\t\tILendFMe(lendFMe).supply(_token, _balance);\n\n\t\t}\n\n\t\treturn true;\n",
                    "message": "XSwap.enableLending (XSwap.sol#235-257) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 271,
                    "vulnerability_code": "\tfunction disableLending(address _token) public auth returns (bool) {\n\n\t\trequire(supportLending[_token], \"the token doesnt support lending\");\n\n\t\tsupportLending[_token] = false;\n\n\n\n\t\tif (_token == dai) {\n\n\t\t\tILendFMe(lendFMe).withdraw(chai, uint256(-1));\n\n\t\t\tIChai(chai).exit(address(this), IERC20Token(chai).balanceOf(address(this)));\n\n\t\t}\n\n\t\telse\n\n\t\t\tILendFMe(lendFMe).withdraw(_token, uint256(-1));\n\n\n\n\t\treturn true;\n",
                    "message": "XSwap.disableLending (XSwap.sol#259-271) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 301,
                    "vulnerability_code": "\tfunction setTokenDecimals(address _token, uint256 _decimals) public auth returns (bool){\n\n\t\trequire(_decimals <= 18, \"not supported decimal\");\n\n\t\tdecimals[_token] = _decimals;\n\n\t\treturn true;\n",
                    "message": "XSwap.setTokenDecimals (XSwap.sol#297-301) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in XSwap.sol:\n\t- pragma solidity^0.5.4 (XSwap.sol#16): it allows old versions\n\t- pragma solidity^0.5.4 (XSwap.sol#96): it allows old versions\n\t- pragma solidity^0.5.4 (XSwap.sol#117): it allows old versions\n\t- pragma solidity^0.5.4 (XSwap.sol#127): it allows old versions\n\t- pragma solidity^0.5.4 (XSwap.sol#137): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction active(address _lendFMe) public {\n",
                    "message": "Parameter '_lendFMe' of XSwap.active (XSwap.sol#181) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction trade(address _input, address _output, uint256 _inputAmount) public returns (bool) {\n",
                    "message": "Parameter '_input' of XSwap.trade (XSwap.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction trade(address _input, address _output, uint256 _inputAmount) public returns (bool) {\n",
                    "message": "Parameter '_output' of XSwap.trade (XSwap.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction trade(address _input, address _output, uint256 _inputAmount) public returns (bool) {\n",
                    "message": "Parameter '_inputAmount' of XSwap.trade (XSwap.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction trade(address _input, address _output, uint256 _inputAmount, address _receiver) public returns (bool) {\n",
                    "message": "Parameter '_input' of XSwap.trade (XSwap.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction trade(address _input, address _output, uint256 _inputAmount, address _receiver) public returns (bool) {\n",
                    "message": "Parameter '_output' of XSwap.trade (XSwap.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction trade(address _input, address _output, uint256 _inputAmount, address _receiver) public returns (bool) {\n",
                    "message": "Parameter '_inputAmount' of XSwap.trade (XSwap.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction trade(address _input, address _output, uint256 _inputAmount, address _receiver) public returns (bool) {\n",
                    "message": "Parameter '_receiver' of XSwap.trade (XSwap.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction getTokenLiquidation(address _token) public view returns (uint256) {\n",
                    "message": "Parameter '_token' of XSwap.getTokenLiquidation (XSwap.sol#225) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setLendFMe(address _lendFMe) public auth returns (bool) {\n",
                    "message": "Parameter '_lendFMe' of XSwap.setLendFMe (XSwap.sol#230) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction enableLending(address _token) public auth returns (bool) {\n",
                    "message": "Parameter '_token' of XSwap.enableLending (XSwap.sol#235) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction disableLending(address _token) public auth returns (bool) {\n",
                    "message": "Parameter '_token' of XSwap.disableLending (XSwap.sol#259) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction createPair(address _input, address _output, uint256 _priceInOut, uint256 _priceOutIn, uint256 _fee) external auth returns (bool) {\n",
                    "message": "Parameter '_input' of XSwap.createPair (XSwap.sol#274) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction createPair(address _input, address _output, uint256 _priceInOut, uint256 _priceOutIn, uint256 _fee) external auth returns (bool) {\n",
                    "message": "Parameter '_output' of XSwap.createPair (XSwap.sol#274) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction createPair(address _input, address _output, uint256 _priceInOut, uint256 _priceOutIn, uint256 _fee) external auth returns (bool) {\n",
                    "message": "Parameter '_priceInOut' of XSwap.createPair (XSwap.sol#274) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction createPair(address _input, address _output, uint256 _priceInOut, uint256 _priceOutIn, uint256 _fee) external auth returns (bool) {\n",
                    "message": "Parameter '_priceOutIn' of XSwap.createPair (XSwap.sol#274) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction createPair(address _input, address _output, uint256 _priceInOut, uint256 _priceOutIn, uint256 _fee) external auth returns (bool) {\n",
                    "message": "Parameter '_fee' of XSwap.createPair (XSwap.sol#274) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setPrices(address _input, address _output, uint256 _priceInOut, uint256 _priceOutIn) public auth returns (bool) {\n",
                    "message": "Parameter '_input' of XSwap.setPrices (XSwap.sol#280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setPrices(address _input, address _output, uint256 _priceInOut, uint256 _priceOutIn) public auth returns (bool) {\n",
                    "message": "Parameter '_output' of XSwap.setPrices (XSwap.sol#280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setPrices(address _input, address _output, uint256 _priceInOut, uint256 _priceOutIn) public auth returns (bool) {\n",
                    "message": "Parameter '_priceInOut' of XSwap.setPrices (XSwap.sol#280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setPrices(address _input, address _output, uint256 _priceInOut, uint256 _priceOutIn) public auth returns (bool) {\n",
                    "message": "Parameter '_priceOutIn' of XSwap.setPrices (XSwap.sol#280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setPrices(address _input, address _output, uint256 _price) public auth returns (bool) {\n",
                    "message": "Parameter '_input' of XSwap.setPrices (XSwap.sol#286) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setPrices(address _input, address _output, uint256 _price) public auth returns (bool) {\n",
                    "message": "Parameter '_output' of XSwap.setPrices (XSwap.sol#286) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setPrices(address _input, address _output, uint256 _price) public auth returns (bool) {\n",
                    "message": "Parameter '_price' of XSwap.setPrices (XSwap.sol#286) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setFee(address _input, address _output, uint256 _fee) public auth returns (bool) {\n",
                    "message": "Parameter '_input' of XSwap.setFee (XSwap.sol#291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setFee(address _input, address _output, uint256 _fee) public auth returns (bool) {\n",
                    "message": "Parameter '_output' of XSwap.setFee (XSwap.sol#291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setFee(address _input, address _output, uint256 _fee) public auth returns (bool) {\n",
                    "message": "Parameter '_fee' of XSwap.setFee (XSwap.sol#291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setTokenDecimals(address _token, uint256 _decimals) public auth returns (bool){\n",
                    "message": "Parameter '_token' of XSwap.setTokenDecimals (XSwap.sol#297) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setTokenDecimals(address _token, uint256 _decimals) public auth returns (bool){\n",
                    "message": "Parameter '_decimals' of XSwap.setTokenDecimals (XSwap.sol#297) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction emergencyStop(bool _open) external auth returns (bool) {\n",
                    "message": "Parameter '_open' of XSwap.emergencyStop (XSwap.sol#303) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transferOut(address _token, address _receiver, uint256 _amount) external auth returns (bool) {\n",
                    "message": "Parameter '_token' of XSwap.transferOut (XSwap.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transferOut(address _token, address _receiver, uint256 _amount) external auth returns (bool) {\n",
                    "message": "Parameter '_receiver' of XSwap.transferOut (XSwap.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transferOut(address _token, address _receiver, uint256 _amount) external auth returns (bool) {\n",
                    "message": "Parameter '_amount' of XSwap.transferOut (XSwap.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transferOutALL(address _token, address _receiver) external auth returns (bool) {\n",
                    "message": "Parameter '_token' of XSwap.transferOutALL (XSwap.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transferOutALL(address _token, address _receiver) external auth returns (bool) {\n",
                    "message": "Parameter '_receiver' of XSwap.transferOutALL (XSwap.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transferIn(address _token, uint256 _amount) external auth returns (bool) {\n",
                    "message": "Parameter '_token' of XSwap.transferIn (XSwap.sol#342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transferIn(address _token, uint256 _amount) external auth returns (bool) {\n",
                    "message": "Parameter '_amount' of XSwap.transferIn (XSwap.sol#342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction normalizeToken(address _token, uint256 _amount) internal view returns (uint256) {\n",
                    "message": "Parameter '_token' of XSwap.normalizeToken (XSwap.sol#355) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction normalizeToken(address _token, uint256 _amount) internal view returns (uint256) {\n",
                    "message": "Parameter '_amount' of XSwap.normalizeToken (XSwap.sol#355) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction denormalizedToken(address _token, uint256 _amount) internal view returns (uint256) {\n",
                    "message": "Parameter '_token' of XSwap.denormalizedToken (XSwap.sol#360) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction denormalizedToken(address _token, uint256 _amount) internal view returns (uint256) {\n",
                    "message": "Parameter '_amount' of XSwap.denormalizedToken (XSwap.sol#360) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress private chai = 0x8a5C1BD4D75e168a4f65eB902c289400B90FD980;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress private dai  = 0xA3A59273494BB5B8F0a8FAcf21B3f666A47d6140;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress private chai = 0x8a5C1BD4D75e168a4f65eB902c289400B90FD980;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress private dai  = 0xA3A59273494BB5B8F0a8FAcf21B3f666A47d6140;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tbool private actived;\n",
                    "message": null
                }
            ]
        }
    },
    "xswap-326a3246b327cd2b8481fd8c22fe8d864e43b0da/contracts/interface/ILendFMe.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in ILendFMe.sol:\n\t- pragma solidity^0.5.4 (ILendFMe.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "xswap-326a3246b327cd2b8481fd8c22fe8d864e43b0da/contracts/interface/IXSwap.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in IXSwap.sol:\n\t- pragma solidity^0.5.4 (IXSwap.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "xswap-326a3246b327cd2b8481fd8c22fe8d864e43b0da/contracts/interface/IERC20Token.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "interface NonStandardIERC20Token {\n\n    function balanceOf(address _owner) external view returns (uint);\n\n    function allowance(address _owner, address _spender) external view returns (uint);\n\n    function transfer(address _to, uint _value) external;\n\n    function transferFrom(address _from, address _to, uint _value) external;\n\n    function approve(address _spender, uint _value) external;\n",
                    "message": "NonStandardIERC20Token (IERC20Token.sol#14-20) has incorrect ERC20 function interface(s):\n\t-transfer (IERC20Token.sol#17)\n\t-transferFrom (IERC20Token.sol#18)\n\t-approve (IERC20Token.sol#19)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in IERC20Token.sol:\n\t- pragma solidity^0.5.4 (IERC20Token.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "xswap-326a3246b327cd2b8481fd8c22fe8d864e43b0da/contracts/interface/IChai.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in IChai.sol:\n\t- pragma solidity^0.5.4 (IChai.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "xswap-326a3246b327cd2b8481fd8c22fe8d864e43b0da/contracts/utils/Address.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 32,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "OpenZeppelinUpgradesAddress.isContract (Address.sol#21-32) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 32,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "OpenZeppelinUpgradesAddress.isContract uses assembly (Address.sol#21-32)\n\t- Address.sol#30\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in Address.sol:\n\t- pragma solidity^0.5.0 (Address.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                }
            ]
        }
    },
    "xswap-326a3246b327cd2b8481fd8c22fe8d864e43b0da/contracts/Mockup/FakeLendFMe.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\trequire(balances[_token][msg.sender] >= _amounts, \"user have no enough token\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\trequire(IERC20(_token).transfer(msg.sender, _amounts), \"contrract balance not enough\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": 40,
                    "vulnerability_code": "\tfunction withdraw(address _token, uint _amounts) external returns (uint) {\n\n\t\tif (_amounts == uint(-1)) {\n\n\t\t\tuint256 toUser = balances[_token][msg.sender];\n\n\t\t\tbalances[_token][msg.sender] = 0;\n\n\t\t\tIERC20(_token).transfer(msg.sender, toUser);\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\trequire(balances[_token][msg.sender] >= _amounts, \"user have no enough token\");\n\n\t\tbalances[_token][msg.sender] -= _amounts;\n\n\t\trequire(IERC20(_token).transfer(msg.sender, _amounts), \"contrract balance not enough\");\n\n\t\treturn 0;\n",
                    "message": "FakeLendFMe.withdraw (FakeLendFMe.sol#29-40) does not use the value returned by external calls:\n\t-IERC20(_token).transfer(msg.sender,toUser) (FakeLendFMe.sol#33)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "\tfunction supply(address _token, uint _amounts) external returns (uint) {\n\n\t\trequire(IERC20(_token).transferFrom(msg.sender, address(this), _amounts));\n\n\t\tbalances[_token][msg.sender] += _amounts;\n\n\t\treturn 0;\n",
                    "message": "Reentrancy in FakeLendFMe.supply (FakeLendFMe.sol#23-27):\n\tExternal calls:\n\t- require(bool)(IERC20(_token).transferFrom(msg.sender,address(this),_amounts)) (FakeLendFMe.sol#24)\n\tState variables written after the call(s):\n\t- balances (FakeLendFMe.sol#25)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in FakeLendFMe.sol:\n\t- pragma solidity^0.5.4 (FakeLendFMe.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction supply(address _token, uint _amounts) external returns (uint) {\n",
                    "message": "Parameter '_token' of FakeLendFMe.supply (FakeLendFMe.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction supply(address _token, uint _amounts) external returns (uint) {\n",
                    "message": "Parameter '_amounts' of FakeLendFMe.supply (FakeLendFMe.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction withdraw(address _token, uint _amounts) external returns (uint) {\n",
                    "message": "Parameter '_token' of FakeLendFMe.withdraw (FakeLendFMe.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction withdraw(address _token, uint _amounts) external returns (uint) {\n",
                    "message": "Parameter '_amounts' of FakeLendFMe.withdraw (FakeLendFMe.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction makeProfitToUser(address _user, address _token, uint256 _percentrage) external {\n",
                    "message": "Parameter '_user' of FakeLendFMe.makeProfitToUser (FakeLendFMe.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction makeProfitToUser(address _user, address _token, uint256 _percentrage) external {\n",
                    "message": "Parameter '_token' of FakeLendFMe.makeProfitToUser (FakeLendFMe.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction makeProfitToUser(address _user, address _token, uint256 _percentrage) external {\n",
                    "message": "Parameter '_percentrage' of FakeLendFMe.makeProfitToUser (FakeLendFMe.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction getSupplyBalance(address _user, address _token) external view returns (uint256) {\n",
                    "message": "Parameter '_user' of FakeLendFMe.getSupplyBalance (FakeLendFMe.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction getSupplyBalance(address _user, address _token) external view returns (uint256) {\n",
                    "message": "Parameter '_token' of FakeLendFMe.getSupplyBalance (FakeLendFMe.sol#49) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "xswap-326a3246b327cd2b8481fd8c22fe8d864e43b0da/contracts/Mockup/DSToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32  public  name = \"\";\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(uint supply) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _supply = supply;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(bytes32 symbol_, uint256 decimals_) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        symbol = symbol_;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        decimals = decimals_;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner_ != address(0), \"invalid owner address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_approvals[src][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balances[src] >= wad, \"ds-token-insufficient-balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_approvals[src][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balances[src] >= wad, \"ds-token-insufficient-balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(guy != address(0), \"ds-token-mint: mint to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(guy != address(0), \"ds-token-burn: burn from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balances[guy] >= wad, \"ds-token-insufficient-balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_approvals[guy][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_approvals[src][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_approvals[guy][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(guy != address(0), \"ds-token-mint: mint to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(guy != address(0), \"ds-token-burn: burn from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "erc20-public-burn",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(address guy, uint wad) public {\n",
                    "message": "Anyone can burn tokens of other accounts"
                },
                {
                    "name": "erc20-public-burn",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _burn(guy, wad);\n",
                    "message": "Anyone can burn tokens of other accounts"
                },
                {
                    "name": "erc20-public-burn",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Anyone can burn tokens of other accounts"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_20"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 39,
                    "vulnerability_code": "    function setOwner(address owner_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        require(owner_ != address(0), \"invalid owner address\");\n\n        owner = owner_;\n\n        emit LogSetOwner(owner);\n",
                    "message": "DSAuth.setOwner (DSToken.sol#32-39) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 47,
                    "vulnerability_code": "    function setAuthority(address authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DSToken.sol#41-47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
                    "message": "ERC20.totalSupply (DSToken.sol#84) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": 128,
                    "vulnerability_code": "    function totalSupply() public view returns (uint) {\n\n        return _supply;\n",
                    "message": "DSTokenBase.totalSupply (DSToken.sol#126-128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 131,
                    "vulnerability_code": "    function balanceOf(address src) public view returns (uint) {\n\n        return _balances[src];\n",
                    "message": "DSTokenBase.balanceOf (DSToken.sol#129-131) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address guy) public view returns (uint);\n",
                    "message": "ERC20.balanceOf (DSToken.sol#85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": 134,
                    "vulnerability_code": "    function allowance(address src, address guy) public view returns (uint) {\n\n        return _approvals[src][guy];\n",
                    "message": "DSTokenBase.allowance (DSToken.sol#132-134) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address src, address guy) public view returns (uint);\n",
                    "message": "ERC20.allowance (DSToken.sol#86) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address dst, uint wad) public returns (bool);\n",
                    "message": "ERC20.transfer (DSToken.sol#89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": 138,
                    "vulnerability_code": "    function transfer(address dst, uint wad) public returns (bool) {\n\n        return transferFrom(msg.sender, dst, wad);\n",
                    "message": "DSTokenBase.transfer (DSToken.sol#136-138) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": 184,
                    "vulnerability_code": "    function setName(bytes32 name_) public {\n\n        name = name_;\n",
                    "message": "DSToken.setName (DSToken.sol#182-184) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": 188,
                    "vulnerability_code": "    function approvex(address guy) public returns (bool) {\n\n        return super.approve(guy, uint(-1));\n",
                    "message": "DSToken.approvex (DSToken.sol#186-188) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": 214,
                    "vulnerability_code": "    function mint(address guy, uint wad) public {\n\n        _mint(guy, wad);\n",
                    "message": "DSToken.mint (DSToken.sol#212-214) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": 218,
                    "vulnerability_code": "    function burn(address guy, uint wad) public {\n\n        _burn(guy, wad);\n",
                    "message": "DSToken.burn (DSToken.sol#216-218) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in DSToken.sol:\n\t- pragma solidity^0.5.4 (DSToken.sol#16): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256                                            _supply;\n",
                    "message": "Variable 'DSTokenBase._supply' (DSToken.sol#118) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256)                       _balances;\n",
                    "message": "Variable 'DSTokenBase._balances' (DSToken.sol#119) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256))  _approvals;\n",
                    "message": "Variable 'DSTokenBase._approvals' (DSToken.sol#120) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": 226,
                    "vulnerability_code": "    function _mint(address guy, uint wad) internal {\n\n        require(guy != address(0), \"ds-token-mint: mint to the zero address\");\n\n\n\n        _balances[guy] = add(_balances[guy], wad);\n\n        _supply = add(_supply, wad);\n\n        emit Transfer(address(0), guy, wad);\n",
                    "message": "Function 'DSToken._mint' (DSToken.sol#220-226) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": 240,
                    "vulnerability_code": "    function _burn(address guy, uint wad) internal {\n\n        require(guy != address(0), \"ds-token-burn: burn from the zero address\");\n\n        require(_balances[guy] >= wad, \"ds-token-insufficient-balance\");\n\n\n\n        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\n\n            require(_approvals[guy][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n\n            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\n\n        }\n\n\n\n        _balances[guy] = sub(_balances[guy], wad);\n\n        _supply = sub(_supply, wad);\n\n        emit Transfer(guy, address(0), wad);\n",
                    "message": "Function 'DSToken._burn' (DSToken.sol#228-240) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address guy, uint wad) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address guy, uint wad) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwner(address owner_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(address authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256                                            _supply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256)                       _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256))  _approvals;\n",
                    "message": null
                }
            ]
        }
    },
    "xswap-326a3246b327cd2b8481fd8c22fe8d864e43b0da/contracts/DSLibrary/DSAuth.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (DSAuth.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (DSAuth.sol#41-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (DSAuth.sol#46-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (DSAuth.sol#51-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DSAuth.sol#59-65) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in DSAuth.sol:\n\t- pragma solidity^0.5.4 (DSAuth.sol#16): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "xswap-326a3246b327cd2b8481fd8c22fe8d864e43b0da/contracts/DSLibrary/DSGuard.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_11"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "    function canCall(\n\n        address src_, address dst_, bytes4 sig\n\n    ) public view returns (bool) {\n\n        bytes32 src = bytes32(bytes20(src_));\n\n        bytes32 dst = bytes32(bytes20(dst_));\n\n\n\n        return acl[src][dst][sig]\n\n            || acl[src][dst][ANY]\n\n            || acl[src][ANY][sig]\n\n            || acl[src][ANY][ANY]\n\n            || acl[ANY][dst][sig]\n\n            || acl[ANY][dst][ANY]\n\n            || acl[ANY][ANY][sig]\n\n            || acl[ANY][ANY][ANY];\n",
                    "message": "DSGuard.canCall (DSGuard.sol#134-148) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (DSGuard.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (DSGuard.sol#41-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (DSGuard.sol#46-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (DSGuard.sol#51-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DSGuard.sol#59-65) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": 162,
                    "vulnerability_code": "    function permit(address src, address dst, bytes32 sig) public auth {\n\n        permit(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\n",
                    "message": "DSGuard.permit (DSGuard.sol#160-162) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": 165,
                    "vulnerability_code": "    function permitx(address src, address dst) public auth {\n\n        permit(bytes32(bytes20(src)), bytes32(bytes20(dst)), ANY);\n",
                    "message": "DSGuard.permitx (DSGuard.sol#163-165) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "    function forbid(address src, address dst, bytes32 sig) public auth {\n\n        forbid(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\n",
                    "message": "DSGuard.forbid (DSGuard.sol#166-168) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": 171,
                    "vulnerability_code": "    function forbidx(address src, address dst) public auth {\n\n        forbid(bytes32(bytes20(src)), bytes32(bytes20(dst)), ANY);\n",
                    "message": "DSGuard.forbidx (DSGuard.sol#169-171) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in DSGuard.sol:\n\t- pragma solidity^0.5.4 (DSGuard.sol#16): it allows old versions\n\t- pragma solidity^0.5.4 (DSGuard.sol#113): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (bytes32 => mapping (bytes32 => mapping (bytes32 => bool))) acl;\n",
                    "message": null
                }
            ]
        }
    },
    "xswap-326a3246b327cd2b8481fd8c22fe8d864e43b0da/contracts/upgradeability/AdminUpgradeabilityProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_29"
            ],
            "vulnerability_findings": [
                {
                    "name": "controlled-delegatecall",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "  constructor(address _logic, bytes memory _data) public payable {\n\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n\n    _setImplementation(_logic);\n\n    if(_data.length > 0) {\n\n      (bool success,) = _logic.delegatecall(_data);\n\n      require(success);\n\n    }\n",
                    "message": "UpgradeabilityProxy.constructor (AdminUpgradeabilityProxy.sol#183-190) uses delegatecall to a input-controlled function id\n\t(success) = _logic.delegatecall(_data) (AdminUpgradeabilityProxy.sol#187)\n"
                },
                {
                    "name": "controlled-delegatecall",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\n\n    _upgradeTo(newImplementation);\n\n    (bool success,) = newImplementation.delegatecall(data);\n\n    require(success);\n",
                    "message": "BaseAdminUpgradeabilityProxy.upgradeToAndCall (AdminUpgradeabilityProxy.sol#277-281) uses delegatecall to a input-controlled function id\n\t(success) = newImplementation.delegatecall(data) (AdminUpgradeabilityProxy.sol#279)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "OpenZeppelinUpgradesAddress.isContract (AdminUpgradeabilityProxy.sol#91-102) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "BaseUpgradeabilityProxy._implementation (AdminUpgradeabilityProxy.sol#134-139) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "BaseAdminUpgradeabilityProxy._admin (AdminUpgradeabilityProxy.sol#286-291) is declared view but contains assembly code\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\n",
                    "message": "AdminUpgradeabilityProxy.constructor._admin (local variable @ AdminUpgradeabilityProxy.sol#333) shadows:\n\t- BaseAdminUpgradeabilityProxy._admin (function @ AdminUpgradeabilityProxy.sol#286-291)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 51,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize)\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize)\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize) }\n\n      default { return(0, returndatasize) }\n\n    }\n",
                    "message": "Proxy._delegate uses assembly (AdminUpgradeabilityProxy.sol#32-51)\n\t- AdminUpgradeabilityProxy.sol#33-50\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "OpenZeppelinUpgradesAddress.isContract uses assembly (AdminUpgradeabilityProxy.sol#91-102)\n\t- AdminUpgradeabilityProxy.sol#100\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "BaseUpgradeabilityProxy._implementation uses assembly (AdminUpgradeabilityProxy.sol#134-139)\n\t- AdminUpgradeabilityProxy.sol#136-138\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 162,
                    "vulnerability_code": "  function _setImplementation(address newImplementation) internal {\n\n    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newImplementation)\n\n    }\n",
                    "message": "BaseUpgradeabilityProxy._setImplementation uses assembly (AdminUpgradeabilityProxy.sol#154-162)\n\t- AdminUpgradeabilityProxy.sol#159-161\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "BaseAdminUpgradeabilityProxy._admin uses assembly (AdminUpgradeabilityProxy.sol#286-291)\n\t- AdminUpgradeabilityProxy.sol#288-290\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 303,
                    "vulnerability_code": "  function _setAdmin(address newAdmin) internal {\n\n    bytes32 slot = ADMIN_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newAdmin)\n\n    }\n",
                    "message": "BaseAdminUpgradeabilityProxy._setAdmin uses assembly (AdminUpgradeabilityProxy.sol#297-303)\n\t- AdminUpgradeabilityProxy.sol#300-302\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Different versions of Solidity is used in AdminUpgradeabilityProxy.sol:\n\t- Version used: ['^0.5.0', '^0.5.4']\n\t- AdminUpgradeabilityProxy.sol#3 declares pragma solidity^0.5.4\n\t- AdminUpgradeabilityProxy.sol#73 declares pragma solidity^0.5.0\n\t- AdminUpgradeabilityProxy.sol#107 declares pragma solidity^0.5.4\n\t- AdminUpgradeabilityProxy.sol#167 declares pragma solidity^0.5.4\n\t- AdminUpgradeabilityProxy.sol#195 declares pragma solidity^0.5.4\n\t- AdminUpgradeabilityProxy.sol#316 declares pragma solidity^0.5.4\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in AdminUpgradeabilityProxy.sol:\n\t- pragma solidity^0.5.4 (AdminUpgradeabilityProxy.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (AdminUpgradeabilityProxy.sol#73): it allows old versions\n\t- pragma solidity^0.5.4 (AdminUpgradeabilityProxy.sol#107): it allows old versions\n\t- pragma solidity^0.5.4 (AdminUpgradeabilityProxy.sol#167): it allows old versions\n\t- pragma solidity^0.5.4 (AdminUpgradeabilityProxy.sol#195): it allows old versions\n\t- pragma solidity^0.5.4 (AdminUpgradeabilityProxy.sol#316): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "  constructor(address _logic, bytes memory _data) public payable {\n\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n\n    _setImplementation(_logic);\n\n    if(_data.length > 0) {\n\n      (bool success,) = _logic.delegatecall(_data);\n\n      require(success);\n\n    }\n",
                    "message": "Low level call in UpgradeabilityProxy.constructor (AdminUpgradeabilityProxy.sol#183-190):\n\t-(success) = _logic.delegatecall(_data) AdminUpgradeabilityProxy.sol#187\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\n\n    _upgradeTo(newImplementation);\n\n    (bool success,) = newImplementation.delegatecall(data);\n\n    require(success);\n",
                    "message": "Low level call in BaseAdminUpgradeabilityProxy.upgradeToAndCall (AdminUpgradeabilityProxy.sol#277-281):\n\t-(success) = newImplementation.delegatecall(data) AdminUpgradeabilityProxy.sol#279\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address);\n",
                    "message": "Function 'Proxy._implementation' (AdminUpgradeabilityProxy.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 51,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize)\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize)\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize) }\n\n      default { return(0, returndatasize) }\n\n    }\n",
                    "message": "Function 'Proxy._delegate' (AdminUpgradeabilityProxy.sol#32-51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 59,
                    "vulnerability_code": "  function _willFallback() internal {\n",
                    "message": "Function 'Proxy._willFallback' (AdminUpgradeabilityProxy.sol#58-59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 68,
                    "vulnerability_code": "  function _fallback() internal {\n\n    _willFallback();\n\n    _delegate(_implementation());\n",
                    "message": "Function 'Proxy._fallback' (AdminUpgradeabilityProxy.sol#65-68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "Function 'BaseUpgradeabilityProxy._implementation' (AdminUpgradeabilityProxy.sol#134-139) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "  function _upgradeTo(address newImplementation) internal {\n\n    _setImplementation(newImplementation);\n\n    emit Upgraded(newImplementation);\n",
                    "message": "Function 'BaseUpgradeabilityProxy._upgradeTo' (AdminUpgradeabilityProxy.sol#145-148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 162,
                    "vulnerability_code": "  function _setImplementation(address newImplementation) internal {\n\n    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newImplementation)\n\n    }\n",
                    "message": "Function 'BaseUpgradeabilityProxy._setImplementation' (AdminUpgradeabilityProxy.sol#154-162) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _logic, bytes memory _data) public payable {\n",
                    "message": "Parameter '_logic' of UpgradeabilityProxy. (AdminUpgradeabilityProxy.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _logic, bytes memory _data) public payable {\n",
                    "message": "Parameter '_data' of UpgradeabilityProxy. (AdminUpgradeabilityProxy.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "  function _willFallback() internal {\n\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n\n    super._willFallback();\n",
                    "message": "Function 'BaseAdminUpgradeabilityProxy._willFallback' (AdminUpgradeabilityProxy.sol#308-311) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "Function 'BaseAdminUpgradeabilityProxy._admin' (AdminUpgradeabilityProxy.sol#286-291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 303,
                    "vulnerability_code": "  function _setAdmin(address newAdmin) internal {\n\n    bytes32 slot = ADMIN_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newAdmin)\n\n    }\n",
                    "message": "Function 'BaseAdminUpgradeabilityProxy._setAdmin' (AdminUpgradeabilityProxy.sol#297-303) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {\n",
                    "message": "Parameter '_admin' of AdminUpgradeabilityProxy. (AdminUpgradeabilityProxy.sol#333) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract UpgradeabilityProxy is BaseUpgradeabilityProxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract AdminUpgradeabilityProxy is BaseAdminUpgradeabilityProxy, UpgradeabilityProxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    (bool success,) = newImplementation.delegatecall(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "xswap-326a3246b327cd2b8481fd8c22fe8d864e43b0da/contracts/upgradeability/BaseUpgradeabilityProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_16"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "OpenZeppelinUpgradesAddress.isContract (BaseUpgradeabilityProxy.sol#91-102) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "BaseUpgradeabilityProxy._implementation (BaseUpgradeabilityProxy.sol#134-139) is declared view but contains assembly code\n"
                },
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function () payable external {\n\n    _fallback();\n",
                    "message": "Contract locking ether found in BaseUpgradeabilityProxy.sol:\n\tContract BaseUpgradeabilityProxy has payable functions:\n\t - fallback (BaseUpgradeabilityProxy.sol#17-19)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 51,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize)\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize)\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize) }\n\n      default { return(0, returndatasize) }\n\n    }\n",
                    "message": "Proxy._delegate uses assembly (BaseUpgradeabilityProxy.sol#32-51)\n\t- BaseUpgradeabilityProxy.sol#33-50\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "OpenZeppelinUpgradesAddress.isContract uses assembly (BaseUpgradeabilityProxy.sol#91-102)\n\t- BaseUpgradeabilityProxy.sol#100\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "BaseUpgradeabilityProxy._implementation uses assembly (BaseUpgradeabilityProxy.sol#134-139)\n\t- BaseUpgradeabilityProxy.sol#136-138\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 162,
                    "vulnerability_code": "  function _setImplementation(address newImplementation) internal {\n\n    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newImplementation)\n\n    }\n",
                    "message": "BaseUpgradeabilityProxy._setImplementation uses assembly (BaseUpgradeabilityProxy.sol#154-162)\n\t- BaseUpgradeabilityProxy.sol#159-161\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Different versions of Solidity is used in BaseUpgradeabilityProxy.sol:\n\t- Version used: ['^0.5.0', '^0.5.4']\n\t- BaseUpgradeabilityProxy.sol#3 declares pragma solidity^0.5.4\n\t- BaseUpgradeabilityProxy.sol#73 declares pragma solidity^0.5.0\n\t- BaseUpgradeabilityProxy.sol#107 declares pragma solidity^0.5.4\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in BaseUpgradeabilityProxy.sol:\n\t- pragma solidity^0.5.4 (BaseUpgradeabilityProxy.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (BaseUpgradeabilityProxy.sol#73): it allows old versions\n\t- pragma solidity^0.5.4 (BaseUpgradeabilityProxy.sol#107): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address);\n",
                    "message": "Function 'Proxy._implementation' (BaseUpgradeabilityProxy.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 51,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize)\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize)\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize) }\n\n      default { return(0, returndatasize) }\n\n    }\n",
                    "message": "Function 'Proxy._delegate' (BaseUpgradeabilityProxy.sol#32-51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 59,
                    "vulnerability_code": "  function _willFallback() internal {\n",
                    "message": "Function 'Proxy._willFallback' (BaseUpgradeabilityProxy.sol#58-59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 68,
                    "vulnerability_code": "  function _fallback() internal {\n\n    _willFallback();\n\n    _delegate(_implementation());\n",
                    "message": "Function 'Proxy._fallback' (BaseUpgradeabilityProxy.sol#65-68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "Function 'BaseUpgradeabilityProxy._implementation' (BaseUpgradeabilityProxy.sol#134-139) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "  function _upgradeTo(address newImplementation) internal {\n\n    _setImplementation(newImplementation);\n\n    emit Upgraded(newImplementation);\n",
                    "message": "Function 'BaseUpgradeabilityProxy._upgradeTo' (BaseUpgradeabilityProxy.sol#145-148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 162,
                    "vulnerability_code": "  function _setImplementation(address newImplementation) internal {\n\n    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newImplementation)\n\n    }\n",
                    "message": "Function 'BaseUpgradeabilityProxy._setImplementation' (BaseUpgradeabilityProxy.sol#154-162) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "xswap-326a3246b327cd2b8481fd8c22fe8d864e43b0da/contracts/upgradeability/BaseAdminUpgradeabilityProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_27"
            ],
            "vulnerability_findings": [
                {
                    "name": "controlled-delegatecall",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "  constructor(address _logic, bytes memory _data) public payable {\n\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n\n    _setImplementation(_logic);\n\n    if(_data.length > 0) {\n\n      (bool success,) = _logic.delegatecall(_data);\n\n      require(success);\n\n    }\n",
                    "message": "UpgradeabilityProxy.constructor (BaseAdminUpgradeabilityProxy.sol#183-190) uses delegatecall to a input-controlled function id\n\t(success) = _logic.delegatecall(_data) (BaseAdminUpgradeabilityProxy.sol#187)\n"
                },
                {
                    "name": "controlled-delegatecall",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\n\n    _upgradeTo(newImplementation);\n\n    (bool success,) = newImplementation.delegatecall(data);\n\n    require(success);\n",
                    "message": "BaseAdminUpgradeabilityProxy.upgradeToAndCall (BaseAdminUpgradeabilityProxy.sol#277-281) uses delegatecall to a input-controlled function id\n\t(success) = newImplementation.delegatecall(data) (BaseAdminUpgradeabilityProxy.sol#279)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "OpenZeppelinUpgradesAddress.isContract (BaseAdminUpgradeabilityProxy.sol#91-102) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "BaseUpgradeabilityProxy._implementation (BaseAdminUpgradeabilityProxy.sol#134-139) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "BaseAdminUpgradeabilityProxy._admin (BaseAdminUpgradeabilityProxy.sol#286-291) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 51,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize)\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize)\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize) }\n\n      default { return(0, returndatasize) }\n\n    }\n",
                    "message": "Proxy._delegate uses assembly (BaseAdminUpgradeabilityProxy.sol#32-51)\n\t- BaseAdminUpgradeabilityProxy.sol#33-50\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "OpenZeppelinUpgradesAddress.isContract uses assembly (BaseAdminUpgradeabilityProxy.sol#91-102)\n\t- BaseAdminUpgradeabilityProxy.sol#100\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "BaseUpgradeabilityProxy._implementation uses assembly (BaseAdminUpgradeabilityProxy.sol#134-139)\n\t- BaseAdminUpgradeabilityProxy.sol#136-138\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 162,
                    "vulnerability_code": "  function _setImplementation(address newImplementation) internal {\n\n    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newImplementation)\n\n    }\n",
                    "message": "BaseUpgradeabilityProxy._setImplementation uses assembly (BaseAdminUpgradeabilityProxy.sol#154-162)\n\t- BaseAdminUpgradeabilityProxy.sol#159-161\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "BaseAdminUpgradeabilityProxy._admin uses assembly (BaseAdminUpgradeabilityProxy.sol#286-291)\n\t- BaseAdminUpgradeabilityProxy.sol#288-290\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 303,
                    "vulnerability_code": "  function _setAdmin(address newAdmin) internal {\n\n    bytes32 slot = ADMIN_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newAdmin)\n\n    }\n",
                    "message": "BaseAdminUpgradeabilityProxy._setAdmin uses assembly (BaseAdminUpgradeabilityProxy.sol#297-303)\n\t- BaseAdminUpgradeabilityProxy.sol#300-302\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Different versions of Solidity is used in BaseAdminUpgradeabilityProxy.sol:\n\t- Version used: ['^0.5.0', '^0.5.4']\n\t- BaseAdminUpgradeabilityProxy.sol#3 declares pragma solidity^0.5.4\n\t- BaseAdminUpgradeabilityProxy.sol#73 declares pragma solidity^0.5.0\n\t- BaseAdminUpgradeabilityProxy.sol#107 declares pragma solidity^0.5.4\n\t- BaseAdminUpgradeabilityProxy.sol#167 declares pragma solidity^0.5.4\n\t- BaseAdminUpgradeabilityProxy.sol#195 declares pragma solidity^0.5.4\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in BaseAdminUpgradeabilityProxy.sol:\n\t- pragma solidity^0.5.4 (BaseAdminUpgradeabilityProxy.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (BaseAdminUpgradeabilityProxy.sol#73): it allows old versions\n\t- pragma solidity^0.5.4 (BaseAdminUpgradeabilityProxy.sol#107): it allows old versions\n\t- pragma solidity^0.5.4 (BaseAdminUpgradeabilityProxy.sol#167): it allows old versions\n\t- pragma solidity^0.5.4 (BaseAdminUpgradeabilityProxy.sol#195): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "  constructor(address _logic, bytes memory _data) public payable {\n\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n\n    _setImplementation(_logic);\n\n    if(_data.length > 0) {\n\n      (bool success,) = _logic.delegatecall(_data);\n\n      require(success);\n\n    }\n",
                    "message": "Low level call in UpgradeabilityProxy.constructor (BaseAdminUpgradeabilityProxy.sol#183-190):\n\t-(success) = _logic.delegatecall(_data) BaseAdminUpgradeabilityProxy.sol#187\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\n\n    _upgradeTo(newImplementation);\n\n    (bool success,) = newImplementation.delegatecall(data);\n\n    require(success);\n",
                    "message": "Low level call in BaseAdminUpgradeabilityProxy.upgradeToAndCall (BaseAdminUpgradeabilityProxy.sol#277-281):\n\t-(success) = newImplementation.delegatecall(data) BaseAdminUpgradeabilityProxy.sol#279\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address);\n",
                    "message": "Function 'Proxy._implementation' (BaseAdminUpgradeabilityProxy.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 51,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize)\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize)\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize) }\n\n      default { return(0, returndatasize) }\n\n    }\n",
                    "message": "Function 'Proxy._delegate' (BaseAdminUpgradeabilityProxy.sol#32-51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 59,
                    "vulnerability_code": "  function _willFallback() internal {\n",
                    "message": "Function 'Proxy._willFallback' (BaseAdminUpgradeabilityProxy.sol#58-59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 68,
                    "vulnerability_code": "  function _fallback() internal {\n\n    _willFallback();\n\n    _delegate(_implementation());\n",
                    "message": "Function 'Proxy._fallback' (BaseAdminUpgradeabilityProxy.sol#65-68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "Function 'BaseUpgradeabilityProxy._implementation' (BaseAdminUpgradeabilityProxy.sol#134-139) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "  function _upgradeTo(address newImplementation) internal {\n\n    _setImplementation(newImplementation);\n\n    emit Upgraded(newImplementation);\n",
                    "message": "Function 'BaseUpgradeabilityProxy._upgradeTo' (BaseAdminUpgradeabilityProxy.sol#145-148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 162,
                    "vulnerability_code": "  function _setImplementation(address newImplementation) internal {\n\n    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newImplementation)\n\n    }\n",
                    "message": "Function 'BaseUpgradeabilityProxy._setImplementation' (BaseAdminUpgradeabilityProxy.sol#154-162) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _logic, bytes memory _data) public payable {\n",
                    "message": "Parameter '_logic' of UpgradeabilityProxy. (BaseAdminUpgradeabilityProxy.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _logic, bytes memory _data) public payable {\n",
                    "message": "Parameter '_data' of UpgradeabilityProxy. (BaseAdminUpgradeabilityProxy.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "  function _willFallback() internal {\n\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n\n    super._willFallback();\n",
                    "message": "Function 'BaseAdminUpgradeabilityProxy._willFallback' (BaseAdminUpgradeabilityProxy.sol#308-311) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "Function 'BaseAdminUpgradeabilityProxy._admin' (BaseAdminUpgradeabilityProxy.sol#286-291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 303,
                    "vulnerability_code": "  function _setAdmin(address newAdmin) internal {\n\n    bytes32 slot = ADMIN_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newAdmin)\n\n    }\n",
                    "message": "Function 'BaseAdminUpgradeabilityProxy._setAdmin' (BaseAdminUpgradeabilityProxy.sol#297-303) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract UpgradeabilityProxy is BaseUpgradeabilityProxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract BaseAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    (bool success,) = newImplementation.delegatecall(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "xswap-326a3246b327cd2b8481fd8c22fe8d864e43b0da/contracts/upgradeability/Proxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function () payable external {\n\n    _fallback();\n",
                    "message": "Contract locking ether found in Proxy.sol:\n\tContract Proxy has payable functions:\n\t - fallback (Proxy.sol#17-19)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 51,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize)\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize)\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize) }\n\n      default { return(0, returndatasize) }\n\n    }\n",
                    "message": "Proxy._delegate uses assembly (Proxy.sol#32-51)\n\t- Proxy.sol#33-50\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in Proxy.sol:\n\t- pragma solidity^0.5.4 (Proxy.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address);\n",
                    "message": "Function 'Proxy._implementation' (Proxy.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 51,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize)\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize)\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize) }\n\n      default { return(0, returndatasize) }\n\n    }\n",
                    "message": "Function 'Proxy._delegate' (Proxy.sol#32-51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 59,
                    "vulnerability_code": "  function _willFallback() internal {\n",
                    "message": "Function 'Proxy._willFallback' (Proxy.sol#58-59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 68,
                    "vulnerability_code": "  function _fallback() internal {\n\n    _willFallback();\n\n    _delegate(_implementation());\n",
                    "message": "Function 'Proxy._fallback' (Proxy.sol#65-68) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "xswap-326a3246b327cd2b8481fd8c22fe8d864e43b0da/contracts/upgradeability/UpgradeabilityProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_19"
            ],
            "vulnerability_findings": [
                {
                    "name": "controlled-delegatecall",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "  constructor(address _logic, bytes memory _data) public payable {\n\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n\n    _setImplementation(_logic);\n\n    if(_data.length > 0) {\n\n      (bool success,) = _logic.delegatecall(_data);\n\n      require(success);\n\n    }\n",
                    "message": "UpgradeabilityProxy.constructor (UpgradeabilityProxy.sol#183-190) uses delegatecall to a input-controlled function id\n\t(success) = _logic.delegatecall(_data) (UpgradeabilityProxy.sol#187)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "OpenZeppelinUpgradesAddress.isContract (UpgradeabilityProxy.sol#91-102) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "BaseUpgradeabilityProxy._implementation (UpgradeabilityProxy.sol#134-139) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 51,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize)\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize)\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize) }\n\n      default { return(0, returndatasize) }\n\n    }\n",
                    "message": "Proxy._delegate uses assembly (UpgradeabilityProxy.sol#32-51)\n\t- UpgradeabilityProxy.sol#33-50\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 102,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        uint256 size;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n\n        // than to check the size of the code at that address.\n\n        // See https://ethereum.stackexchange.com/a/14016/36603\n\n        // for more details about how this works.\n\n        // TODO Check this again before the Serenity release, because all addresses will be\n\n        // contracts then.\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "OpenZeppelinUpgradesAddress.isContract uses assembly (UpgradeabilityProxy.sol#91-102)\n\t- UpgradeabilityProxy.sol#100\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "BaseUpgradeabilityProxy._implementation uses assembly (UpgradeabilityProxy.sol#134-139)\n\t- UpgradeabilityProxy.sol#136-138\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 162,
                    "vulnerability_code": "  function _setImplementation(address newImplementation) internal {\n\n    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newImplementation)\n\n    }\n",
                    "message": "BaseUpgradeabilityProxy._setImplementation uses assembly (UpgradeabilityProxy.sol#154-162)\n\t- UpgradeabilityProxy.sol#159-161\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Different versions of Solidity is used in UpgradeabilityProxy.sol:\n\t- Version used: ['^0.5.0', '^0.5.4']\n\t- UpgradeabilityProxy.sol#3 declares pragma solidity^0.5.4\n\t- UpgradeabilityProxy.sol#73 declares pragma solidity^0.5.0\n\t- UpgradeabilityProxy.sol#107 declares pragma solidity^0.5.4\n\t- UpgradeabilityProxy.sol#167 declares pragma solidity^0.5.4\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in UpgradeabilityProxy.sol:\n\t- pragma solidity^0.5.4 (UpgradeabilityProxy.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (UpgradeabilityProxy.sol#73): it allows old versions\n\t- pragma solidity^0.5.4 (UpgradeabilityProxy.sol#107): it allows old versions\n\t- pragma solidity^0.5.4 (UpgradeabilityProxy.sol#167): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "  constructor(address _logic, bytes memory _data) public payable {\n\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n\n    _setImplementation(_logic);\n\n    if(_data.length > 0) {\n\n      (bool success,) = _logic.delegatecall(_data);\n\n      require(success);\n\n    }\n",
                    "message": "Low level call in UpgradeabilityProxy.constructor (UpgradeabilityProxy.sol#183-190):\n\t-(success) = _logic.delegatecall(_data) UpgradeabilityProxy.sol#187\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address);\n",
                    "message": "Function 'Proxy._implementation' (UpgradeabilityProxy.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 51,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize)\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize)\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize) }\n\n      default { return(0, returndatasize) }\n\n    }\n",
                    "message": "Function 'Proxy._delegate' (UpgradeabilityProxy.sol#32-51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 59,
                    "vulnerability_code": "  function _willFallback() internal {\n",
                    "message": "Function 'Proxy._willFallback' (UpgradeabilityProxy.sol#58-59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 68,
                    "vulnerability_code": "  function _fallback() internal {\n\n    _willFallback();\n\n    _delegate(_implementation());\n",
                    "message": "Function 'Proxy._fallback' (UpgradeabilityProxy.sol#65-68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "Function 'BaseUpgradeabilityProxy._implementation' (UpgradeabilityProxy.sol#134-139) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "  function _upgradeTo(address newImplementation) internal {\n\n    _setImplementation(newImplementation);\n\n    emit Upgraded(newImplementation);\n",
                    "message": "Function 'BaseUpgradeabilityProxy._upgradeTo' (UpgradeabilityProxy.sol#145-148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 162,
                    "vulnerability_code": "  function _setImplementation(address newImplementation) internal {\n\n    require(OpenZeppelinUpgradesAddress.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newImplementation)\n\n    }\n",
                    "message": "Function 'BaseUpgradeabilityProxy._setImplementation' (UpgradeabilityProxy.sol#154-162) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _logic, bytes memory _data) public payable {\n",
                    "message": "Parameter '_logic' of UpgradeabilityProxy. (UpgradeabilityProxy.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _logic, bytes memory _data) public payable {\n",
                    "message": "Parameter '_data' of UpgradeabilityProxy. (UpgradeabilityProxy.sol#183) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract UpgradeabilityProxy is BaseUpgradeabilityProxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    }
}