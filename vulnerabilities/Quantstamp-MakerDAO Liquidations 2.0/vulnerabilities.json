{
    "dss-8aae83e0b46c009f4d4dd9306cd0f865ca7e2dc7/src/dai.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(uint256 chainId_) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wards[msg.sender] = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        DOMAIN_SEPARATOR = keccak256(abi.encode(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            keccak256(bytes(name)),\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            keccak256(bytes(version)),\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            chainId_,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address(this)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"Dai/not-authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(balanceOf[src] >= wad, \"Dai/insufficient-balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(allowance[src][msg.sender] >= wad, \"Dai/insufficient-allowance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(balanceOf[usr] >= wad, \"Dai/insufficient-balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(allowance[usr][msg.sender] >= wad, \"Dai/insufficient-allowance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(holder != address(0), \"Dai/invalid-address-0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(holder == ecrecover(digest, v, r, s), \"Dai/invalid-permit\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(expiry == 0 || now <= expiry, \"Dai/permit-expired\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(nonce == nonces[holder]++, \"Dai/invalid-nonce\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(allowance[src][msg.sender] >= wad, \"Dai/insufficient-allowance\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            allowance[src][msg.sender] = sub(allowance[src][msg.sender], wad);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (usr != msg.sender && allowance[usr][msg.sender] != uint(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(allowance[usr][msg.sender] >= wad, \"Dai/insufficient-allowance\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            allowance[usr][msg.sender] = sub(allowance[usr][msg.sender], wad);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(nonce == nonces[holder]++, \"Dai/invalid-nonce\");\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": "Detected issues with version pragma in dai.sol:\n\t- pragma solidity>=0.5.12 (dai.sol#20): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string  public constant version  = \"1\";\n",
                    "message": "Constant 'Dai.version' (dai.sol#39) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 public DOMAIN_SEPARATOR;\n",
                    "message": "Variable 'Dai.DOMAIN_SEPARATOR' (dai.sol#59) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": null
                }
            ]
        }
    },
    "dss-8aae83e0b46c009f4d4dd9306cd0f865ca7e2dc7/src/dog.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address vat_) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        vat = VatLike(vat_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        live = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wards[msg.sender] = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit Rely(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"Dog/not-authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Dog/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Dog/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Dog/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Dog/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"Dog/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(spot > 0 && mul(ink, spot) < mul(art, rate), \"Dog/not-unsafe\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(Hole > Dirt && milk.hole > milk.dirt, \"Dog/liquidation-limit-hit\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    require(mul(dart, rate) >= dust, \"Dog/dusty-auction-from-partial-liquidation\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dink > 0, \"Dog/null-auction\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dart <= 2**255 && dink <= 2**255, \"Dog/overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(spot > 0 && mul(ink, spot) < mul(art, rate), \"Dog/not-unsafe\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(Hole > Dirt && milk.hole > milk.dirt, \"Dog/liquidation-limit-hit\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dart <= 2**255 && dink <= 2**255, \"Dog/overflow\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    require(mul(dart, rate) >= dust, \"Dog/dusty-auction-from-partial-liquidation\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_16"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": 255,
                    "vulnerability_code": "    function bark(bytes32 ilk, address urn, address kpr) external returns (uint256 id) {\n\n        require(live == 1, \"Dog/not-live\");\n\n\n\n        (uint256 ink, uint256 art) = vat.urns(ilk, urn);\n\n        Ilk memory milk = ilks[ilk];\n\n        uint256 dart;\n\n        uint256 rate;\n\n        uint256 dust;\n\n        {\n\n            uint256 spot;\n\n            (,rate, spot,, dust) = vat.ilks(ilk);\n\n            require(spot > 0 && mul(ink, spot) < mul(art, rate), \"Dog/not-unsafe\");\n\n\n\n            // Get the minimum value between:\n\n            // 1) Remaining space in the general Hole\n\n            // 2) Remaining space in the collateral hole\n\n            require(Hole > Dirt && milk.hole > milk.dirt, \"Dog/liquidation-limit-hit\");\n\n            uint256 room = min(Hole - Dirt, milk.hole - milk.dirt);\n\n\n\n            // uint256.max()/(RAD*WAD) = 115,792,089,237,316\n\n            // SWC-Integer Overflow and Underflow: L205\n\n            dart = min(art, mul(room, WAD) / rate / milk.chop);\n\n\n\n            // Partial liquidation edge case logic\n\n            if (art > dart) {\n\n                if (mul(art - dart, rate) < dust) {\n\n\n\n                    // If the leftover Vault would be dusty, just liquidate it entirely.\n\n                    // This will result in at least one of dirt_i > hole_i or Dirt > Hole becoming true.\n\n                    // The amount of excess will be bounded above by ceiling(dust_i * chop_i / WAD).\n\n                    // This deviation is assumed to be small compared to both hole_i and Hole, so that\n\n                    // the extra amount of target DAI over the limits intended is not of economic concern.\n\n                    dart = art;\n\n                } else {\n\n\n\n                    // In a partial liquidation, the resulting auction should also be non-dusty.\n\n                    require(mul(dart, rate) >= dust, \"Dog/dusty-auction-from-partial-liquidation\");\n\n                }\n\n            }\n\n        }\n\n\n\n        uint256 dink = mul(ink, dart) / art;\n\n\n\n        require(dink > 0, \"Dog/null-auction\");\n\n        require(dart <= 2**255 && dink <= 2**255, \"Dog/overflow\");\n\n\n\n        vat.grab(\n\n            ilk, urn, milk.clip, address(vow), -int256(dink), -int256(dart)\n\n        );\n\n\n\n        uint256 due = mul(dart, rate);\n\n        vow.fess(due);\n\n\n\n        {   // Avoid stack too deep\n\n            // This calcuation will overflow if dart*rate exceeds ~10^14\n\n            uint256 tab = mul(due, milk.chop) / WAD;\n\n            Dirt = add(Dirt, tab);\n\n            ilks[ilk].dirt = add(milk.dirt, tab);\n\n\n\n            id = ClipperLike(milk.clip).kick({\n\n                tab: tab,\n\n                lot: dink,\n\n                usr: urn,\n\n                kpr: kpr\n\n            });\n\n        }\n\n\n\n        emit Bark(ilk, urn, dink, dart, due, milk.clip, id);\n",
                    "message": "Reentrancy in Dog.bark (dog.sol#187-255):\n\tExternal calls:\n\t- (ink,art) = vat.urns(ilk,urn) (dog.sol#190)\n\t- (None,rate,spot,None,dust) = vat.ilks(ilk) (dog.sol#197)\n\t- vat.grab(ilk,urn,milk.clip,address(vow),- int256(dink),- int256(dart)) (dog.sol#233-235)\n\t- vow.fess(due) (dog.sol#238)\n\tState variables written after the call(s):\n\t- Dirt (dog.sol#243)\n\t- ilks (dog.sol#244)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.12;\n",
                    "message": "Detected issues with version pragma in dog.sol:\n\t- pragma solidity>=0.6.12 (dog.sol#23): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external view returns (\n",
                    "message": "Parameter '' of VatLike.ilks (dog.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function urns(bytes32,address) external view returns (\n",
                    "message": "Parameter '' of VatLike.urns (dog.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function urns(bytes32,address) external view returns (\n",
                    "message": "Parameter '_scope_0' of VatLike.urns (dog.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
                    "message": "Parameter '' of VatLike.grab (dog.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.grab (dog.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.grab (dog.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
                    "message": "Parameter '_scope_2' of VatLike.grab (dog.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
                    "message": "Parameter '_scope_3' of VatLike.grab (dog.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
                    "message": "Parameter '_scope_4' of VatLike.grab (dog.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function hope(address) external;\n",
                    "message": "Parameter '' of VatLike.hope (dog.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function nope(address) external;\n",
                    "message": "Parameter '' of VatLike.nope (dog.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function fess(uint256) external;\n",
                    "message": "Parameter '' of VowLike.fess (dog.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public Hole;  // Max DAI needed to cover debt+fees of active auctions [rad]\n",
                    "message": "Variable 'Dog.Hole' (dog.sol#79) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public Dirt;  // Amt DAI needed to cover debt+fees of active auctions [rad]\n",
                    "message": "Variable 'Dog.Dirt' (dog.sol#80) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what == \"vow\") vow = VowLike(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what == \"Hole\") Hole = data;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (what == \"hole\") ilks[ilk].hole = data;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what == \"clip\") ilks[ilk].clip = clip;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external view returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function urns(bytes32,address) external view returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    VatLike immutable public vat;  // CDP Engine\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    VatLike immutable public vat;  // CDP Engine\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant WAD = 10 ** 18;\n",
                    "message": null
                }
            ]
        }
    },
    "dss-8aae83e0b46c009f4d4dd9306cd0f865ca7e2dc7/src/jug.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address vat_) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wards[msg.sender] = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        vat = VatLike(vat_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"Jug/not-authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(i.duty == 0, \"Jug/ilk-already-init\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now == ilks[ilk].rho, \"Jug/rho-not-updated\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Jug/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Jug/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Jug/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now >= ilks[ilk].rho, \"Jug/invalid-now\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(int(x) >= 0 && int(y) >= 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_10"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "    function rpow(uint x, uint n, uint b) internal pure returns (uint z) {\n\n      assembly {\n\n        switch x case 0 {switch n case 0 {z := b} default {z := 0}}\n\n        default {\n\n          switch mod(n, 2) case 0 { z := b } default { z := x }\n\n          let half := div(b, 2)  // for rounding.\n\n          for { n := div(n, 2) } n { n := div(n,2) } {\n\n            let xx := mul(x, x)\n\n            if iszero(eq(div(xx, x), x)) { revert(0,0) }\n\n            let xxRound := add(xx, half)\n\n            if lt(xxRound, xx) { revert(0,0) }\n\n            x := div(xxRound, b)\n\n            if mod(n,2) {\n\n              let zx := mul(z, x)\n\n              if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n\n              let zxRound := add(zx, half)\n\n              if lt(zxRound, zx) { revert(0,0) }\n\n              z := div(zxRound, b)\n\n            }\n\n          }\n\n        }\n\n      }\n",
                    "message": "Jug.rpow (jug.sol#64-86) is declared view but contains assembly code\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": 113,
                    "vulnerability_code": "    function file(bytes32 ilk, bytes32 what, uint data) external auth {\n\n        require(now == ilks[ilk].rho, \"Jug/rho-not-updated\");\n\n        if (what == \"duty\") ilks[ilk].duty = data;\n\n        else revert(\"Jug/file-unrecognized-param\");\n",
                    "message": "Jug.file (jug.sol#109-113) uses a dangerous strict equality:\n\t- require(bool,string)(now == ilks[ilk].rho,Jug/rho-not-updated)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": 113,
                    "vulnerability_code": "    function file(bytes32 ilk, bytes32 what, uint data) external auth {\n\n        require(now == ilks[ilk].rho, \"Jug/rho-not-updated\");\n\n        if (what == \"duty\") ilks[ilk].duty = data;\n\n        else revert(\"Jug/file-unrecognized-param\");\n",
                    "message": "Jug.file (jug.sol#109-113) uses a dangerous strict equality:\n\t- require(bool,string)(now == ilks[ilk].rho,Jug/rho-not-updated)\nJug.rmul (jug.sol#96-100) uses a dangerous strict equality:\n\t- require(bool)(y == 0 || z / y == x)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": 130,
                    "vulnerability_code": "    function drip(bytes32 ilk) external returns (uint rate) {\n\n        require(now >= ilks[ilk].rho, \"Jug/invalid-now\");\n\n        (, uint prev) = vat.ilks(ilk);\n\n        rate = rmul(rpow(add(base, ilks[ilk].duty), now - ilks[ilk].rho, ONE), prev);\n\n        vat.fold(ilk, vow, diff(rate, prev));\n\n        ilks[ilk].rho = now;\n",
                    "message": "Reentrancy in Jug.drip (jug.sol#124-130):\n\tExternal calls:\n\t- (prev) = vat.ilks(ilk) (jug.sol#126)\n\t- vat.fold(ilk,vow,diff(rate,prev)) (jug.sol#128)\n\tState variables written after the call(s):\n\t- ilks (jug.sol#129)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "    function rpow(uint x, uint n, uint b) internal pure returns (uint z) {\n\n      assembly {\n\n        switch x case 0 {switch n case 0 {z := b} default {z := 0}}\n\n        default {\n\n          switch mod(n, 2) case 0 { z := b } default { z := x }\n\n          let half := div(b, 2)  // for rounding.\n\n          for { n := div(n, 2) } n { n := div(n,2) } {\n\n            let xx := mul(x, x)\n\n            if iszero(eq(div(xx, x), x)) { revert(0,0) }\n\n            let xxRound := add(xx, half)\n\n            if lt(xxRound, xx) { revert(0,0) }\n\n            x := div(xxRound, b)\n\n            if mod(n,2) {\n\n              let zx := mul(z, x)\n\n              if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n\n              let zxRound := add(zx, half)\n\n              if lt(zxRound, zx) { revert(0,0) }\n\n              z := div(zxRound, b)\n\n            }\n\n          }\n\n        }\n\n      }\n",
                    "message": "Jug.rpow uses assembly (jug.sol#64-86)\n\t- jug.sol#65-85\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": "Detected issues with version pragma in jug.sol:\n\t- pragma solidity>=0.5.12 (jug.sol#22): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external returns (\n",
                    "message": "Parameter '' of VatLike.ilks (jug.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function fold(bytes32,address,int) external;\n",
                    "message": "Parameter '' of VatLike.fold (jug.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function fold(bytes32,address,int) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.fold (jug.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function fold(bytes32,address,int) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.fold (jug.sol#33) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXACT_TIME",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now == ilks[ilk].rho, \"Jug/rho-not-updated\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function rpow(uint x, uint n, uint b) internal pure returns (uint z) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what == \"duty\") ilks[ilk].duty = data;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what == \"base\") base = data;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what == \"vow\") vow = data;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function rpow(uint x, uint n, uint b) internal pure returns (uint z) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant ONE = 10 ** 27;\n",
                    "message": null
                }
            ]
        }
    },
    "dss-8aae83e0b46c009f4d4dd9306cd0f865ca7e2dc7/src/flap.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256  public kicks = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address vat_, address gem_) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wards[msg.sender] = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        vat = VatLike(vat_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        gem = GemLike(gem_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        live = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"Flapper/not-authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Flapper/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"Flapper/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(kicks < uint(-1), \"Flapper/overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].end < now, \"Flapper/not-finished\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].tic == 0, \"Flapper/bid-already-placed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"Flapper/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].guy != address(0), \"Flapper/guy-not-set\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].tic > now || bids[id].tic == 0, \"Flapper/already-finished-tic\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].end > now, \"Flapper/already-finished-end\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(lot == bids[id].lot, \"Flapper/lot-not-matching\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bid >  bids[id].bid, \"Flapper/bid-not-higher\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(mul(bid, ONE) >= mul(beg, bids[id].bid), \"Flapper/insufficient-increase\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"Flapper/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flapper/not-finished\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 0, \"Flapper/still-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].guy != address(0), \"Flapper/guy-not-set\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flapper/not-finished\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": 153,
                    "vulnerability_code": "    function deal(uint id) external {\n\n        require(live == 1, \"Flapper/not-live\");\n\n        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flapper/not-finished\");\n\n        vat.move(address(this), bids[id].guy, bids[id].lot);\n\n        gem.burn(address(this), bids[id].bid);\n\n        delete bids[id];\n",
                    "message": "Reentrancy in Flapper.deal (flap.sol#147-153):\n\tExternal calls:\n\t- vat.move(address(this),bids[id].guy,bids[id].lot) (flap.sol#150)\n\t- gem.burn(address(this),bids[id].bid) (flap.sol#151)\n\tState variables written after the call(s):\n\t- bids (flap.sol#152)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 146,
                    "vulnerability_code": "    function tend(uint id, uint lot, uint bid) external {\n\n        require(live == 1, \"Flapper/not-live\");\n\n        require(bids[id].guy != address(0), \"Flapper/guy-not-set\");\n\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flapper/already-finished-tic\");\n\n        require(bids[id].end > now, \"Flapper/already-finished-end\");\n\n\n\n        require(lot == bids[id].lot, \"Flapper/lot-not-matching\");\n\n        require(bid >  bids[id].bid, \"Flapper/bid-not-higher\");\n\n        require(mul(bid, ONE) >= mul(beg, bids[id].bid), \"Flapper/insufficient-increase\");\n\n\n\n        if (msg.sender != bids[id].guy) {\n\n            gem.move(msg.sender, bids[id].guy, bids[id].bid);\n\n            bids[id].guy = msg.sender;\n\n        }\n\n        gem.move(msg.sender, address(this), bid - bids[id].bid);\n\n\n\n        bids[id].bid = bid;\n\n        bids[id].tic = add(uint48(now), ttl);\n",
                    "message": "Reentrancy in Flapper.tend (flap.sol#128-146):\n\tExternal calls:\n\t- gem.move(msg.sender,bids[id].guy,bids[id].bid) (flap.sol#139)\n\tState variables written after the call(s):\n\t- bids (flap.sol#140)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 146,
                    "vulnerability_code": "    function tend(uint id, uint lot, uint bid) external {\n\n        require(live == 1, \"Flapper/not-live\");\n\n        require(bids[id].guy != address(0), \"Flapper/guy-not-set\");\n\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flapper/already-finished-tic\");\n\n        require(bids[id].end > now, \"Flapper/already-finished-end\");\n\n\n\n        require(lot == bids[id].lot, \"Flapper/lot-not-matching\");\n\n        require(bid >  bids[id].bid, \"Flapper/bid-not-higher\");\n\n        require(mul(bid, ONE) >= mul(beg, bids[id].bid), \"Flapper/insufficient-increase\");\n\n\n\n        if (msg.sender != bids[id].guy) {\n\n            gem.move(msg.sender, bids[id].guy, bids[id].bid);\n\n            bids[id].guy = msg.sender;\n\n        }\n\n        gem.move(msg.sender, address(this), bid - bids[id].bid);\n\n\n\n        bids[id].bid = bid;\n\n        bids[id].tic = add(uint48(now), ttl);\n",
                    "message": "Reentrancy in Flapper.tend (flap.sol#128-146):\n\tExternal calls:\n\t- gem.move(msg.sender,bids[id].guy,bids[id].bid) (flap.sol#139)\n\t- gem.move(msg.sender,address(this),bid - bids[id].bid) (flap.sol#142)\n\tState variables written after the call(s):\n\t- bids (flap.sol#144)\n\t- bids (flap.sol#145)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": 164,
                    "vulnerability_code": "    function yank(uint id) external {\n\n        require(live == 0, \"Flapper/still-live\");\n\n        require(bids[id].guy != address(0), \"Flapper/guy-not-set\");\n\n        gem.move(address(this), bids[id].guy, bids[id].bid);\n\n        delete bids[id];\n",
                    "message": "Reentrancy in Flapper.yank (flap.sol#159-164):\n\tExternal calls:\n\t- gem.move(address(this),bids[id].guy,bids[id].bid) (flap.sol#162)\n\tState variables written after the call(s):\n\t- bids (flap.sol#163)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": "Detected issues with version pragma in flap.sol:\n\t- pragma solidity>=0.5.12 (flap.sol#22): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint) external;\n",
                    "message": "Parameter '' of VatLike.move (flap.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.move (flap.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.move (flap.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint) external;\n",
                    "message": "Parameter '' of GemLike.move (flap.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint) external;\n",
                    "message": "Parameter '_scope_0' of GemLike.move (flap.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint) external;\n",
                    "message": "Parameter '_scope_1' of GemLike.move (flap.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(address,uint) external;\n",
                    "message": "Parameter '' of GemLike.burn (flap.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(address,uint) external;\n",
                    "message": "Parameter '_scope_0' of GemLike.burn (flap.sol#33) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (what == \"tau\") tau = uint48(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256  constant ONE = 1.00E18;\n",
                    "message": null
                }
            ]
        }
    },
    "dss-8aae83e0b46c009f4d4dd9306cd0f865ca7e2dc7/src/abaci.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wards[msg.sender] = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit Rely(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wards[msg.sender] = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit Rely(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"LinearDecrease/not-authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"LinearDecrease/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"StairstepExponentialDecrease/not-authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if      (what ==  \"cut\") require((cut = data) <= RAY, \"StairstepExponentialDecrease/cut-gt-RAY\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"StairstepExponentialDecrease/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"LinearDecrease/file-unrecognized-param\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"StairstepExponentialDecrease/not-authorized\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if      (what ==  \"cut\") require((cut = data) <= RAY, \"StairstepExponentialDecrease/cut-gt-RAY\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"StairstepExponentialDecrease/file-unrecognized-param\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "    function rpow(uint256 x, uint256 n, uint256 b) internal pure returns (uint256 z) {\n\n        assembly {\n\n            switch n case 0 { z := b }\n\n            default {\n\n                switch x case 0 { z := 0 }\n\n                default {\n\n                    switch mod(n, 2) case 0 { z := b } default { z := x }\n\n                    let half := div(b, 2)  // for rounding.\n\n                    for { n := div(n, 2) } n { n := div(n,2) } {\n\n                        let xx := mul(x, x)\n\n                        if shr(128, x) { revert(0,0) }\n\n                        let xxRound := add(xx, half)\n\n                        if lt(xxRound, xx) { revert(0,0) }\n\n                        x := div(xxRound, b)\n\n                        if mod(n,2) {\n\n                            let zx := mul(z, x)\n\n                            if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n\n                            let zxRound := add(zx, half)\n\n                            if lt(zxRound, zx) { revert(0,0) }\n\n                            z := div(zxRound, b)\n\n                        }\n\n                    }\n\n                }\n\n            }\n\n        }\n",
                    "message": "StairstepExponentialDecrease.rpow (abaci.sol#136-161) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "    function rpow(uint256 x, uint256 n, uint256 b) internal pure returns (uint256 z) {\n\n        assembly {\n\n            switch n case 0 { z := b }\n\n            default {\n\n                switch x case 0 { z := 0 }\n\n                default {\n\n                    switch mod(n, 2) case 0 { z := b } default { z := x }\n\n                    let half := div(b, 2)  // for rounding.\n\n                    for { n := div(n, 2) } n { n := div(n,2) } {\n\n                        let xx := mul(x, x)\n\n                        if shr(128, x) { revert(0,0) }\n\n                        let xxRound := add(xx, half)\n\n                        if lt(xxRound, xx) { revert(0,0) }\n\n                        x := div(xxRound, b)\n\n                        if mod(n,2) {\n\n                            let zx := mul(z, x)\n\n                            if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n\n                            let zxRound := add(zx, half)\n\n                            if lt(zxRound, zx) { revert(0,0) }\n\n                            z := div(zxRound, b)\n\n                        }\n\n                    }\n\n                }\n\n            }\n\n        }\n",
                    "message": "StairstepExponentialDecrease.rpow uses assembly (abaci.sol#136-161)\n\t- abaci.sol#137-160\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.12;\n",
                    "message": "Detected issues with version pragma in abaci.sol:\n\t- pragma solidity>=0.6.12 (abaci.sol#20): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function price(uint256, uint256) external view returns (uint256);\n",
                    "message": "Parameter '' of Abacus.price (abaci.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function price(uint256, uint256) external view returns (uint256);\n",
                    "message": "Parameter '_scope_0' of Abacus.price (abaci.sol#26) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function rpow(uint256 x, uint256 n, uint256 b) internal pure returns (uint256 z) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what ==  \"tau\") tau = data;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (what == \"step\") step = data;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function rpow(uint256 x, uint256 n, uint256 b) internal pure returns (uint256 z) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant RAY = 10 ** 27;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant RAY = 10 ** 27;\n",
                    "message": null
                }
            ]
        }
    },
    "dss-8aae83e0b46c009f4d4dd9306cd0f865ca7e2dc7/src/spot.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address vat_) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wards[msg.sender] = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        vat = VatLike(vat_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        par = ONE;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        live = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"Spotter/not-authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"Spotter/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Spotter/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"Spotter/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Spotter/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"Spotter/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Spotter/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": "Detected issues with version pragma in spot.sol:\n\t- pragma solidity>=0.5.12 (spot.sol#20): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function file(bytes32, bytes32, uint) external;\n",
                    "message": "Parameter '' of VatLike.file (spot.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function file(bytes32, bytes32, uint) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.file (spot.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function file(bytes32, bytes32, uint) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.file (spot.sol#27) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what == \"pip\") ilks[ilk].pip = PipLike(pip_);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what == \"par\") par = data;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what == \"mat\") ilks[ilk].mat = data;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function peek() external returns (bytes32, bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant ONE = 10 ** 27;\n",
                    "message": null
                }
            ]
        }
    },
    "dss-8aae83e0b46c009f4d4dd9306cd0f865ca7e2dc7/src/join.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address vat_, bytes32 ilk_, address gem_) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wards[msg.sender] = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        live = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        vat = VatLike(vat_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ilk = ilk_;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        gem = GemLike(gem_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        dec = gem.decimals();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address vat_, address dai_) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wards[msg.sender] = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        live = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        vat = VatLike(vat_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        dai = DSTokenLike(dai_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"GemJoin/not-authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"GemJoin/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(int(wad) >= 0, \"GemJoin/overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(gem.transferFrom(msg.sender, address(this), wad), \"GemJoin/failed-transfer\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wad <= 2 ** 255, \"GemJoin/overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(gem.transfer(usr, wad), \"GemJoin/failed-transfer\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"DaiJoin/not-authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"DaiJoin/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_16"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": "Detected issues with version pragma in join.sol:\n\t- pragma solidity>=0.5.12 (join.sol#22): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address,uint) external returns (bool);\n",
                    "message": "Parameter '' of GemLike.transfer (join.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address,uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of GemLike.transfer (join.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address,address,uint) external returns (bool);\n",
                    "message": "Parameter '' of GemLike.transferFrom (join.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address,address,uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of GemLike.transferFrom (join.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address,address,uint) external returns (bool);\n",
                    "message": "Parameter '_scope_1' of GemLike.transferFrom (join.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address,uint) external;\n",
                    "message": "Parameter '' of DSTokenLike.mint (join.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address,uint) external;\n",
                    "message": "Parameter '_scope_0' of DSTokenLike.mint (join.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(address,uint) external;\n",
                    "message": "Parameter '' of DSTokenLike.burn (join.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(address,uint) external;\n",
                    "message": "Parameter '_scope_0' of DSTokenLike.burn (join.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function slip(bytes32,address,int) external;\n",
                    "message": "Parameter '' of VatLike.slip (join.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function slip(bytes32,address,int) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.slip (join.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function slip(bytes32,address,int) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.slip (join.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint) external;\n",
                    "message": "Parameter '' of VatLike.move (join.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.move (join.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.move (join.sol#41) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant ONE = 10 ** 27;\n",
                    "message": null
                }
            ]
        }
    },
    "dss-8aae83e0b46c009f4d4dd9306cd0f865ca7e2dc7/src/clip.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public stopped = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address vat_, address spotter_, address dog_, bytes32 ilk_) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        vat     = VatLike(vat_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        spotter = SpotterLike(spotter_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        dog     = DogLike(dog_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ilk     = ilk_;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        buf     = RAY;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wards[msg.sender] = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit Rely(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"Clipper/not-authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(locked == 0, \"Clipper/system-locked\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(stopped < level, \"Clipper/stopped-incorrect\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Clipper/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Clipper/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(has, \"Clipper/invalid-price\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tab  >          0, \"Clipper/zero-tab\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(lot  >          0, \"Clipper/zero-lot\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(usr != address(0), \"Clipper/zero-usr\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(id   >          0, \"Clipper/overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(top > 0, \"Clipper/zero-top-price\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(usr != address(0), \"Clipper/not-running-auction\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(done, \"Clipper/cannot-reset\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(top > 0, \"Clipper/zero-top-price\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(usr != address(0), \"Clipper/not-running-auction\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(!done, \"Clipper/needs-reset\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(max >= price, \"Clipper/too-expensive\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    require(tab > dust, \"Clipper/no-partial-purchase\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sales[id].usr != address(0), \"Clipper/not-running-auction\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (tab >= dust && mul(lot, price) >= dust) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                coin = add(_tip, wmul(tab, _chip));\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                vat.suck(vow, kpr, coin);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else if (owe < tab && slice < lot) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                // if slice == lot => auction completed => dust doesn't matter\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                (,,,, uint256 dust) = vat.ilks(ilk);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                if (tab - owe < dust) {     // safe as owe < tab\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    // if tab <= dust, buyers have to buy the whole thing\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    require(tab > dust, \"Clipper/no-partial-purchase\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    // Adjust amount to pay\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    owe = tab - dust;       // owe' <= owe\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    // Adjust slice\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 383,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    slice = owe / price;    // slice' = owe' / price < owe / price == slice < lot\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (data.length > 0 && who != address(vat) && who != address(dog_)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                ClipperCallee(who).clipperCall(msg.sender, owe, slice, data);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_37"
            ],
            "vulnerability_findings": [
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": 194,
                    "vulnerability_code": "    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n\n        require(y == 0 || (z = x * y) / y == x);\n",
                    "message": "Clipper.mul (clip.sol#192-194) uses a dangerous strict equality:\n\t- require(bool)(y == 0 || (z = x * y) / y == x)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 432,
                    "vulnerability_code": "    function _remove(uint256 id) internal {\n\n        uint256 _move    = active[active.length - 1];\n\n        if (id != _move) {\n\n            uint256 _index   = sales[id].pos;\n\n            active[_index]   = _move;\n\n            sales[_move].pos = _index;\n\n        }\n\n        active.pop();\n\n        delete sales[id];\n",
                    "message": "Reentrancy in Clipper._remove (clip.sol#423-432):\n\tExternal calls:\n\t- active.pop() (clip.sol#430)\n\tState variables written after the call(s):\n\t- sales (clip.sol#431)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": 265,
                    "vulnerability_code": "    function kick(\n\n        uint256 tab,  // Debt                   [rad]\n\n        uint256 lot,  // Collateral             [wad]\n\n        address usr,  // Liquidated CDP\n\n        address kpr   // Keeper that called dog.bark()\n\n    ) external auth lock isStopped(1) returns (uint256 id) {\n\n        // Input validation\n\n        require(tab  >          0, \"Clipper/zero-tab\");\n\n        require(lot  >          0, \"Clipper/zero-lot\");\n\n        require(usr != address(0), \"Clipper/zero-usr\");\n\n        id = ++kicks;\n\n        require(id   >          0, \"Clipper/overflow\");\n\n\n\n        active.push(id);\n\n\n\n        sales[id].pos = active.length - 1;\n\n\n\n        sales[id].tab = tab;\n\n        sales[id].lot = lot;\n\n        sales[id].usr = usr;\n\n        sales[id].tic = uint96(block.timestamp);\n\n\n\n        uint256 top;\n\n        top = rmul(getPrice(), buf);\n\n        require(top > 0, \"Clipper/zero-top-price\");\n\n        sales[id].top = top;\n\n\n\n        // incentive to kick auction\n\n        uint256 _tip  = tip;\n\n        uint256 _chip = chip;\n\n        uint256 coin;\n\n        if (_tip > 0 || _chip > 0) {\n\n            coin = add(_tip, wmul(tab, _chip));\n\n            vat.suck(vow, kpr, coin);\n\n        }\n\n\n\n        emit Kick(id, top, tab, lot, usr, kpr, coin);\n",
                    "message": "Reentrancy in Clipper.kick (clip.sol#228-265):\n\tExternal calls:\n\t- top = rmul(getPrice(),buf) (clip.sol#251)\n\tState variables written after the call(s):\n\t- sales (clip.sol#253)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": 304,
                    "vulnerability_code": "    function redo(uint256 id, address kpr) external lock isStopped(2) {\n\n        // Read auction data\n\n        address usr = sales[id].usr;\n\n        uint96  tic = sales[id].tic;\n\n        uint256 top = sales[id].top;\n\n\n\n        require(usr != address(0), \"Clipper/not-running-auction\");\n\n\n\n        // Check that auction needs reset\n\n        // and compute current price [ray]\n\n        (bool done,) = status(tic, top);\n\n        require(done, \"Clipper/cannot-reset\");\n\n\n\n        uint256 tab   = sales[id].tab;\n\n        uint256 lot   = sales[id].lot;\n\n        sales[id].tic = uint96(block.timestamp);\n\n\n\n        uint256 price = getPrice();\n\n        top = rmul(price, buf);\n\n        require(top > 0, \"Clipper/zero-top-price\");\n\n        sales[id].top = top;\n\n\n\n        // incentive to redo auction\n\n        uint256 _tip  = tip;\n\n        uint256 _chip = chip;\n\n        uint256 coin;\n\n        if (_tip > 0 || _chip > 0) {\n\n            (,,,, uint256 dust) = vat.ilks(ilk);\n\n            if (tab >= dust && mul(lot, price) >= dust) {\n\n                coin = add(_tip, wmul(tab, _chip));\n\n                vat.suck(vow, kpr, coin);\n\n            }\n\n        }\n\n\n\n        emit Redo(id, top, tab, lot, usr, kpr, coin);\n",
                    "message": "Reentrancy in Clipper.redo (clip.sol#269-304):\n\tExternal calls:\n\t- (done) = status(tic,top) (clip.sol#279)\n\tState variables written after the call(s):\n\t- sales (clip.sol#284)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": 304,
                    "vulnerability_code": "    function redo(uint256 id, address kpr) external lock isStopped(2) {\n\n        // Read auction data\n\n        address usr = sales[id].usr;\n\n        uint96  tic = sales[id].tic;\n\n        uint256 top = sales[id].top;\n\n\n\n        require(usr != address(0), \"Clipper/not-running-auction\");\n\n\n\n        // Check that auction needs reset\n\n        // and compute current price [ray]\n\n        (bool done,) = status(tic, top);\n\n        require(done, \"Clipper/cannot-reset\");\n\n\n\n        uint256 tab   = sales[id].tab;\n\n        uint256 lot   = sales[id].lot;\n\n        sales[id].tic = uint96(block.timestamp);\n\n\n\n        uint256 price = getPrice();\n\n        top = rmul(price, buf);\n\n        require(top > 0, \"Clipper/zero-top-price\");\n\n        sales[id].top = top;\n\n\n\n        // incentive to redo auction\n\n        uint256 _tip  = tip;\n\n        uint256 _chip = chip;\n\n        uint256 coin;\n\n        if (_tip > 0 || _chip > 0) {\n\n            (,,,, uint256 dust) = vat.ilks(ilk);\n\n            if (tab >= dust && mul(lot, price) >= dust) {\n\n                coin = add(_tip, wmul(tab, _chip));\n\n                vat.suck(vow, kpr, coin);\n\n            }\n\n        }\n\n\n\n        emit Redo(id, top, tab, lot, usr, kpr, coin);\n",
                    "message": "Reentrancy in Clipper.redo (clip.sol#269-304):\n\tExternal calls:\n\t- (done) = status(tic,top) (clip.sol#279)\n\t- price = getPrice() (clip.sol#286)\n\tState variables written after the call(s):\n\t- sales (clip.sol#289)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "    function take(\n\n        uint256 id,           // Auction id\n\n        uint256 amt,          // Upper limit on amount of collateral to buy  [wad]\n\n        uint256 max,          // Maximum acceptable price (DAI / collateral) [ray]\n\n        address who,          // Receiver of collateral and external call address\n\n        bytes calldata data   // Data to pass in external call; if length 0, no call is done\n\n    ) external lock isStopped(2) {\n\n\n\n        address usr = sales[id].usr;\n\n        uint96  tic = sales[id].tic;\n\n\n\n        require(usr != address(0), \"Clipper/not-running-auction\");\n\n\n\n        uint256 price;\n\n        {\n\n            bool done;\n\n            (done, price) = status(tic, sales[id].top);\n\n\n\n            // Check that auction doesn't need reset\n\n            require(!done, \"Clipper/needs-reset\");\n\n        }\n\n\n\n        // Ensure price is acceptable to buyer\n\n        require(max >= price, \"Clipper/too-expensive\");\n\n\n\n        uint256 lot = sales[id].lot;\n\n        uint256 tab = sales[id].tab;\n\n        uint256 owe;\n\n\n\n        {\n\n            // Purchase as much as possible, up to amt\n\n            uint256 slice = min(lot, amt);  // slice <= lot\n\n\n\n            // DAI needed to buy a slice of this sale\n\n            owe = mul(slice, price);\n\n\n\n            // Don't collect more than tab of DAI\n\n            if (owe > tab) {\n\n                // Total debt will be paid\n\n                owe = tab;                  // owe' <= owe\n\n                // Adjust slice\n\n                slice = owe / price;        // slice' = owe' / price <= owe / price == slice <= lot\n\n            } else if (owe < tab && slice < lot) {\n\n                // if slice == lot => auction completed => dust doesn't matter\n\n                (,,,, uint256 dust) = vat.ilks(ilk);\n\n                if (tab - owe < dust) {     // safe as owe < tab\n\n                    // if tab <= dust, buyers have to buy the whole thing\n\n                    require(tab > dust, \"Clipper/no-partial-purchase\");\n\n                    // Adjust amount to pay\n\n                    owe = tab - dust;       // owe' <= owe\n\n                    // Adjust slice\n\n                    slice = owe / price;    // slice' = owe' / price < owe / price == slice < lot\n\n                }\n\n            }\n\n\n\n            // Calculate remaining tab after operation\n\n            tab = tab - owe;  // safe since owe <= tab\n\n            // Calculate remaining lot after operation\n\n            lot = lot - slice;\n\n\n\n            // Send collateral to who\n\n            vat.flux(ilk, address(this), who, slice);\n\n\n\n            // Do external call (if data is defined) but to be\n\n            // extremely careful we don't allow to do it to the two\n\n            // contracts which the Clipper needs to be authorized\n\n            DogLike dog_ = dog;\n\n            if (data.length > 0 && who != address(vat) && who != address(dog_)) {\n\n                ClipperCallee(who).clipperCall(msg.sender, owe, slice, data);\n\n            }\n\n\n\n            // Get DAI from caller\n\n            vat.move(msg.sender, vow, owe);\n\n\n\n            // Removes Dai out for liquidation from accumulator\n\n            dog_.digs(ilk, lot == 0 ? tab + owe : owe);\n\n        }\n\n\n\n        if (lot == 0) {\n\n            _remove(id);\n\n        } else if (tab == 0) {\n\n            vat.flux(ilk, address(this), usr, lot);\n\n            _remove(id);\n\n        } else {\n\n            sales[id].tab = tab;\n\n            sales[id].lot = lot;\n\n        }\n\n\n\n        emit Take(id, max, price, owe, tab, lot, usr);\n",
                    "message": "Reentrancy in Clipper.take (clip.sol#332-421):\n\tExternal calls:\n\t- (done,price) = status(tic,sales[id].top) (clip.sol#348)\n\t- (dust) = vat.ilks(ilk) (clip.sol#376)\n\t- vat.flux(ilk,address(this),who,slice) (clip.sol#393)\n\t- ClipperCallee(who).clipperCall(msg.sender,owe,slice,data) (clip.sol#400)\n\t- vat.move(msg.sender,vow,owe) (clip.sol#404)\n\t- _remove(id) (clip.sol#411)\n\t- dog_.digs(ilk,tab + owe) (clip.sol#407)\n\t- dog_.digs(ilk,owe) (clip.sol#407)\n\tState variables written after the call(s):\n\t- sales (clip.sol#411)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "    function take(\n\n        uint256 id,           // Auction id\n\n        uint256 amt,          // Upper limit on amount of collateral to buy  [wad]\n\n        uint256 max,          // Maximum acceptable price (DAI / collateral) [ray]\n\n        address who,          // Receiver of collateral and external call address\n\n        bytes calldata data   // Data to pass in external call; if length 0, no call is done\n\n    ) external lock isStopped(2) {\n\n\n\n        address usr = sales[id].usr;\n\n        uint96  tic = sales[id].tic;\n\n\n\n        require(usr != address(0), \"Clipper/not-running-auction\");\n\n\n\n        uint256 price;\n\n        {\n\n            bool done;\n\n            (done, price) = status(tic, sales[id].top);\n\n\n\n            // Check that auction doesn't need reset\n\n            require(!done, \"Clipper/needs-reset\");\n\n        }\n\n\n\n        // Ensure price is acceptable to buyer\n\n        require(max >= price, \"Clipper/too-expensive\");\n\n\n\n        uint256 lot = sales[id].lot;\n\n        uint256 tab = sales[id].tab;\n\n        uint256 owe;\n\n\n\n        {\n\n            // Purchase as much as possible, up to amt\n\n            uint256 slice = min(lot, amt);  // slice <= lot\n\n\n\n            // DAI needed to buy a slice of this sale\n\n            owe = mul(slice, price);\n\n\n\n            // Don't collect more than tab of DAI\n\n            if (owe > tab) {\n\n                // Total debt will be paid\n\n                owe = tab;                  // owe' <= owe\n\n                // Adjust slice\n\n                slice = owe / price;        // slice' = owe' / price <= owe / price == slice <= lot\n\n            } else if (owe < tab && slice < lot) {\n\n                // if slice == lot => auction completed => dust doesn't matter\n\n                (,,,, uint256 dust) = vat.ilks(ilk);\n\n                if (tab - owe < dust) {     // safe as owe < tab\n\n                    // if tab <= dust, buyers have to buy the whole thing\n\n                    require(tab > dust, \"Clipper/no-partial-purchase\");\n\n                    // Adjust amount to pay\n\n                    owe = tab - dust;       // owe' <= owe\n\n                    // Adjust slice\n\n                    slice = owe / price;    // slice' = owe' / price < owe / price == slice < lot\n\n                }\n\n            }\n\n\n\n            // Calculate remaining tab after operation\n\n            tab = tab - owe;  // safe since owe <= tab\n\n            // Calculate remaining lot after operation\n\n            lot = lot - slice;\n\n\n\n            // Send collateral to who\n\n            vat.flux(ilk, address(this), who, slice);\n\n\n\n            // Do external call (if data is defined) but to be\n\n            // extremely careful we don't allow to do it to the two\n\n            // contracts which the Clipper needs to be authorized\n\n            DogLike dog_ = dog;\n\n            if (data.length > 0 && who != address(vat) && who != address(dog_)) {\n\n                ClipperCallee(who).clipperCall(msg.sender, owe, slice, data);\n\n            }\n\n\n\n            // Get DAI from caller\n\n            vat.move(msg.sender, vow, owe);\n\n\n\n            // Removes Dai out for liquidation from accumulator\n\n            dog_.digs(ilk, lot == 0 ? tab + owe : owe);\n\n        }\n\n\n\n        if (lot == 0) {\n\n            _remove(id);\n\n        } else if (tab == 0) {\n\n            vat.flux(ilk, address(this), usr, lot);\n\n            _remove(id);\n\n        } else {\n\n            sales[id].tab = tab;\n\n            sales[id].lot = lot;\n\n        }\n\n\n\n        emit Take(id, max, price, owe, tab, lot, usr);\n",
                    "message": "Reentrancy in Clipper.take (clip.sol#332-421):\n\tExternal calls:\n\t- (done,price) = status(tic,sales[id].top) (clip.sol#348)\n\t- (dust) = vat.ilks(ilk) (clip.sol#376)\n\t- vat.flux(ilk,address(this),who,slice) (clip.sol#393)\n\t- ClipperCallee(who).clipperCall(msg.sender,owe,slice,data) (clip.sol#400)\n\t- vat.move(msg.sender,vow,owe) (clip.sol#404)\n\t- vat.flux(ilk,address(this),usr,lot) (clip.sol#413)\n\t- _remove(id) (clip.sol#414)\n\t- dog_.digs(ilk,tab + owe) (clip.sol#407)\n\t- dog_.digs(ilk,owe) (clip.sol#407)\n\tState variables written after the call(s):\n\t- sales (clip.sol#414)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "    function take(\n\n        uint256 id,           // Auction id\n\n        uint256 amt,          // Upper limit on amount of collateral to buy  [wad]\n\n        uint256 max,          // Maximum acceptable price (DAI / collateral) [ray]\n\n        address who,          // Receiver of collateral and external call address\n\n        bytes calldata data   // Data to pass in external call; if length 0, no call is done\n\n    ) external lock isStopped(2) {\n\n\n\n        address usr = sales[id].usr;\n\n        uint96  tic = sales[id].tic;\n\n\n\n        require(usr != address(0), \"Clipper/not-running-auction\");\n\n\n\n        uint256 price;\n\n        {\n\n            bool done;\n\n            (done, price) = status(tic, sales[id].top);\n\n\n\n            // Check that auction doesn't need reset\n\n            require(!done, \"Clipper/needs-reset\");\n\n        }\n\n\n\n        // Ensure price is acceptable to buyer\n\n        require(max >= price, \"Clipper/too-expensive\");\n\n\n\n        uint256 lot = sales[id].lot;\n\n        uint256 tab = sales[id].tab;\n\n        uint256 owe;\n\n\n\n        {\n\n            // Purchase as much as possible, up to amt\n\n            uint256 slice = min(lot, amt);  // slice <= lot\n\n\n\n            // DAI needed to buy a slice of this sale\n\n            owe = mul(slice, price);\n\n\n\n            // Don't collect more than tab of DAI\n\n            if (owe > tab) {\n\n                // Total debt will be paid\n\n                owe = tab;                  // owe' <= owe\n\n                // Adjust slice\n\n                slice = owe / price;        // slice' = owe' / price <= owe / price == slice <= lot\n\n            } else if (owe < tab && slice < lot) {\n\n                // if slice == lot => auction completed => dust doesn't matter\n\n                (,,,, uint256 dust) = vat.ilks(ilk);\n\n                if (tab - owe < dust) {     // safe as owe < tab\n\n                    // if tab <= dust, buyers have to buy the whole thing\n\n                    require(tab > dust, \"Clipper/no-partial-purchase\");\n\n                    // Adjust amount to pay\n\n                    owe = tab - dust;       // owe' <= owe\n\n                    // Adjust slice\n\n                    slice = owe / price;    // slice' = owe' / price < owe / price == slice < lot\n\n                }\n\n            }\n\n\n\n            // Calculate remaining tab after operation\n\n            tab = tab - owe;  // safe since owe <= tab\n\n            // Calculate remaining lot after operation\n\n            lot = lot - slice;\n\n\n\n            // Send collateral to who\n\n            vat.flux(ilk, address(this), who, slice);\n\n\n\n            // Do external call (if data is defined) but to be\n\n            // extremely careful we don't allow to do it to the two\n\n            // contracts which the Clipper needs to be authorized\n\n            DogLike dog_ = dog;\n\n            if (data.length > 0 && who != address(vat) && who != address(dog_)) {\n\n                ClipperCallee(who).clipperCall(msg.sender, owe, slice, data);\n\n            }\n\n\n\n            // Get DAI from caller\n\n            vat.move(msg.sender, vow, owe);\n\n\n\n            // Removes Dai out for liquidation from accumulator\n\n            dog_.digs(ilk, lot == 0 ? tab + owe : owe);\n\n        }\n\n\n\n        if (lot == 0) {\n\n            _remove(id);\n\n        } else if (tab == 0) {\n\n            vat.flux(ilk, address(this), usr, lot);\n\n            _remove(id);\n\n        } else {\n\n            sales[id].tab = tab;\n\n            sales[id].lot = lot;\n\n        }\n\n\n\n        emit Take(id, max, price, owe, tab, lot, usr);\n",
                    "message": "Reentrancy in Clipper.take (clip.sol#332-421):\n\tExternal calls:\n\t- (done,price) = status(tic,sales[id].top) (clip.sol#348)\n\t- (dust) = vat.ilks(ilk) (clip.sol#376)\n\t- vat.flux(ilk,address(this),who,slice) (clip.sol#393)\n\t- ClipperCallee(who).clipperCall(msg.sender,owe,slice,data) (clip.sol#400)\n\t- vat.move(msg.sender,vow,owe) (clip.sol#404)\n\t- dog_.digs(ilk,tab + owe) (clip.sol#407)\n\t- dog_.digs(ilk,owe) (clip.sol#407)\n\tState variables written after the call(s):\n\t- sales (clip.sol#416)\n\t- sales (clip.sol#417)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": 470,
                    "vulnerability_code": "    function yank(uint256 id) external auth lock {\n\n        require(sales[id].usr != address(0), \"Clipper/not-running-auction\");\n\n        dog.digs(ilk, sales[id].tab);\n\n        vat.flux(ilk, address(this), msg.sender, sales[id].lot);\n\n        _remove(id);\n\n        emit Yank(id);\n",
                    "message": "Reentrancy in Clipper.yank (clip.sol#464-470):\n\tExternal calls:\n\t- dog.digs(ilk,sales[id].tab) (clip.sol#466)\n\t- vat.flux(ilk,address(this),msg.sender,sales[id].lot) (clip.sol#467)\n\t- _remove(id) (clip.sol#468)\n\tState variables written after the call(s):\n\t- sales (clip.sol#468)\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 coin;\n",
                    "message": "coin in Clipper.redo (clip.sol#294) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 coin;\n",
                    "message": "coin in Clipper.kick (clip.sol#258) is a local variable never initialiazed\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 432,
                    "vulnerability_code": "    function _remove(uint256 id) internal {\n\n        uint256 _move    = active[active.length - 1];\n\n        if (id != _move) {\n\n            uint256 _index   = sales[id].pos;\n\n            active[_index]   = _move;\n\n            sales[_move].pos = _index;\n\n        }\n\n        active.pop();\n\n        delete sales[id];\n",
                    "message": "Clipper._remove (clip.sol#423-432) does not use the value returned by external calls:\n\t-active.pop() (clip.sol#430)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n\n        require((z = x - y) <= x);\n",
                    "message": "Clipper.sub (clip.sol#189-191) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)((z = x - y) <= x) (clip.sol#190)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": 194,
                    "vulnerability_code": "    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n\n        require(y == 0 || (z = x * y) / y == x);\n",
                    "message": "Clipper.mul (clip.sol#192-194) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(y == 0 || (z = x * y) / y == x) (clip.sol#193)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": 461,
                    "vulnerability_code": "    function status(uint96 tic, uint256 top) internal view returns (bool done, uint256 price) {\n\n        price = calc.price(top, sub(block.timestamp, tic));\n\n        done  = (sub(block.timestamp, tic) > tail || rdiv(price, top) < cusp);\n",
                    "message": "Clipper.status (clip.sol#458-461) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- done = (sub(block.timestamp,tic) > tail || rdiv(price,top) < cusp) (clip.sol#460)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.12;\n",
                    "message": "Detected issues with version pragma in clip.sol:\n\t- pragma solidity>=0.6.12 (clip.sol#20): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint256) external;\n",
                    "message": "Parameter '' of VatLike.move (clip.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint256) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.move (clip.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint256) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.move (clip.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function flux(bytes32,address,address,uint256) external;\n",
                    "message": "Parameter '' of VatLike.flux (clip.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function flux(bytes32,address,address,uint256) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.flux (clip.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function flux(bytes32,address,address,uint256) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.flux (clip.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function flux(bytes32,address,address,uint256) external;\n",
                    "message": "Parameter '_scope_2' of VatLike.flux (clip.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external returns (uint256, uint256, uint256, uint256, uint256);\n",
                    "message": "Parameter '' of VatLike.ilks (clip.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function suck(address,address,uint256) external;\n",
                    "message": "Parameter '' of VatLike.suck (clip.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function suck(address,address,uint256) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.suck (clip.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function suck(address,address,uint256) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.suck (clip.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external returns (PipLike, uint256);\n",
                    "message": "Parameter '' of SpotterLike.ilks (clip.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function digs(bytes32, uint256) external;\n",
                    "message": "Parameter '' of DogLike.digs (clip.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function digs(bytes32, uint256) external;\n",
                    "message": "Parameter '_scope_0' of DogLike.digs (clip.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function clipperCall(address, uint256, uint256, bytes calldata) external;\n",
                    "message": "Parameter '' of ClipperCallee.clipperCall (clip.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function clipperCall(address, uint256, uint256, bytes calldata) external;\n",
                    "message": "Parameter '_scope_0' of ClipperCallee.clipperCall (clip.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function clipperCall(address, uint256, uint256, bytes calldata) external;\n",
                    "message": "Parameter '_scope_1' of ClipperCallee.clipperCall (clip.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function clipperCall(address, uint256, uint256, bytes calldata) external;\n",
                    "message": "Parameter '_scope_2' of ClipperCallee.clipperCall (clip.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function price(uint256, uint256) external view returns (uint256);\n",
                    "message": "Parameter '' of AbacusLike.price (clip.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function price(uint256, uint256) external view returns (uint256);\n",
                    "message": "Parameter '_scope_0' of AbacusLike.price (clip.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 432,
                    "vulnerability_code": "    function _remove(uint256 id) internal {\n\n        uint256 _move    = active[active.length - 1];\n\n        if (id != _move) {\n\n            uint256 _index   = sales[id].pos;\n\n            active[_index]   = _move;\n\n            sales[_move].pos = _index;\n\n        }\n\n        active.pop();\n\n        delete sales[id];\n",
                    "message": "Function 'Clipper._remove' (clip.sol#423-432) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (what == \"stopped\") stopped = data;           // Set breaker (0, 1 or 2)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (what == \"calc\")  calc = AbacusLike(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external returns (uint256, uint256, uint256, uint256, uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function peek() external returns (bytes32, bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external returns (PipLike, uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 446,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getStatus(uint256 id) external view returns (bool needsRedo, uint256 price) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function status(uint96 tic, uint256 top) internal view returns (bool done, uint256 price) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32  immutable public ilk;   // Collateral type of this Clipper\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32  immutable public ilk;   // Collateral type of this Clipper\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant BLN = 10 **  9;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant WAD = 10 ** 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant RAY = 10 ** 27;\n",
                    "message": null
                }
            ]
        }
    },
    "dss-8aae83e0b46c009f4d4dd9306cd0f865ca7e2dc7/src/vat.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wards[msg.sender] = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        live = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function rely(address usr) external auth { require(live == 1, \"Vat/not-live\"); wards[usr] = 1; }\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deny(address usr) external auth { require(live == 1, \"Vat/not-live\"); wards[usr] = 0; }\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"Vat/not-authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(ilks[ilk].rate == 0, \"Vat/ilk-already-init\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"Vat/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Vat/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"Vat/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Vat/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wish(src, msg.sender), \"Vat/not-allowed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wish(src, msg.sender), \"Vat/not-allowed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"Vat/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(ilk.rate != 0, \"Vat/ilk-not-init\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(either(dart <= 0, both(mul(ilk.Art, ilk.rate) <= ilk.line, debt <= Line)), \"Vat/ceiling-exceeded\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(either(both(dart <= 0, dink >= 0), tab <= mul(urn.ink, ilk.spot)), \"Vat/not-safe\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(either(both(dart <= 0, dink >= 0), wish(u, msg.sender)), \"Vat/not-allowed-u\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(either(dink <= 0, wish(v, msg.sender)), \"Vat/not-allowed-v\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(either(dart >= 0, wish(w, msg.sender)), \"Vat/not-allowed-w\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(either(urn.art == 0, tab >= ilk.dust), \"Vat/dust\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(both(wish(src, msg.sender), wish(dst, msg.sender)), \"Vat/not-allowed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(utab <= mul(u.ink, i.spot), \"Vat/not-safe-src\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(vtab <= mul(v.ink, i.spot), \"Vat/not-safe-dst\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(either(utab >= i.dust, u.art == 0), \"Vat/dust-src\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(either(vtab >= i.dust, v.art == 0), \"Vat/dust-dst\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"Vat/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "    function either(bool x, bool y) internal pure returns (bool z) {\n\n        assembly{ z := or(x, y)}\n",
                    "message": "Vat.either (vat.sol#137-139) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": 142,
                    "vulnerability_code": "    function both(bool x, bool y) internal pure returns (bool z) {\n\n        assembly{ z := and(x, y)}\n",
                    "message": "Vat.both (vat.sol#140-142) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "    function either(bool x, bool y) internal pure returns (bool z) {\n\n        assembly{ z := or(x, y)}\n",
                    "message": "Vat.either uses assembly (vat.sol#137-139)\n\t- vat.sol#138\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": 142,
                    "vulnerability_code": "    function both(bool x, bool y) internal pure returns (bool z) {\n\n        assembly{ z := and(x, y)}\n",
                    "message": "Vat.both uses assembly (vat.sol#140-142)\n\t- vat.sol#141\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": "Detected issues with version pragma in vat.sol:\n\t- pragma solidity>=0.5.12 (vat.sol#22): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public Line;  // Total Debt Ceiling  [rad]\n",
                    "message": "Variable 'Vat.Line' (vat.sol#66) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function either(bool x, bool y) internal pure returns (bool z) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function both(bool x, bool y) internal pure returns (bool z) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what == \"Line\") Line = data;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (what == \"dust\") ilks[ilk].dust = data;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function either(bool x, bool y) internal pure returns (bool z) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function both(bool x, bool y) internal pure returns (bool z) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly{ z := or(x, y)}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly{ z := and(x, y)}\n",
                    "message": null
                }
            ]
        }
    },
    "dss-8aae83e0b46c009f4d4dd9306cd0f865ca7e2dc7/src/end.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wards[msg.sender] = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        live = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit Rely(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"End/not-authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"End/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"End/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"End/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"End/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"End/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 0, \"End/still-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tag[ilk] == 0, \"End/tag-ilk-already-defined\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tag[ilk] != 0, \"End/tag-ilk-not-defined\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(int256(lot) >= 0 && int256(art) >= 0, \"End/overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tag[ilk] != 0, \"End/tag-ilk-not-defined\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(int256(lot) >= 0 && int256(art) >= 0, \"End/overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tag[ilk] != 0, \"End/tag-ilk-not-defined\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wad <= 2**255 && art <= 2**255, \"End/overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 0, \"End/still-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(art == 0, \"End/art-not-zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(ink <= 2**255, \"End/overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 0, \"End/still-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(debt == 0, \"End/debt-not-zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(vat.dai(address(vow)) == 0, \"End/surplus-not-zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(block.timestamp >= add(when, wait), \"End/wait-not-finished\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(debt != 0, \"End/debt-zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(fix[ilk] == 0, \"End/fix-ilk-already-defined\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(debt != 0, \"End/debt-zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(fix[ilk] != 0, \"End/fix-ilk-not-defined\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(out[ilk][msg.sender] <= bag[msg.sender], \"End/insufficient-bag-balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(int256(lot) >= 0 && int256(art) >= 0, \"End/overflow\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(int256(lot) >= 0 && int256(art) >= 0, \"End/overflow\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wad <= 2**255 && art <= 2**255, \"End/overflow\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_17"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": 351,
                    "vulnerability_code": "    function cage(bytes32 ilk) external {\n\n        require(live == 0, \"End/still-live\");\n\n        require(tag[ilk] == 0, \"End/tag-ilk-already-defined\");\n\n        (Art[ilk],,,,) = vat.ilks(ilk);\n\n        (PipLike pip,) = spot.ilks(ilk);\n\n        // par is a ray, pip returns a wad\n\n        tag[ilk] = wdiv(spot.par(), uint256(pip.read()));\n\n        emit Cage(ilk);\n",
                    "message": "Reentrancy in End.cage (end.sol#343-351):\n\tExternal calls:\n\t- (Art[ilk],None,None,None,None) = vat.ilks(ilk) (end.sol#346)\n\t- (pip) = spot.ilks(ilk) (end.sol#347)\n\t- tag[ilk] = wdiv(spot.par(),uint256(pip.read())) (end.sol#349)\n\tState variables written after the call(s):\n\t- tag (end.sol#349)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 422,
                    "vulnerability_to_line": 430,
                    "vulnerability_code": "    function flow(bytes32 ilk) external {\n\n        require(debt != 0, \"End/debt-zero\");\n\n        require(fix[ilk] == 0, \"End/fix-ilk-already-defined\");\n\n\n\n        (, uint256 rate,,,) = vat.ilks(ilk);\n\n        uint256 wad = rmul(rmul(Art[ilk], rate), tag[ilk]);\n\n        fix[ilk] = rdiv(mul(sub(wad, gap[ilk]), RAY), debt);\n\n        emit Flow(ilk);\n",
                    "message": "Reentrancy in End.flow (end.sol#422-430):\n\tExternal calls:\n\t- (rate) = vat.ilks(ilk) (end.sol#426)\n\tState variables written after the call(s):\n\t- fix (end.sol#428)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "    function thaw() external {\n\n        require(live == 0, \"End/still-live\");\n\n        require(debt == 0, \"End/debt-not-zero\");\n\n        require(vat.dai(address(vow)) == 0, \"End/surplus-not-zero\");\n\n        require(block.timestamp >= add(when, wait), \"End/wait-not-finished\");\n\n        debt = vat.debt();\n\n        emit Thaw();\n",
                    "message": "Reentrancy in End.thaw (end.sol#414-421):\n\tExternal calls:\n\t- require(bool,string)(vat.dai(address(vow)) == 0,End/surplus-not-zero) (end.sol#417)\n\t- debt = vat.debt() (end.sol#419)\n\tState variables written after the call(s):\n\t- debt (end.sol#419)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": 444,
                    "vulnerability_code": "    function cash(bytes32 ilk, uint256 wad) external {\n\n        require(fix[ilk] != 0, \"End/fix-ilk-not-defined\");\n\n        vat.flux(ilk, address(this), msg.sender, rmul(wad, fix[ilk]));\n\n        out[ilk][msg.sender] = add(out[ilk][msg.sender], wad);\n\n        require(out[ilk][msg.sender] <= bag[msg.sender], \"End/insufficient-bag-balance\");\n\n        emit Cash(ilk, msg.sender, wad);\n",
                    "message": "Reentrancy in End.cash (end.sol#438-444):\n\tExternal calls:\n\t- vat.flux(ilk,address(this),msg.sender,rmul(wad,fix[ilk])) (end.sol#440)\n\tState variables written after the call(s):\n\t- out (end.sol#441)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "    function pack(uint256 wad) external {\n\n        require(debt != 0, \"End/debt-zero\");\n\n        vat.move(msg.sender, address(vow), mul(wad, RAY));\n\n        bag[msg.sender] = add(bag[msg.sender], wad);\n\n        emit Pack(msg.sender, wad);\n",
                    "message": "Reentrancy in End.pack (end.sol#432-437):\n\tExternal calls:\n\t- vat.move(msg.sender,address(vow),mul(wad,RAY)) (end.sol#434)\n\tState variables written after the call(s):\n\t- bag (end.sol#435)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": 403,
                    "vulnerability_code": "    function skim(bytes32 ilk, address urn) external {\n\n        require(tag[ilk] != 0, \"End/tag-ilk-not-defined\");\n\n        (, uint256 rate,,,) = vat.ilks(ilk);\n\n        (uint256 ink, uint256 art) = vat.urns(ilk, urn);\n\n\n\n        uint256 owe = rmul(rmul(art, rate), tag[ilk]);\n\n        uint256 wad = min(ink, owe);\n\n        gap[ilk] = add(gap[ilk], sub(owe, wad));\n\n\n\n        require(wad <= 2**255 && art <= 2**255, \"End/overflow\");\n\n        vat.grab(ilk, urn, address(this), address(vow), -int256(wad), -int256(art));\n\n        emit Skim(ilk, urn, wad, art);\n",
                    "message": "Reentrancy in End.skim (end.sol#391-403):\n\tExternal calls:\n\t- (rate) = vat.ilks(ilk) (end.sol#393)\n\t- (ink,art) = vat.urns(ilk,urn) (end.sol#394)\n\tState variables written after the call(s):\n\t- gap (end.sol#398)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 389,
                    "vulnerability_code": "    function skip(bytes32 ilk, uint256 id) external {\n\n        require(tag[ilk] != 0, \"End/tag-ilk-not-defined\");\n\n\n\n        (address _flip,,) = cat.ilks(ilk);\n\n        FlipLike flip = FlipLike(_flip);\n\n        (, uint256 rate,,,) = vat.ilks(ilk);\n\n        (uint256 bid, uint256 lot,,,, address usr,, uint256 tab) = flip.bids(id);\n\n\n\n        vat.suck(address(vow), address(vow),  tab);\n\n        vat.suck(address(vow), address(this), bid);\n\n        vat.hope(address(flip));\n\n        flip.yank(id);\n\n\n\n        uint256 art = tab / rate;\n\n        Art[ilk] = add(Art[ilk], art);\n\n        require(int256(lot) >= 0 && int256(art) >= 0, \"End/overflow\");\n\n        vat.grab(ilk, usr, address(this), address(vow), int256(lot), int256(art));\n\n        emit Skip(ilk, id, usr, tab, lot, art);\n",
                    "message": "Reentrancy in End.skip (end.sol#371-389):\n\tExternal calls:\n\t- (_flip) = cat.ilks(ilk) (end.sol#374)\n\t- (rate) = vat.ilks(ilk) (end.sol#376)\n\t- (bid,lot,usr,tab) = flip.bids(id) (end.sol#377)\n\t- vat.suck(address(vow),address(vow),tab) (end.sol#379)\n\t- vat.suck(address(vow),address(this),bid) (end.sol#380)\n\t- vat.hope(address(flip)) (end.sol#381)\n\t- flip.yank(id) (end.sol#382)\n\tState variables written after the call(s):\n\t- Art (end.sol#385)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 369,
                    "vulnerability_code": "    function snip(bytes32 ilk, uint256 id) external {\n\n        require(tag[ilk] != 0, \"End/tag-ilk-not-defined\");\n\n\n\n        (address _clip,,,) = dog.ilks(ilk);\n\n        ClipLike clip = ClipLike(_clip);\n\n        (, uint256 rate,,,) = vat.ilks(ilk);\n\n        (, uint256 tab, uint256 lot, address usr,,) = clip.sales(id);\n\n\n\n        vat.suck(address(vow), address(vow),  tab);\n\n        clip.yank(id);\n\n\n\n        uint256 art = tab / rate;\n\n        Art[ilk] = add(Art[ilk], art);\n\n        require(int256(lot) >= 0 && int256(art) >= 0, \"End/overflow\");\n\n        vat.grab(ilk, usr, address(this), address(vow), int256(lot), int256(art));\n\n        emit Snip(ilk, id, usr, tab, lot, art);\n",
                    "message": "Reentrancy in End.snip (end.sol#353-369):\n\tExternal calls:\n\t- (_clip) = dog.ilks(ilk) (end.sol#356)\n\t- (rate) = vat.ilks(ilk) (end.sol#358)\n\t- (tab,lot,usr) = clip.sales(id) (end.sol#359)\n\t- vat.suck(address(vow),address(vow),tab) (end.sol#361)\n\t- clip.yank(id) (end.sol#362)\n\tState variables written after the call(s):\n\t- Art (end.sol#365)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": 290,
                    "vulnerability_code": "    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n\n        z = x + y;\n\n        require(z >= x);\n",
                    "message": "End.add (end.sol#287-290) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(z >= x) (end.sol#289)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "    function thaw() external {\n\n        require(live == 0, \"End/still-live\");\n\n        require(debt == 0, \"End/debt-not-zero\");\n\n        require(vat.dai(address(vow)) == 0, \"End/surplus-not-zero\");\n\n        require(block.timestamp >= add(when, wait), \"End/wait-not-finished\");\n\n        debt = vat.debt();\n\n        emit Thaw();\n",
                    "message": "End.thaw (end.sol#414-421) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp >= add(when,wait),End/wait-not-finished) (end.sol#418)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.12;\n",
                    "message": "Detected issues with version pragma in end.sol:\n\t- pragma solidity>=0.6.12 (end.sol#23): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function dai(address) external view returns (uint256);\n",
                    "message": "Parameter '' of VatLike.dai (end.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function hope(address) external;\n",
                    "message": "Parameter '' of VatLike.hope (end.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external returns (\n",
                    "message": "Parameter '' of CatLike.ilks (end.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external returns (\n",
                    "message": "Parameter '' of DogLike.ilks (end.sol#57) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external view returns (\n",
                    "message": "Parameter '' of SpotLike.ilks (end.sol#106) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (bytes32 => uint256) public Art;  // Total debt per ilk      [wad]\n",
                    "message": "Variable 'End.Art' (end.sol#253) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (what == \"spot\") spot = SpotLike(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what == \"wait\") wait = data;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32 ilk) external returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function urns(bytes32 ilk, address urn) external returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function bids(uint256 id) external view returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sales(uint256 id) external view returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external view returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant WAD = 10 ** 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant RAY = 10 ** 27;\n",
                    "message": null
                }
            ]
        }
    },
    "dss-8aae83e0b46c009f4d4dd9306cd0f865ca7e2dc7/src/vow.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address vat_, address flapper_, address flopper_) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wards[msg.sender] = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        vat     = VatLike(vat_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        flapper = FlapLike(flapper_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        flopper = FlopLike(flopper_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        vat.hope(flapper_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        live = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function rely(address usr) external auth { require(live == 1, \"Vow/not-live\"); wards[usr] = 1; }\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"Vow/not-authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Vow/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Vow/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(add(era, wait) <= now, \"Vow/wait-not-finished\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(rad <= vat.dai(address(this)), \"Vow/insufficient-surplus\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(rad <= sub(sub(vat.sin(address(this)), Sin), Ash), \"Vow/insufficient-debt\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(rad <= Ash, \"Vow/not-enough-ash\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(rad <= vat.dai(address(this)), \"Vow/insufficient-surplus\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sump <= sub(sub(vat.sin(address(this)), Sin), Ash), \"Vow/insufficient-debt\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(vat.dai(address(this)) == 0, \"Vow/surplus-not-zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(vat.dai(address(this)) >= add(add(vat.sin(address(this)), bump), hump), \"Vow/insufficient-surplus\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sub(sub(vat.sin(address(this)), Sin), Ash) == 0, \"Vow/debt-not-zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"Vow/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "    function file(bytes32 what, address data) external auth {\n\n        if (what == \"flapper\") {\n\n            vat.nope(address(flapper));\n\n            flapper = FlapLike(data);\n\n            vat.hope(data);\n\n        }\n\n        else if (what == \"flopper\") flopper = FlopLike(data);\n\n        else revert(\"Vow/file-unrecognized-param\");\n",
                    "message": "Reentrancy in Vow.file (vow.sol#107-115):\n\tExternal calls:\n\t- vat.nope(address(flapper)) (vow.sol#109)\n\tState variables written after the call(s):\n\t- flapper (vow.sol#110)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "    function flop() external returns (uint id) {\n\n        require(sump <= sub(sub(vat.sin(address(this)), Sin), Ash), \"Vow/insufficient-debt\");\n\n        require(vat.dai(address(this)) == 0, \"Vow/surplus-not-zero\");\n\n        Ash = add(Ash, sump);\n\n        id = flopper.kick(address(this), dump, sump);\n",
                    "message": "Reentrancy in Vow.flop (vow.sol#143-148):\n\tExternal calls:\n\t- require(bool,string)(sump <= sub(sub(vat.sin(address(this)),Sin),Ash),Vow/insufficient-debt) (vow.sol#144)\n\t- require(bool,string)(vat.dai(address(this)) == 0,Vow/surplus-not-zero) (vow.sol#145)\n\tState variables written after the call(s):\n\t- Ash (vow.sol#146)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": 140,
                    "vulnerability_code": "    function kiss(uint rad) external {\n\n        require(rad <= Ash, \"Vow/not-enough-ash\");\n\n        require(rad <= vat.dai(address(this)), \"Vow/insufficient-surplus\");\n\n        Ash = sub(Ash, rad);\n\n        vat.heal(rad);\n",
                    "message": "Reentrancy in Vow.kiss (vow.sol#135-140):\n\tExternal calls:\n\t- require(bool,string)(rad <= vat.dai(address(this)),Vow/insufficient-surplus) (vow.sol#137)\n\tState variables written after the call(s):\n\t- Ash (vow.sol#138)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "    constructor(address vat_, address flapper_, address flopper_) public {\n\n        wards[msg.sender] = 1;\n\n        vat     = VatLike(vat_);\n\n        flapper = FlapLike(flapper_);\n\n        flopper = FlopLike(flopper_);\n\n        vat.hope(flapper_);\n\n        live = 1;\n",
                    "message": "Reentrancy in Vow.constructor (vow.sol#77-84):\n\tExternal calls:\n\t- vat.hope(flapper_) (vow.sol#82)\n\tState variables written after the call(s):\n\t- live (vow.sol#83)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": "Detected issues with version pragma in vow.sol:\n\t- pragma solidity>=0.5.12 (vow.sol#22): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function cage(uint) external;\n",
                    "message": "Parameter '' of FlapLike.cage (vow.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function dai (address) external view returns (uint);\n",
                    "message": "Parameter '' of VatLike.dai (vow.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sin (address) external view returns (uint);\n",
                    "message": "Parameter '' of VatLike.sin (vow.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function heal(uint256) external;\n",
                    "message": "Parameter '' of VatLike.heal (vow.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function hope(address) external;\n",
                    "message": "Parameter '' of VatLike.hope (vow.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function nope(address) external;\n",
                    "message": "Parameter '' of VatLike.nope (vow.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public Sin;   // Queued debt            [rad]\n",
                    "message": "Variable 'Vow.Sin' (vow.sol#64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public Ash;   // On-auction debt        [rad]\n",
                    "message": "Variable 'Vow.Ash' (vow.sol#65) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (what == \"hump\") hump = data;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (what == \"flopper\") flopper = FlopLike(data);\n",
                    "message": null
                }
            ]
        }
    },
    "dss-8aae83e0b46c009f4d4dd9306cd0f865ca7e2dc7/src/pot.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address vat_) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wards[msg.sender] = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        vat = VatLike(vat_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        dsr = ONE;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        chi = ONE;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        rho = now;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        live = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"Pot/not-authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"Pot/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now == rho, \"Pot/rho-not-updated\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Pot/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Pot/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now >= rho, \"Pot/invalid-now\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now == rho, \"Pot/rho-not-updated\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 109,
                    "vulnerability_code": "    function rpow(uint x, uint n, uint base) internal pure returns (uint z) {\n\n        assembly {\n\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\n\n            default {\n\n                switch mod(n, 2) case 0 { z := base } default { z := x }\n\n                let half := div(base, 2)  // for rounding.\n\n                for { n := div(n, 2) } n { n := div(n,2) } {\n\n                    let xx := mul(x, x)\n\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\n\n                    let xxRound := add(xx, half)\n\n                    if lt(xxRound, xx) { revert(0,0) }\n\n                    x := div(xxRound, base)\n\n                    if mod(n,2) {\n\n                        let zx := mul(z, x)\n\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n\n                        let zxRound := add(zx, half)\n\n                        if lt(zxRound, zx) { revert(0,0) }\n\n                        z := div(zxRound, base)\n\n                    }\n\n                }\n\n            }\n\n        }\n",
                    "message": "Pot.rpow (pot.sol#87-109) is declared view but contains assembly code\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 133,
                    "vulnerability_code": "    function file(bytes32 what, uint256 data) external auth {\n\n        require(live == 1, \"Pot/not-live\");\n\n        require(now == rho, \"Pot/rho-not-updated\");\n\n        if (what == \"dsr\") dsr = data;\n\n        else revert(\"Pot/file-unrecognized-param\");\n",
                    "message": "Pot.file (pot.sol#128-133) uses a dangerous strict equality:\n\t- require(bool,string)(now == rho,Pot/rho-not-updated)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 133,
                    "vulnerability_code": "    function file(bytes32 what, uint256 data) external auth {\n\n        require(live == 1, \"Pot/not-live\");\n\n        require(now == rho, \"Pot/rho-not-updated\");\n\n        if (what == \"dsr\") dsr = data;\n\n        else revert(\"Pot/file-unrecognized-param\");\n",
                    "message": "Pot.file (pot.sol#128-133) uses a dangerous strict equality:\n\t- require(bool,string)(now == rho,Pot/rho-not-updated)\nPot.join (pot.sol#156-161) uses a dangerous strict equality:\n\t- require(bool,string)(now == rho,Pot/rho-not-updated)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 133,
                    "vulnerability_code": "    function file(bytes32 what, uint256 data) external auth {\n\n        require(live == 1, \"Pot/not-live\");\n\n        require(now == rho, \"Pot/rho-not-updated\");\n\n        if (what == \"dsr\") dsr = data;\n\n        else revert(\"Pot/file-unrecognized-param\");\n",
                    "message": "Pot.file (pot.sol#128-133) uses a dangerous strict equality:\n\t- require(bool,string)(now == rho,Pot/rho-not-updated)\nPot.join (pot.sol#156-161) uses a dangerous strict equality:\n\t- require(bool,string)(now == rho,Pot/rho-not-updated)\nPot.mul (pot.sol#123-125) uses a dangerous strict equality:\n\t- require(bool)(y == 0 || (z = x * y) / y == x)\n\t- require(bool)(y == 0 || (z = x * y) / y == x)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 109,
                    "vulnerability_code": "    function rpow(uint x, uint n, uint base) internal pure returns (uint z) {\n\n        assembly {\n\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\n\n            default {\n\n                switch mod(n, 2) case 0 { z := base } default { z := x }\n\n                let half := div(base, 2)  // for rounding.\n\n                for { n := div(n, 2) } n { n := div(n,2) } {\n\n                    let xx := mul(x, x)\n\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\n\n                    let xxRound := add(xx, half)\n\n                    if lt(xxRound, xx) { revert(0,0) }\n\n                    x := div(xxRound, base)\n\n                    if mod(n,2) {\n\n                        let zx := mul(z, x)\n\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n\n                        let zxRound := add(zx, half)\n\n                        if lt(zxRound, zx) { revert(0,0) }\n\n                        z := div(zxRound, base)\n\n                    }\n\n                }\n\n            }\n\n        }\n",
                    "message": "Pot.rpow uses assembly (pot.sol#87-109)\n\t- pot.sol#88-108\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": "Detected issues with version pragma in pot.sol:\n\t- pragma solidity>=0.5.12 (pot.sol#22): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint256) external;\n",
                    "message": "Parameter '' of VatLike.move (pot.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint256) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.move (pot.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint256) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.move (pot.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function suck(address,address,uint256) external;\n",
                    "message": "Parameter '' of VatLike.suck (pot.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function suck(address,address,uint256) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.suck (pot.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function suck(address,address,uint256) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.suck (pot.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public Pie;   // Total Normalised Savings Dai  [wad]\n",
                    "message": "Variable 'Pot.Pie' (pot.sol#65) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXACT_TIME",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now == rho, \"Pot/rho-not-updated\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXACT_TIME",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now == rho, \"Pot/rho-not-updated\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function rpow(uint x, uint n, uint base) internal pure returns (uint z) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what == \"dsr\") dsr = data;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what == \"vow\") vow = addr;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function rpow(uint x, uint n, uint base) internal pure returns (uint z) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant ONE = 10 ** 27;\n",
                    "message": null
                }
            ]
        }
    },
    "dss-8aae83e0b46c009f4d4dd9306cd0f865ca7e2dc7/src/cat.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address vat_) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wards[msg.sender] = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        vat = VatLike(vat_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        live = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"Cat/not-authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Cat/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Cat/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Cat/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Cat/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"Cat/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spot > 0 && mul(ink, spot) < mul(art, rate), \"Cat/not-unsafe\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(litter < box && room >= dust, \"Cat/liquidation-limit-hit\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dart >  0      && dink >  0     , \"Cat/null-auction\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dart <= 2**255 && dink <= 2**255, \"Cat/overflow\"    );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spot > 0 && mul(ink, spot) < mul(art, rate), \"Cat/not-unsafe\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(litter < box && room >= dust, \"Cat/liquidation-limit-hit\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dart >  0      && dink >  0     , \"Cat/null-auction\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dart <= 2**255 && dink <= 2**255, \"Cat/overflow\"    );\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_15"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": 182,
                    "vulnerability_code": "    function bite(bytes32 ilk, address urn) external returns (uint256 id) {\n\n        (,uint256 rate,uint256 spot,,uint256 dust) = vat.ilks(ilk);\n\n        (uint256 ink, uint256 art) = vat.urns(ilk, urn);\n\n\n\n        require(live == 1, \"Cat/not-live\");\n\n        require(spot > 0 && mul(ink, spot) < mul(art, rate), \"Cat/not-unsafe\");\n\n\n\n        Ilk memory milk = ilks[ilk];\n\n        uint256 dart;\n\n        {\n\n            uint256 room = sub(box, litter);\n\n\n\n            // test whether the remaining space in the litterbox is dusty\n\n            require(litter < box && room >= dust, \"Cat/liquidation-limit-hit\");\n\n\n\n            dart = min(art, mul(min(milk.dunk, room), WAD) / rate / milk.chop);\n\n        }\n\n\n\n        uint256 dink = min(ink, mul(ink, dart) / art);\n\n\n\n        require(dart >  0      && dink >  0     , \"Cat/null-auction\");\n\n        require(dart <= 2**255 && dink <= 2**255, \"Cat/overflow\"    );\n\n\n\n        // This may leave the CDP in a dusty state\n\n        vat.grab(\n\n            ilk, urn, address(this), address(vow), -int256(dink), -int256(dart)\n\n        );\n\n        vow.fess(mul(dart, rate));\n\n\n\n        { // Avoid stack too deep\n\n            // This calcuation will overflow if dart*rate exceeds ~10^14,\n\n            // i.e. the maximum dunk is roughly 100 trillion DAI.\n\n            uint256 tab = mul(mul(dart, rate), milk.chop) / WAD;\n\n            litter = add(litter, tab);\n\n\n\n            id = Kicker(milk.flip).kick({\n\n                urn: urn,\n\n                gal: address(vow),\n\n                tab: tab,\n\n                lot: dink,\n\n                bid: 0\n\n            });\n\n        }\n\n\n\n        emit Bite(ilk, urn, dink, dart, mul(dart, rate), milk.flip, id);\n",
                    "message": "Reentrancy in Cat.bite (cat.sol#137-182):\n\tExternal calls:\n\t- (rate,spot,dust) = vat.ilks(ilk) (cat.sol#138)\n\t- (ink,art) = vat.urns(ilk,urn) (cat.sol#139)\n\t- vat.grab(ilk,urn,address(this),address(vow),- int256(dink),- int256(dart)) (cat.sol#161-163)\n\t- vow.fess(mul(dart,rate)) (cat.sol#164)\n\tState variables written after the call(s):\n\t- litter (cat.sol#170)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": 134,
                    "vulnerability_code": "    function file(bytes32 ilk, bytes32 what, address flip) external auth {\n\n        if (what == \"flip\") {\n\n            vat.nope(ilks[ilk].flip);\n\n            ilks[ilk].flip = flip;\n\n            vat.hope(flip);\n\n        }\n\n        else revert(\"Cat/file-unrecognized-param\");\n",
                    "message": "Reentrancy in Cat.file (cat.sol#127-134):\n\tExternal calls:\n\t- vat.nope(ilks[ilk].flip) (cat.sol#129)\n\tState variables written after the call(s):\n\t- ilks (cat.sol#130)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": "Detected issues with version pragma in cat.sol:\n\t- pragma solidity>=0.5.12 (cat.sol#22): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external view returns (\n",
                    "message": "Parameter '' of VatLike.ilks (cat.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function urns(bytes32,address) external view returns (\n",
                    "message": "Parameter '' of VatLike.urns (cat.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function urns(bytes32,address) external view returns (\n",
                    "message": "Parameter '_scope_0' of VatLike.urns (cat.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
                    "message": "Parameter '' of VatLike.grab (cat.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.grab (cat.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.grab (cat.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
                    "message": "Parameter '_scope_2' of VatLike.grab (cat.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
                    "message": "Parameter '_scope_3' of VatLike.grab (cat.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function grab(bytes32,address,address,address,int256,int256) external;\n",
                    "message": "Parameter '_scope_4' of VatLike.grab (cat.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function hope(address) external;\n",
                    "message": "Parameter '' of VatLike.hope (cat.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function nope(address) external;\n",
                    "message": "Parameter '' of VatLike.nope (cat.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function fess(uint256) external;\n",
                    "message": "Parameter '' of VowLike.fess (cat.sol#51) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what == \"vow\") vow = VowLike(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what == \"box\") box = data;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (what == \"dunk\") ilks[ilk].dunk = data;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what == \"flip\") {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external view returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function urns(bytes32,address) external view returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant WAD = 10 ** 18;\n",
                    "message": null
                }
            ]
        }
    },
    "dss-8aae83e0b46c009f4d4dd9306cd0f865ca7e2dc7/src/flip.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public kicks = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address vat_, address cat_, bytes32 ilk_) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        vat = VatLike(vat_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        cat = CatLike(cat_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ilk = ilk_;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wards[msg.sender] = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"Flipper/not-authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Flipper/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Flipper/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(kicks < uint256(-1), \"Flipper/overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].end < now, \"Flipper/not-finished\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].tic == 0, \"Flipper/bid-already-placed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].tic > now || bids[id].tic == 0, \"Flipper/already-finished-tic\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].end > now, \"Flipper/already-finished-end\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(lot == bids[id].lot, \"Flipper/lot-not-matching\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bid <= bids[id].tab, \"Flipper/higher-than-tab\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bid >  bids[id].bid, \"Flipper/bid-not-higher\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(mul(bid, ONE) >= mul(beg, bids[id].bid) || bid == bids[id].tab, \"Flipper/insufficient-increase\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].tic > now || bids[id].tic == 0, \"Flipper/already-finished-tic\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].end > now, \"Flipper/already-finished-end\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bid == bids[id].bid, \"Flipper/not-matching-bid\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bid == bids[id].tab, \"Flipper/tend-not-finished\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(lot < bids[id].lot, \"Flipper/lot-not-lower\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(mul(beg, lot) <= mul(bids[id].lot, ONE), \"Flipper/insufficient-decrease\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flipper/not-finished\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].bid < bids[id].tab, \"Flipper/already-dent-phase\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flipper/not-finished\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_16"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "    function deal(uint256 id) external {\n\n        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flipper/not-finished\");\n\n        cat.claw(bids[id].tab);\n\n        vat.flux(ilk, address(this), bids[id].guy, bids[id].lot);\n\n        delete bids[id];\n",
                    "message": "Reentrancy in Flipper.deal (flip.sol#185-190):\n\tExternal calls:\n\t- cat.claw(bids[id].tab) (flip.sol#187)\n\t- vat.flux(ilk,address(this),bids[id].guy,bids[id].lot) (flip.sol#188)\n\tState variables written after the call(s):\n\t- bids (flip.sol#189)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": 184,
                    "vulnerability_code": "    function dent(uint256 id, uint256 lot, uint256 bid) external {\n\n        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\n\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flipper/already-finished-tic\");\n\n        require(bids[id].end > now, \"Flipper/already-finished-end\");\n\n\n\n        require(bid == bids[id].bid, \"Flipper/not-matching-bid\");\n\n        require(bid == bids[id].tab, \"Flipper/tend-not-finished\");\n\n        require(lot < bids[id].lot, \"Flipper/lot-not-lower\");\n\n        require(mul(beg, lot) <= mul(bids[id].lot, ONE), \"Flipper/insufficient-decrease\");\n\n\n\n        if (msg.sender != bids[id].guy) {\n\n            vat.move(msg.sender, bids[id].guy, bid);\n\n            bids[id].guy = msg.sender;\n\n        }\n\n        vat.flux(ilk, address(this), bids[id].usr, bids[id].lot - lot);\n\n\n\n        bids[id].lot = lot;\n\n        bids[id].tic = add(uint48(now), ttl);\n",
                    "message": "Reentrancy in Flipper.dent (flip.sol#166-184):\n\tExternal calls:\n\t- vat.move(msg.sender,bids[id].guy,bid) (flip.sol#177)\n\tState variables written after the call(s):\n\t- bids (flip.sol#178)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": 184,
                    "vulnerability_code": "    function dent(uint256 id, uint256 lot, uint256 bid) external {\n\n        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\n\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flipper/already-finished-tic\");\n\n        require(bids[id].end > now, \"Flipper/already-finished-end\");\n\n\n\n        require(bid == bids[id].bid, \"Flipper/not-matching-bid\");\n\n        require(bid == bids[id].tab, \"Flipper/tend-not-finished\");\n\n        require(lot < bids[id].lot, \"Flipper/lot-not-lower\");\n\n        require(mul(beg, lot) <= mul(bids[id].lot, ONE), \"Flipper/insufficient-decrease\");\n\n\n\n        if (msg.sender != bids[id].guy) {\n\n            vat.move(msg.sender, bids[id].guy, bid);\n\n            bids[id].guy = msg.sender;\n\n        }\n\n        vat.flux(ilk, address(this), bids[id].usr, bids[id].lot - lot);\n\n\n\n        bids[id].lot = lot;\n\n        bids[id].tic = add(uint48(now), ttl);\n",
                    "message": "Reentrancy in Flipper.dent (flip.sol#166-184):\n\tExternal calls:\n\t- vat.move(msg.sender,bids[id].guy,bid) (flip.sol#177)\n\t- vat.flux(ilk,address(this),bids[id].usr,bids[id].lot - lot) (flip.sol#180)\n\tState variables written after the call(s):\n\t- bids (flip.sol#182)\n\t- bids (flip.sol#183)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": 165,
                    "vulnerability_code": "    function tend(uint256 id, uint256 lot, uint256 bid) external {\n\n        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\n\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flipper/already-finished-tic\");\n\n        require(bids[id].end > now, \"Flipper/already-finished-end\");\n\n\n\n        require(lot == bids[id].lot, \"Flipper/lot-not-matching\");\n\n        require(bid <= bids[id].tab, \"Flipper/higher-than-tab\");\n\n        require(bid >  bids[id].bid, \"Flipper/bid-not-higher\");\n\n        require(mul(bid, ONE) >= mul(beg, bids[id].bid) || bid == bids[id].tab, \"Flipper/insufficient-increase\");\n\n\n\n        if (msg.sender != bids[id].guy) {\n\n            vat.move(msg.sender, bids[id].guy, bids[id].bid);\n\n            bids[id].guy = msg.sender;\n\n        }\n\n        vat.move(msg.sender, bids[id].gal, bid - bids[id].bid);\n\n\n\n        bids[id].bid = bid;\n\n        bids[id].tic = add(uint48(now), ttl);\n",
                    "message": "Reentrancy in Flipper.tend (flip.sol#147-165):\n\tExternal calls:\n\t- vat.move(msg.sender,bids[id].guy,bids[id].bid) (flip.sol#158)\n\tState variables written after the call(s):\n\t- bids (flip.sol#159)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": 165,
                    "vulnerability_code": "    function tend(uint256 id, uint256 lot, uint256 bid) external {\n\n        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\n\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flipper/already-finished-tic\");\n\n        require(bids[id].end > now, \"Flipper/already-finished-end\");\n\n\n\n        require(lot == bids[id].lot, \"Flipper/lot-not-matching\");\n\n        require(bid <= bids[id].tab, \"Flipper/higher-than-tab\");\n\n        require(bid >  bids[id].bid, \"Flipper/bid-not-higher\");\n\n        require(mul(bid, ONE) >= mul(beg, bids[id].bid) || bid == bids[id].tab, \"Flipper/insufficient-increase\");\n\n\n\n        if (msg.sender != bids[id].guy) {\n\n            vat.move(msg.sender, bids[id].guy, bids[id].bid);\n\n            bids[id].guy = msg.sender;\n\n        }\n\n        vat.move(msg.sender, bids[id].gal, bid - bids[id].bid);\n\n\n\n        bids[id].bid = bid;\n\n        bids[id].tic = add(uint48(now), ttl);\n",
                    "message": "Reentrancy in Flipper.tend (flip.sol#147-165):\n\tExternal calls:\n\t- vat.move(msg.sender,bids[id].guy,bids[id].bid) (flip.sol#158)\n\t- vat.move(msg.sender,bids[id].gal,bid - bids[id].bid) (flip.sol#161)\n\tState variables written after the call(s):\n\t- bids (flip.sol#163)\n\t- bids (flip.sol#164)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": 199,
                    "vulnerability_code": "    function yank(uint256 id) external auth {\n\n        require(bids[id].guy != address(0), \"Flipper/guy-not-set\");\n\n        require(bids[id].bid < bids[id].tab, \"Flipper/already-dent-phase\");\n\n        cat.claw(bids[id].tab);\n\n        vat.flux(ilk, address(this), msg.sender, bids[id].lot);\n\n        vat.move(msg.sender, bids[id].guy, bids[id].bid);\n\n        delete bids[id];\n",
                    "message": "Reentrancy in Flipper.yank (flip.sol#192-199):\n\tExternal calls:\n\t- cat.claw(bids[id].tab) (flip.sol#195)\n\t- vat.flux(ilk,address(this),msg.sender,bids[id].lot) (flip.sol#196)\n\t- vat.move(msg.sender,bids[id].guy,bids[id].bid) (flip.sol#197)\n\tState variables written after the call(s):\n\t- bids (flip.sol#198)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "    function kick(address usr, address gal, uint256 tab, uint256 lot, uint256 bid)\n\n        public auth returns (uint256 id)\n\n    {\n\n        require(kicks < uint256(-1), \"Flipper/overflow\");\n\n        id = ++kicks;\n\n\n\n        bids[id].bid = bid;\n\n        bids[id].lot = lot;\n\n        bids[id].guy = msg.sender;  // configurable??\n\n        bids[id].end = add(uint48(now), tau);\n\n        bids[id].usr = usr;\n\n        bids[id].gal = gal;\n\n        bids[id].tab = tab;\n\n\n\n        vat.flux(ilk, msg.sender, address(this), lot);\n\n\n\n        emit Kick(id, lot, bid, tab, usr, gal);\n",
                    "message": "Flipper.kick (flip.sol#124-141) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": "Detected issues with version pragma in flip.sol:\n\t- pragma solidity>=0.5.12 (flip.sol#22): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint256) external;\n",
                    "message": "Parameter '' of VatLike.move (flip.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint256) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.move (flip.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint256) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.move (flip.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function flux(bytes32,address,address,uint256) external;\n",
                    "message": "Parameter '' of VatLike.flux (flip.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function flux(bytes32,address,address,uint256) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.flux (flip.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function flux(bytes32,address,address,uint256) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.flux (flip.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function flux(bytes32,address,address,uint256) external;\n",
                    "message": "Parameter '_scope_2' of VatLike.flux (flip.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claw(uint256) external;\n",
                    "message": "Parameter '' of CatLike.claw (flip.sol#34) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (what == \"tau\") tau = uint48(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (what == \"cat\") cat = CatLike(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant ONE = 1.00E18;\n",
                    "message": null
                }
            ]
        }
    },
    "dss-8aae83e0b46c009f4d4dd9306cd0f865ca7e2dc7/src/flop.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256  public kicks = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address vat_, address gem_) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        wards[msg.sender] = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        vat = VatLike(vat_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        gem = GemLike(gem_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        live = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(wards[msg.sender] == 1, \"Flopper/not-authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else revert(\"Flopper/file-unrecognized-param\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"Flopper/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(kicks < uint(-1), \"Flopper/overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].end < now, \"Flopper/not-finished\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].tic == 0, \"Flopper/bid-already-placed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"Flopper/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].guy != address(0), \"Flopper/guy-not-set\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].tic > now || bids[id].tic == 0, \"Flopper/already-finished-tic\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].end > now, \"Flopper/already-finished-end\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bid == bids[id].bid, \"Flopper/not-matching-bid\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(lot <  bids[id].lot, \"Flopper/lot-not-lower\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(mul(beg, lot) <= mul(bids[id].lot, ONE), \"Flopper/insufficient-decrease\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 1, \"Flopper/not-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flopper/not-finished\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(live == 0, \"Flopper/still-live\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].guy != address(0), \"Flopper/guy-not-set\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flopper/not-finished\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": 169,
                    "vulnerability_code": "    function deal(uint id) external {\n\n        require(live == 1, \"Flopper/not-live\");\n\n        require(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now), \"Flopper/not-finished\");\n\n        gem.mint(bids[id].guy, bids[id].lot);\n\n        delete bids[id];\n",
                    "message": "Reentrancy in Flopper.deal (flop.sol#164-169):\n\tExternal calls:\n\t- gem.mint(bids[id].guy,bids[id].lot) (flop.sol#167)\n\tState variables written after the call(s):\n\t- bids (flop.sol#168)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 163,
                    "vulnerability_code": "    function dent(uint id, uint lot, uint bid) external {\n\n        require(live == 1, \"Flopper/not-live\");\n\n        require(bids[id].guy != address(0), \"Flopper/guy-not-set\");\n\n        require(bids[id].tic > now || bids[id].tic == 0, \"Flopper/already-finished-tic\");\n\n        require(bids[id].end > now, \"Flopper/already-finished-end\");\n\n\n\n        require(bid == bids[id].bid, \"Flopper/not-matching-bid\");\n\n        require(lot <  bids[id].lot, \"Flopper/lot-not-lower\");\n\n        require(mul(beg, lot) <= mul(bids[id].lot, ONE), \"Flopper/insufficient-decrease\");\n\n\n\n        if (msg.sender != bids[id].guy) {\n\n            vat.move(msg.sender, bids[id].guy, bid);\n\n\n\n            // on first dent, clear as much Ash as possible\n\n            if (bids[id].tic == 0) {\n\n                uint Ash = VowLike(bids[id].guy).Ash();\n\n                VowLike(bids[id].guy).kiss(min(bid, Ash));\n\n            }\n\n\n\n            bids[id].guy = msg.sender;\n\n        }\n\n\n\n        bids[id].lot = lot;\n\n        bids[id].tic = add(uint48(now), ttl);\n",
                    "message": "Reentrancy in Flopper.dent (flop.sol#139-163):\n\tExternal calls:\n\t- vat.move(msg.sender,bids[id].guy,bid) (flop.sol#150)\n\t- Ash = VowLike(bids[id].guy).Ash() (flop.sol#154)\n\t- VowLike(bids[id].guy).kiss(min(bid,Ash)) (flop.sol#155)\n\tState variables written after the call(s):\n\t- bids (flop.sol#158)\n\t- bids (flop.sol#161)\n\t- bids (flop.sol#162)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 181,
                    "vulnerability_code": "    function yank(uint id) external {\n\n        require(live == 0, \"Flopper/still-live\");\n\n        require(bids[id].guy != address(0), \"Flopper/guy-not-set\");\n\n        vat.suck(vow, bids[id].guy, bids[id].bid);\n\n        delete bids[id];\n",
                    "message": "Reentrancy in Flopper.yank (flop.sol#176-181):\n\tExternal calls:\n\t- vat.suck(vow,bids[id].guy,bids[id].bid) (flop.sol#179)\n\tState variables written after the call(s):\n\t- bids (flop.sol#180)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": "Detected issues with version pragma in flop.sol:\n\t- pragma solidity>=0.5.12 (flop.sol#22): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint) external;\n",
                    "message": "Parameter '' of VatLike.move (flop.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.move (flop.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address,address,uint) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.move (flop.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function suck(address,address,uint) external;\n",
                    "message": "Parameter '' of VatLike.suck (flop.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function suck(address,address,uint) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.suck (flop.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function suck(address,address,uint) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.suck (flop.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address,uint) external;\n",
                    "message": "Parameter '' of GemLike.mint (flop.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address,uint) external;\n",
                    "message": "Parameter '_scope_0' of GemLike.mint (flop.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Ash() external returns (uint);\n",
                    "message": "Function 'VowLike.Ash' (flop.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function kiss(uint) external;\n",
                    "message": "Parameter '' of VowLike.kiss (flop.sol#37) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (what == \"tau\") tau = uint48(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256  constant ONE = 1.00E18;\n",
                    "message": null
                }
            ]
        }
    }
}