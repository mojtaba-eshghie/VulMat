{
    "anyswap-token-937c687c78b80d4d554877b7254ac6a2166fc3ae/contracts/AnyswapToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal { }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 599,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() ERC20Detailed(\"Anyswap\", \"ANY\", 18) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 601,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _mint(msg.sender, 1e26);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 602,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: mint to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 604,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"only owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_31"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.name (local variable @ AnyswapToken.sol#102) shadows:\n\t- ERC20Detailed.name (function @ AnyswapToken.sol#111-113)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.symbol (local variable @ AnyswapToken.sol#102) shadows:\n\t- ERC20Detailed.symbol (function @ AnyswapToken.sol#119-121)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.decimals (local variable @ AnyswapToken.sol#102) shadows:\n\t- ERC20Detailed.decimals (function @ AnyswapToken.sol#135-137)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": 113,
                    "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
                    "message": "ERC20Detailed.name (AnyswapToken.sol#111-113) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": 121,
                    "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
                    "message": "ERC20Detailed.symbol (AnyswapToken.sol#119-121) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": 137,
                    "vulnerability_code": "    function decimals() public view returns (uint8) {\n\n        return _decimals;\n",
                    "message": "ERC20Detailed.decimals (AnyswapToken.sol#135-137) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": 374,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return _totalSupply;\n",
                    "message": "ERC20.totalSupply (AnyswapToken.sol#372-374) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (AnyswapToken.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address account) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (AnyswapToken.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "    function balanceOf(address account) public view returns (uint256) {\n\n        return _balances[account];\n",
                    "message": "ERC20.balanceOf (AnyswapToken.sol#379-381) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": 394,
                    "vulnerability_code": "    function transfer(address recipient, uint256 amount) public returns (bool) {\n\n        _transfer(_msgSender(), recipient, amount);\n\n        return true;\n",
                    "message": "ERC20.transfer (AnyswapToken.sol#391-394) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address recipient, uint256 amount) external returns (bool);\n",
                    "message": "IERC20.transfer (AnyswapToken.sol#31) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) external view returns (uint256);\n",
                    "message": "IERC20.allowance (AnyswapToken.sol#40) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": 401,
                    "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n\n        return _allowances[owner][spender];\n",
                    "message": "ERC20.allowance (AnyswapToken.sol#399-401) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) external returns (bool);\n",
                    "message": "IERC20.approve (AnyswapToken.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) public returns (bool) {\n\n        _approve(_msgSender(), spender, amount);\n\n        return true;\n",
                    "message": "ERC20.approve (AnyswapToken.sol#410-413) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n",
                    "message": "IERC20.transferFrom (AnyswapToken.sol#67) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 431,
                    "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n\n        _transfer(sender, recipient, amount);\n\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n\n        return true;\n",
                    "message": "ERC20.transferFrom (AnyswapToken.sol#427-431) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": 448,
                    "vulnerability_code": "    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n\n        return true;\n",
                    "message": "ERC20.increaseAllowance (AnyswapToken.sol#445-448) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": 467,
                    "vulnerability_code": "    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n\n        return true;\n",
                    "message": "ERC20.decreaseAllowance (AnyswapToken.sol#464-467) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": 580,
                    "vulnerability_code": "    function burn(uint256 amount) public {\n\n        _burn(_msgSender(), amount);\n",
                    "message": "ERC20Burnable.burn (AnyswapToken.sol#578-580) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": 587,
                    "vulnerability_code": "    function burnFrom(address account, uint256 amount) public {\n\n        _burnFrom(account, amount);\n",
                    "message": "ERC20Burnable.burnFrom (AnyswapToken.sol#585-587) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 603,
                    "vulnerability_to_line": 606,
                    "vulnerability_code": "    function destroy() public {\n\n        require(msg.sender == owner, \"only owner\");\n\n        selfdestruct(owner);\n",
                    "message": "AnyswapToken.destroy (AnyswapToken.sol#603-606) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in AnyswapToken.sol:\n\t- pragma solidity^0.5.0 (AnyswapToken.sol#7): it allows old versions\n\t- pragma solidity^0.5.0 (AnyswapToken.sol#86): it allows old versions\n\t- pragma solidity^0.5.0 (AnyswapToken.sol#142): it allows old versions\n\t- pragma solidity^0.5.0 (AnyswapToken.sol#172): it allows old versions\n\t- pragma solidity^0.5.0 (AnyswapToken.sol#331): it allows old versions\n\t- pragma solidity^0.5.0 (AnyswapToken.sol#563): it allows old versions\n\t- pragma solidity^0.5.0 (AnyswapToken.sol#593): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": 162,
                    "vulnerability_code": "    function _msgSender() internal view returns (address payable) {\n\n        return msg.sender;\n",
                    "message": "Function 'Context._msgSender' (AnyswapToken.sol#160-162) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "    function _msgData() internal view returns (bytes memory) {\n\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\n        return msg.data;\n",
                    "message": "Function 'Context._msgData' (AnyswapToken.sol#164-167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 483,
                    "vulnerability_to_line": 490,
                    "vulnerability_code": "    function _transfer(address sender, address recipient, uint256 amount) internal {\n\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n\n        _balances[recipient] = _balances[recipient].add(amount);\n\n        emit Transfer(sender, recipient, amount);\n",
                    "message": "Function 'ERC20._transfer' (AnyswapToken.sol#483-490) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": 507,
                    "vulnerability_code": "    function _mint(address account, uint256 amount) internal {\n\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n\n\n        _totalSupply = _totalSupply.add(amount);\n\n        _balances[account] = _balances[account].add(amount);\n\n        emit Transfer(address(0), account, amount);\n",
                    "message": "Function 'ERC20._mint' (AnyswapToken.sol#501-507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": 526,
                    "vulnerability_code": "    function _burn(address account, uint256 amount) internal {\n\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n\n        _totalSupply = _totalSupply.sub(amount);\n\n        emit Transfer(account, address(0), amount);\n",
                    "message": "Function 'ERC20._burn' (AnyswapToken.sol#520-526) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "    function _approve(address owner, address spender, uint256 amount) internal {\n\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n\n\n        _allowances[owner][spender] = amount;\n\n        emit Approval(owner, spender, amount);\n",
                    "message": "Function 'ERC20._approve' (AnyswapToken.sol#541-547) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": 558,
                    "vulnerability_code": "    function _burnFrom(address account, uint256 amount) internal {\n\n        _burn(account, amount);\n\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n",
                    "message": "Function 'ERC20._burnFrom' (AnyswapToken.sol#555-558) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 593,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    }
}