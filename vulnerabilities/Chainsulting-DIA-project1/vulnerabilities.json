{
    "yield.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 466,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 643,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < lockBoxStructs.length; ++i) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tconstructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t_addOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address tokenContract, uint256 _beginDepositTime, uint256 _endDepositTime, address _kickerWallet, uint256 _kickerDeadline, uint256 _kickerPromille, address _yieldWallet) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        token = IERC20(tokenContract);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        beginDepositTime = _beginDepositTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        endDepositTime = _endDepositTime;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        \n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        kickerWallet = _kickerWallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        kickerDeadline = _kickerDeadline;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        kickerPromille = _kickerPromille;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        yieldWallet = _yieldWallet;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 572,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 643,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < lockBoxStructs.length; ++i) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 644,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (lockBoxStructs[i].releaseTime <= now && lockBoxStructs[i].balance > 0) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 644,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (lockBoxStructs[i].releaseTime <= now && lockBoxStructs[i].balance > 0) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 643,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < lockBoxStructs.length; ++i) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\trequire(isOwner(msg.sender), \"Sender is not owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isContract(target), \"Address: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 592,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now < endDepositTime, \"Deposit time has ended.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 602,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            revert(\"Error: duration not allowed!\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 644,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (lockBoxStructs[i].releaseTime <= now && lockBoxStructs[i].balance > 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 645,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                withdraw(i);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 646,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_33"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": 344,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\n        // for accounts without code, i.e. `keccak256('')`\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != accountHash && codehash != 0x0);\n",
                    "message": "Address.isContract (yield.sol#335-344) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": 677,
                    "vulnerability_code": "    function allocatePremium(uint256 lockBoxNumber, uint256 premiumAmount) public onlyOwner {\n\n        LockBoxStruct storage l = lockBoxStructs[lockBoxNumber];\n\n        require(l.releaseTime <= now);\n\n        require(token.transferFrom(kickerWallet, address(this), premiumAmount));\n\n        l.balance += premiumAmount;\n",
                    "message": "Reentrancy in DIACompanyLockup.allocatePremium (yield.sol#672-677):\n\tExternal calls:\n\t- require(bool)(token.transferFrom(kickerWallet,address(this),premiumAmount)) (yield.sol#675)\n\tState variables written after the call(s):\n\t- lockBoxStructs (yield.sol#676)\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 yieldAmount;\n",
                    "message": "yieldAmount in DIACompanyLockup.deposit (yield.sol#594) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        LockBoxStruct memory l;\n",
                    "message": "l in DIACompanyLockup.deposit (yield.sol#616) is a local variable never initialiazed\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": 622,
                    "vulnerability_code": "    function deposit(address beneficiary, uint256 amount, uint256 duration) internal {\n\n        require(now < endDepositTime, \"Deposit time has ended.\");\n\n        // Define and get amount of yield\n\n        uint256 yieldAmount;\n\n        if (duration == 12 weeks) {\n\n            yieldAmount = (threeMonthPromille * amount) / 1000;\n\n        } else if (duration == 24 weeks) {\n\n            yieldAmount = (sixMonthPromille * amount) / 1000;\n\n        } else if (duration == 36 weeks) {\n\n            yieldAmount = (nineMonthPromille * amount) / 1000;\n\n        } else {\n\n            revert(\"Error: duration not allowed!\");\n\n        }\n\n        require(token.transferFrom(yieldWallet, address(this), yieldAmount));\n\n        \n\n        // Define and get kicker payment\n\n        uint256 kickerAmount = (kickerPromille * amount) / 1000;\n\n        if (now <= kickerDeadline) {\n\n            require(token.transferFrom(kickerWallet, address(this), kickerAmount));\n\n        }\n\n        \n\n        // Get lockable tokens from user\n\n        require(token.transferFrom(msg.sender, address(this), amount));\n\n        \n\n        // Build lockbox\n\n        LockBoxStruct memory l;\n\n        l.beneficiary = beneficiary;\n\n        l.balance = amount + kickerAmount + yieldAmount;\n\n        l.releaseTime = beginDepositTime + duration;\n\n        lockBoxStructs.push(l);\n\n        emit LogLockupDeposit(msg.sender, l.beneficiary, l.balance, l.releaseTime);\n",
                    "message": "Reentrancy in DIACompanyLockup.deposit (yield.sol#591-622):\n\tExternal calls:\n\t- require(bool)(token.transferFrom(yieldWallet,address(this),yieldAmount)) (yield.sol#604)\n\t- require(bool)(token.transferFrom(kickerWallet,address(this),kickerAmount)) (yield.sol#609)\n\t- require(bool)(token.transferFrom(msg.sender,address(this),amount)) (yield.sol#613)\n\tState variables written after the call(s):\n\t- lockBoxStructs (yield.sol#620)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": 344,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\n        // for accounts without code, i.e. `keccak256('')`\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != accountHash && codehash != 0x0);\n",
                    "message": "Address.isContract uses assembly (yield.sol#335-344)\n\t- yield.sol#342\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n\n        require(isContract(target), \"Address: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = target.call.value(weiValue)(data);\n\n        if (success) {\n\n            return returndata;\n\n        } else {\n\n            // Look for revert reason and bubble it up if present\n\n            if (returndata.length > 0) {\n\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n\n\n                // solhint-disable-next-line no-inline-assembly\n\n                assembly {\n\n                    let returndata_size := mload(returndata)\n\n                    revert(add(32, returndata), returndata_size)\n\n                }\n\n            } else {\n\n                revert(errorMessage);\n\n            }\n\n        }\n",
                    "message": "Address._functionCallWithValue uses assembly (yield.sol#428-449)\n\t- yield.sol#441-444\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 67,
                    "vulnerability_code": "\tfunction addOwner(address account) public onlyOwner {\n\n\t\t_addOwner(account);\n",
                    "message": "OTCRoles.addOwner (yield.sol#65-67) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "\tfunction renounceOwner() public {\n\n\t\t_removeOwner(msg.sender);\n",
                    "message": "OTCRoles.renounceOwner (yield.sol#69-71) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 574,
                    "vulnerability_to_line": 576,
                    "vulnerability_code": "    function getLockBoxBeneficiary(uint256 lockBoxNumber) public view returns(address) {\n\n        return lockBoxStructs[lockBoxNumber].beneficiary;\n",
                    "message": "DIACompanyLockup.getLockBoxBeneficiary (yield.sol#574-576) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 579,
                    "vulnerability_to_line": 581,
                    "vulnerability_code": "    function deposit3m(address beneficiary, uint256 amount) public {\n\n        deposit(beneficiary, amount, 12 weeks);\n",
                    "message": "DIACompanyLockup.deposit3m (yield.sol#579-581) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 585,
                    "vulnerability_code": "    function deposit6m(address beneficiary, uint256 amount) public {\n\n        deposit(beneficiary, amount, 24 weeks);\n",
                    "message": "DIACompanyLockup.deposit6m (yield.sol#583-585) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": 589,
                    "vulnerability_code": "    function deposit9m(address beneficiary, uint256 amount) public {\n\n        deposit(beneficiary, amount, 36 weeks);\n",
                    "message": "DIACompanyLockup.deposit9m (yield.sol#587-589) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": 629,
                    "vulnerability_code": "    function updateBeneficiary(uint256 lockBoxNumber, address newBeneficiary) public {\n\n        LockBoxStruct storage l = lockBoxStructs[lockBoxNumber];\n\n        require(msg.sender == l.beneficiary);\n\n        l.beneficiary = newBeneficiary;\n",
                    "message": "DIACompanyLockup.updateBeneficiary (yield.sol#625-629) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 641,
                    "vulnerability_to_line": 648,
                    "vulnerability_code": "    function triggerWithdrawAll() public {\n\n        // SWC-DoS With Block Gas Limit: L640 - L644\n\n        for (uint256 i = 0; i < lockBoxStructs.length; ++i) {\n\n            if (lockBoxStructs[i].releaseTime <= now && lockBoxStructs[i].balance > 0) {\n\n                withdraw(i);\n\n            }\n\n        }\n",
                    "message": "DIACompanyLockup.triggerWithdrawAll (yield.sol#641-648) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 651,
                    "vulnerability_to_line": 653,
                    "vulnerability_code": "    function updateEndDepositTime (uint256 newEndTime) public onlyOwner {\n\n        endDepositTime = newEndTime;\n",
                    "message": "DIACompanyLockup.updateEndDepositTime (yield.sol#651-653) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 655,
                    "vulnerability_to_line": 657,
                    "vulnerability_code": "    function updateYieldWallet(address newWallet) public onlyOwner {\n\n        yieldWallet = newWallet;\n",
                    "message": "DIACompanyLockup.updateYieldWallet (yield.sol#655-657) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 659,
                    "vulnerability_to_line": 663,
                    "vulnerability_code": "    function updateKicker(address newWallet, uint256 newPromille, uint256 newDeadline) public onlyOwner {\n\n        kickerWallet = newWallet;\n\n        kickerPromille = newPromille;\n\n        kickerDeadline = newDeadline;\n",
                    "message": "DIACompanyLockup.updateKicker (yield.sol#659-663) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 665,
                    "vulnerability_to_line": 669,
                    "vulnerability_code": "    function updateYields(uint256 threeMonths, uint256 sixMonths, uint256 nineMonths) public onlyOwner {\n\n        threeMonthPromille = threeMonths;\n\n        sixMonthPromille = sixMonths;\n\n        nineMonthPromille = nineMonths;\n",
                    "message": "DIACompanyLockup.updateYields (yield.sol#665-669) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": 677,
                    "vulnerability_code": "    function allocatePremium(uint256 lockBoxNumber, uint256 premiumAmount) public onlyOwner {\n\n        LockBoxStruct storage l = lockBoxStructs[lockBoxNumber];\n\n        require(l.releaseTime <= now);\n\n        require(token.transferFrom(kickerWallet, address(this), premiumAmount));\n\n        l.balance += premiumAmount;\n",
                    "message": "DIACompanyLockup.allocatePremium (yield.sol#672-677) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.12;\n",
                    "message": "Detected issues with version pragma in yield.sol:\n\t- pragma solidity^0.5.12 (yield.sol#4): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": 368,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Low level call in Address.sendValue (yield.sol#362-368):\n\t-(success) = recipient.call.value(amount)() yield.sol#366\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n\n        require(isContract(target), \"Address: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = target.call.value(weiValue)(data);\n\n        if (success) {\n\n            return returndata;\n\n        } else {\n\n            // Look for revert reason and bubble it up if present\n\n            if (returndata.length > 0) {\n\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n\n\n                // solhint-disable-next-line no-inline-assembly\n\n                assembly {\n\n                    let returndata_size := mload(returndata)\n\n                    revert(add(32, returndata), returndata_size)\n\n                }\n\n            } else {\n\n                revert(errorMessage);\n\n            }\n\n        }\n",
                    "message": "Low level call in Address._functionCallWithValue (yield.sol#428-449):\n\t-(success,returndata) = target.call.value(weiValue)(data) yield.sol#432\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "\tfunction _addOwner(address account) internal {\n\n\t\t_owners.add(account);\n\n\t\temit OwnerAdded(account);\n",
                    "message": "Function 'OTCRoles._addOwner' (yield.sol#73-76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": 81,
                    "vulnerability_code": "\tfunction _removeOwner(address account) internal {\n\n\t\t_owners.remove(account);\n\n\t\temit OwnerRemoved(account);\n",
                    "message": "Function 'OTCRoles._removeOwner' (yield.sol#78-81) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n\n        require(isContract(target), \"Address: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = target.call.value(weiValue)(data);\n\n        if (success) {\n\n            return returndata;\n\n        } else {\n\n            // Look for revert reason and bubble it up if present\n\n            if (returndata.length > 0) {\n\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n\n\n                // solhint-disable-next-line no-inline-assembly\n\n                assembly {\n\n                    let returndata_size := mload(returndata)\n\n                    revert(add(32, returndata), returndata_size)\n\n                }\n\n            } else {\n\n                revert(errorMessage);\n\n            }\n\n        }\n",
                    "message": "Function 'Address._functionCallWithValue' (yield.sol#428-449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 517,
                    "vulnerability_code": "    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
                    "message": "Function 'SafeERC20._callOptionalReturn' (yield.sol#507-517) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address tokenContract, uint256 _beginDepositTime, uint256 _endDepositTime, address _kickerWallet, uint256 _kickerDeadline, uint256 _kickerPromille, address _yieldWallet) public {\n",
                    "message": "Parameter '_beginDepositTime' of DIACompanyLockup. (yield.sol#563) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address tokenContract, uint256 _beginDepositTime, uint256 _endDepositTime, address _kickerWallet, uint256 _kickerDeadline, uint256 _kickerPromille, address _yieldWallet) public {\n",
                    "message": "Parameter '_endDepositTime' of DIACompanyLockup. (yield.sol#563) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address tokenContract, uint256 _beginDepositTime, uint256 _endDepositTime, address _kickerWallet, uint256 _kickerDeadline, uint256 _kickerPromille, address _yieldWallet) public {\n",
                    "message": "Parameter '_kickerWallet' of DIACompanyLockup. (yield.sol#563) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address tokenContract, uint256 _beginDepositTime, uint256 _endDepositTime, address _kickerWallet, uint256 _kickerDeadline, uint256 _kickerPromille, address _yieldWallet) public {\n",
                    "message": "Parameter '_kickerDeadline' of DIACompanyLockup. (yield.sol#563) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address tokenContract, uint256 _beginDepositTime, uint256 _endDepositTime, address _kickerWallet, uint256 _kickerDeadline, uint256 _kickerPromille, address _yieldWallet) public {\n",
                    "message": "Parameter '_kickerPromille' of DIACompanyLockup. (yield.sol#563) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address tokenContract, uint256 _beginDepositTime, uint256 _endDepositTime, address _kickerWallet, uint256 _kickerDeadline, uint256 _kickerPromille, address _yieldWallet) public {\n",
                    "message": "Parameter '_yieldWallet' of DIACompanyLockup. (yield.sol#563) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 643,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < lockBoxStructs.length; ++i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 643,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < lockBoxStructs.length; ++i) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tRoles.Role private _owners;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 599,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else if (duration == 36 weeks) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 466,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    IERC20 token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 beginDepositTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 536,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 endDepositTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address yieldWallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address kickerWallet;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 kickerDeadline;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 kickerPromille;\n",
                    "message": null
                }
            ]
        }
    },
    "DIAToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract DIAToken is ERC20, ERC20Detailed, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal { }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address msgSender = _msgSender();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = msgSender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0), msgSender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 618,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public ERC20Detailed(\"DIAToken\", \"DIA\", 18) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 619,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _mint(_msgSender(), 200000000 * (10 ** uint256(decimals())));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 620,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: mint to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(), \"Ownable: caller is not the owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_32"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.name (local variable @ DIAToken.sol#504) shadows:\n\t- ERC20Detailed.name (function @ DIAToken.sol#513-515)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.symbol (local variable @ DIAToken.sol#504) shadows:\n\t- ERC20Detailed.symbol (function @ DIAToken.sol#521-523)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.decimals (local variable @ DIAToken.sol#504) shadows:\n\t- ERC20Detailed.decimals (function @ DIAToken.sol#537-539)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": 304,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return _totalSupply;\n",
                    "message": "ERC20.totalSupply (DIAToken.sol#302-304) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (DIAToken.sol#43) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "    function balanceOf(address account) public view returns (uint256) {\n\n        return _balances[account];\n",
                    "message": "ERC20.balanceOf (DIAToken.sol#309-311) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address account) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (DIAToken.sol#48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address recipient, uint256 amount) external returns (bool);\n",
                    "message": "IERC20.transfer (DIAToken.sol#57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "    function transfer(address recipient, uint256 amount) public returns (bool) {\n\n        _transfer(_msgSender(), recipient, amount);\n\n        return true;\n",
                    "message": "ERC20.transfer (DIAToken.sol#321-324) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": 331,
                    "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n\n        return _allowances[owner][spender];\n",
                    "message": "ERC20.allowance (DIAToken.sol#329-331) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) external view returns (uint256);\n",
                    "message": "IERC20.allowance (DIAToken.sol#66) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": 343,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) public returns (bool) {\n\n        _approve(_msgSender(), spender, amount);\n\n        return true;\n",
                    "message": "ERC20.approve (DIAToken.sol#340-343) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) external returns (bool);\n",
                    "message": "IERC20.approve (DIAToken.sol#82) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n",
                    "message": "IERC20.transferFrom (DIAToken.sol#93) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": 361,
                    "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n\n        _transfer(sender, recipient, amount);\n\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n\n        return true;\n",
                    "message": "ERC20.transferFrom (DIAToken.sol#357-361) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": 378,
                    "vulnerability_code": "    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n\n        return true;\n",
                    "message": "ERC20.increaseAllowance (DIAToken.sol#375-378) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": 397,
                    "vulnerability_code": "    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n\n        return true;\n",
                    "message": "ERC20.decreaseAllowance (DIAToken.sol#394-397) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 513,
                    "vulnerability_to_line": 515,
                    "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
                    "message": "ERC20Detailed.name (DIAToken.sol#513-515) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": 523,
                    "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
                    "message": "ERC20Detailed.symbol (DIAToken.sol#521-523) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": 570,
                    "vulnerability_code": "    function owner() public view returns (address) {\n\n        return _owner;\n",
                    "message": "Ownable.owner (DIAToken.sol#568-570) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": 597,
                    "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipTransferred(_owner, address(0));\n\n        _owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (DIAToken.sol#594-597) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 603,
                    "vulnerability_to_line": 605,
                    "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        _transferOwnership(newOwner);\n",
                    "message": "Ownable.transferOwnership (DIAToken.sol#603-605) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": 626,
                    "vulnerability_code": "    function addAuditHash(uint256 hashKey, uint256 newAuditHash) public onlyOwner {\n\n       auditHashes[hashKey] = newAuditHash;\n",
                    "message": "DIAToken.addAuditHash (DIAToken.sol#624-626) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in DIAToken.sol:\n\t- pragma solidity^0.5.0 (DIAToken.sol#7): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "    function _msgSender() internal view returns (address payable) {\n\n        return msg.sender;\n",
                    "message": "Function 'Context._msgSender' (DIAToken.sol#25-27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": 32,
                    "vulnerability_code": "    function _msgData() internal view returns (bytes memory) {\n\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\n        return msg.data;\n",
                    "message": "Function 'Context._msgData' (DIAToken.sol#29-32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": 420,
                    "vulnerability_code": "    function _transfer(address sender, address recipient, uint256 amount) internal {\n\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n\n        _balances[recipient] = _balances[recipient].add(amount);\n\n        emit Transfer(sender, recipient, amount);\n",
                    "message": "Function 'ERC20._transfer' (DIAToken.sol#413-420) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "    function _mint(address account, uint256 amount) internal {\n\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n\n\n        _totalSupply = _totalSupply.add(amount);\n\n        _balances[account] = _balances[account].add(amount);\n\n        emit Transfer(address(0), account, amount);\n",
                    "message": "Function 'ERC20._mint' (DIAToken.sol#431-437) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "    function _burn(address account, uint256 amount) internal {\n\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n\n        _totalSupply = _totalSupply.sub(amount);\n\n        emit Transfer(account, address(0), amount);\n",
                    "message": "Function 'ERC20._burn' (DIAToken.sol#450-456) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": 477,
                    "vulnerability_code": "    function _approve(address owner, address spender, uint256 amount) internal {\n\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n\n\n        _allowances[owner][spender] = amount;\n\n        emit Approval(owner, spender, amount);\n",
                    "message": "Function 'ERC20._approve' (DIAToken.sol#471-477) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": 488,
                    "vulnerability_code": "    function _burnFrom(address account, uint256 amount) internal {\n\n        _burn(account, amount);\n\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n",
                    "message": "Function 'ERC20._burnFrom' (DIAToken.sol#485-488) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": 614,
                    "vulnerability_code": "    function _transferOwnership(address newOwner) internal {\n\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (DIAToken.sol#610-614) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 497,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private _owner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    }
}