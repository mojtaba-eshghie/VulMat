{
    "bt-finance-6300bc1271b73a1755fae02594d25fdf6fa39a9c/contracts/Controller.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\ttimelock = tx.origin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        rewards = tx.origin; \n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == vaults[_token], \"!vault\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_38"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract (Controller.sol#68-74) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": 211,
                    "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        address _current = strategies[_token];\n\n        if (_current != address(0)) {\n\n           Strategy(_current).withdrawAll();\n\n        }\n\n        strategies[_token] = _strategy;\n",
                    "message": "Reentrancy in Controller.setStrategy (Controller.sol#204-211):\n\tExternal calls:\n\t- Strategy(_current).withdrawAll() (Controller.sol#208)\n\tState variables written after the call(s):\n\t- strategies (Controller.sol#210)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": 211,
                    "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        address _current = strategies[_token];\n\n        if (_current != address(0)) {\n\n           Strategy(_current).withdrawAll();\n\n        }\n\n        strategies[_token] = _strategy;\n",
                    "message": "Controller.setStrategy (Controller.sol#204-211) does not use the value returned by external calls:\n\t-Strategy(_current).withdrawAll() (Controller.sol#208)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": 240,
                    "vulnerability_code": "    function withdrawAll(address _token) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        Strategy(strategies[_token]).withdrawAll();\n",
                    "message": "Controller.withdrawAll (Controller.sol#237-240) does not use the value returned by external calls:\n\t-Strategy(strategies[_token]).withdrawAll() (Controller.sol#239)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract uses assembly (Controller.sol#68-74)\n\t- Controller.sol#72\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": 181,
                    "vulnerability_code": "\tfunction setRewardsAddress(address _rewards) public {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        rewards = _rewards;\n",
                    "message": "Controller.setRewardsAddress (Controller.sol#178-181) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 187,
                    "vulnerability_code": "\tfunction setTimeLock(address _timelock) public \n\n    {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        timelock = _timelock;\n",
                    "message": "Controller.setTimeLock (Controller.sol#183-187) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": 192,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
                    "message": "Controller.setGovernance (Controller.sol#189-192) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": 197,
                    "vulnerability_code": "    function setVault(address _token, address _vault) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        vaults[_token] = _vault;\n",
                    "message": "Controller.setVault (Controller.sol#194-197) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "    function setConverter(address _input, address _output, address _converter) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        converters[_input][_output] = _converter;\n",
                    "message": "Controller.setConverter (Controller.sol#199-202) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": 211,
                    "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        address _current = strategies[_token];\n\n        if (_current != address(0)) {\n\n           Strategy(_current).withdrawAll();\n\n        }\n\n        strategies[_token] = _strategy;\n",
                    "message": "Controller.setStrategy (Controller.sol#204-211) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": 216,
                    "vulnerability_code": "\tfunction delStrategy(address _token) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        strategies[_token] = address(0);\n",
                    "message": "Controller.delStrategy (Controller.sol#213-216) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 231,
                    "vulnerability_code": "    function earn(address _token, uint _amount) public {\n\n        address _strategy = strategies[_token];\n\n        address _want = Strategy(_strategy).want();\n\n        if (_want != _token) {\n\n            address converter = converters[_token][_want];\n\n            IERC20(_token).safeTransfer(converter, _amount);\n\n            _amount = Converter(converter).convert(_strategy);\n\n            IERC20(_want).safeTransfer(_strategy, _amount);\n\n        } else {\n\n            IERC20(_token).safeTransfer(_strategy, _amount);\n\n        }\n\n        Strategy(_strategy).deposit();\n",
                    "message": "Controller.earn (Controller.sol#219-231) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": 240,
                    "vulnerability_code": "    function withdrawAll(address _token) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        Strategy(strategies[_token]).withdrawAll();\n",
                    "message": "Controller.withdrawAll (Controller.sol#237-240) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": 246,
                    "vulnerability_code": "    function withdraw(address _token, uint _amount) public {\n\n        require(msg.sender == vaults[_token], \"!vault\");\n\n        Strategy(strategies[_token]).withdraw(_amount);\n",
                    "message": "Controller.withdraw (Controller.sol#243-246) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": "Detected issues with version pragma in Controller.sol:\n\t- pragma solidity^0.5.15 (Controller.sol#9): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Low level call in Address.sendValue (Controller.sol#78-84):\n\t-(success) = recipient.call.value(amount)() Controller.sol#82\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": 116,
                    "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
                    "message": "Low level call in SafeERC20.callOptionalReturn (Controller.sol#105-116):\n\t-(success,returndata) = address(token).call(data) Controller.sol#109\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address) external;\n",
                    "message": "Parameter '' of Strategy.withdraw (Controller.sol#122) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint) external;\n",
                    "message": "Parameter '' of Strategy.withdraw (Controller.sol#123) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function convert(address) external returns (uint);\n",
                    "message": "Parameter '' of Converter.convert (Controller.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setRewardsAddress(address _rewards) public {\n",
                    "message": "Parameter '_rewards' of Controller.setRewardsAddress (Controller.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setTimeLock(address _timelock) public \n",
                    "message": "Parameter '_timelock' of Controller.setTimeLock (Controller.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": "Parameter '_governance' of Controller.setGovernance (Controller.sol#189) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setVault(address _token, address _vault) public {\n",
                    "message": "Parameter '_token' of Controller.setVault (Controller.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setVault(address _token, address _vault) public {\n",
                    "message": "Parameter '_vault' of Controller.setVault (Controller.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setConverter(address _input, address _output, address _converter) public {\n",
                    "message": "Parameter '_input' of Controller.setConverter (Controller.sol#199) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setConverter(address _input, address _output, address _converter) public {\n",
                    "message": "Parameter '_output' of Controller.setConverter (Controller.sol#199) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setConverter(address _input, address _output, address _converter) public {\n",
                    "message": "Parameter '_converter' of Controller.setConverter (Controller.sol#199) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n",
                    "message": "Parameter '_token' of Controller.setStrategy (Controller.sol#204) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n",
                    "message": "Parameter '_strategy' of Controller.setStrategy (Controller.sol#204) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction delStrategy(address _token) public {\n",
                    "message": "Parameter '_token' of Controller.delStrategy (Controller.sol#213) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function earn(address _token, uint _amount) public {\n",
                    "message": "Parameter '_token' of Controller.earn (Controller.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function earn(address _token, uint _amount) public {\n",
                    "message": "Parameter '_amount' of Controller.earn (Controller.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _token) external view returns (uint) {\n",
                    "message": "Parameter '_token' of Controller.balanceOf (Controller.sol#233) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawAll(address _token) public {\n",
                    "message": "Parameter '_token' of Controller.withdrawAll (Controller.sol#237) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _token, uint _amount) public {\n",
                    "message": "Parameter '_token' of Controller.withdraw (Controller.sol#243) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _token, uint _amount) public {\n",
                    "message": "Parameter '_amount' of Controller.withdraw (Controller.sol#243) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        strategies[_token] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setRewardsAddress(address _rewards) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setTimeLock(address _timelock) public \n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setVault(address _token, address _vault) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setConverter(address _input, address _output, address _converter) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setStrategy(address _token, address _strategy) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\ttimelock = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        rewards = tx.origin; \n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swap(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata distribution,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 flags\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256 returnAmount);\n",
                    "message": null
                }
            ]
        }
    },
    "bt-finance-6300bc1271b73a1755fae02594d25fdf6fa39a9c/contracts/vote/BT-ETHTheCitadel.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {}\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.7;\n",
                    "message": "Detected issues with version pragma in BT-ETHTheCitadel.sol:\n\t- pragma solidity^0.6.7 (BT-ETHTheCitadel.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address)\n",
                    "message": "Parameter '' of StakingRewards.balanceOf (BT-ETHTheCitadel.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 82,
                    "vulnerability_code": "contract BT_ETHVoteProxy {\n\n    IERC20 public constant votes = IERC20(\n\n        0x1aDAC7dE5C5d9894a4F6A80868AdE96F8a2ed0eb\n\n    );\n\n\n\n    StakingRewards public constant stakingRewards = StakingRewards(\n\n        0xC74d15D2e61414C0975B9DC31fA8921c9909D08D\n\n    );\n\n\n\n    function decimals() external pure returns (uint8) {\n\n        return uint8(9);\n\n    }\n\n\n\n    function name() external pure returns (string memory) {\n\n        return \"BT In The Citadel\";\n\n    }\n\n\n\n    function symbol() external pure returns (string memory) {\n\n        return \"BT C\";\n\n    }\n\n\n\n    function totalSupply() external view returns (uint256) {\n\n        return sqrt(votes.totalSupply());\n\n    }\n\n\n\n    function balanceOf(address _voter) external view returns (uint256) {\n\n        uint256 _votes = stakingRewards.balanceOf(_voter);\n\n        return sqrt(_votes);\n\n    }\n\n\n\n    function sqrt(uint256 x) public pure returns (uint256 y) {\n\n        uint256 z = (x + 1) / 2;\n\n        y = x;\n\n        while (z < y) {\n\n            y = z;\n\n            z = (x / z + z) / 2;\n\n        }\n\n    }\n\n\n\n    constructor() public {}\n",
                    "message": "Contract 'BT_ETHVoteProxy' (BT-ETHTheCitadel.sol#42-82) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _voter) external view returns (uint256) {\n",
                    "message": "Parameter '_voter' of BT_ETHVoteProxy.balanceOf (BT-ETHTheCitadel.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "    IERC20 public constant votes = IERC20(\n\n        0x1aDAC7dE5C5d9894a4F6A80868AdE96F8a2ed0eb\n",
                    "message": "Constant 'BT_ETHVoteProxy.votes' (BT-ETHTheCitadel.sol#43-45) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    StakingRewards public constant stakingRewards = StakingRewards(\n\n        0xC74d15D2e61414C0975B9DC31fA8921c9909D08D\n",
                    "message": "Constant 'BT_ETHVoteProxy.stakingRewards' (BT-ETHTheCitadel.sol#47-49) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        0x1aDAC7dE5C5d9894a4F6A80868AdE96F8a2ed0eb\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        0xC74d15D2e61414C0975B9DC31fA8921c9909D08D\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (z < y) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.7;\n",
                    "message": null
                }
            ]
        }
    },
    "bt-finance-6300bc1271b73a1755fae02594d25fdf6fa39a9c/contracts/stake/StakingRewardsFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 383,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 673,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract StakingRewardsFactory is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 722,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _rewardRates.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public periodFinish = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 522,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public rewardRate = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0), _owner);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 536,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _rewardsDistribution,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _rewardsToken,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 538,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _stakingToken\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 540,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        rewardsToken = IERC20(_rewardsToken);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        stakingToken = IERC20(_stakingToken);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        rewardsDistribution = _rewardsDistribution;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 697,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 698,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _rewardsToken,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _govRewardAccount,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 700,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _devRewardAccount0,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 701,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _devRewardAccount1,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 702,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _stakingRewardsGenesis\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) Ownable() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 704,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_stakingRewardsGenesis >= block.timestamp, 'StakingRewardsFactory::constructor: genesis too soon');\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 705,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        rewardsToken = _rewardsToken;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 722,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            StakingRewardsInfo storage  info = stakingRewardsInfoByStakingToken[stakingTokens[i]];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            StakingRewardsInfo storage  info = stakingRewardsInfoByStakingToken[stakingTokens[i]];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 735,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            StakingRewardsInfo storage  info = stakingRewardsInfoByStakingToken[_stakingTokens[i]];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 740,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                info.stakingRewards = address(new StakingRewards(/*_rewardsDistribution=*/ address(this), rewardsToken, _stakingTokens[i]));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 741,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                stakingTokens.push(_stakingTokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 790,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            StakingRewardsInfo memory info = stakingRewardsInfoByStakingToken[stakingTokens[i]];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 790,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            StakingRewardsInfo memory info = stakingRewardsInfoByStakingToken[stakingTokens[i]];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 794,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if(stakingTokens[i] == rewardsToken){\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 794,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if(stakingTokens[i] == rewardsToken){\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 722,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _rewardRates.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(), \"Ownable: caller is not the owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, \"SafeMath: subtraction overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, \"SafeMath: division by zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b != 0, \"SafeMath: modulo by zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == rewardsDistribution, \"Caller is not RewardsDistribution contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 580,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(amount > 0, \"Cannot stake 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 592,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(amount > 0, \"Cannot stake 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(amount > 0, \"Cannot withdraw 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 637,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(rewardRate <= balance.div(rewardsDuration), \"Provided reward too high\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 704,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_stakingRewardsGenesis >= block.timestamp, 'StakingRewardsFactory::constructor: genesis too soon');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 720,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_stakingTokens.length == _rewardRates.length, \"stakingTokens and rewardRates lengths mismatch\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 730,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_rewardRates[i] > 0, \"rewardRate zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 731,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_stakingTokens[i] != address(0), \"StakingRewardsFactory::deploy: stakingToken empty\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(info.rewardRate==0, \"StakingRewardsFactory::deploy: _stakingTokens is repeat\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 744,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(totalRate == 10000, 'StakingRewardsFactory::deploy: totalRate not equal to 10000');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(stakingTokens.length > 0, 'StakingRewardsFactory::notifyRewardAmounts: called before any deploys');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 759,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(block.timestamp >= stakingRewardsGenesis, 'StakingRewardsFactory::notifyRewardAmounts: reward not start');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 760,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(stakingRateTotal > 0, 'StakingRewardsFactory::notifyRewardAmounts: reward is over');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_stakingToken != address(0), 'StakingRewardsFactory::notifyRewardAmount: not deployed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 818,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 819,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                IERC20(rewardsToken).transfer(_stakingToken, _rewardAmount),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 820,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                'StakingRewardsFactory::notifyRewardAmount: transfer failed'\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 821,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 827,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_account != address(0), 'StakingRewardsFactory::_reserveRewards: not deployed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 829,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(rewardsToken).transfer(_account, _rawRewardsAmount),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 831,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            'StakingRewardsFactory::_reserveRewards: transfer failed'\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 836,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_mintAmount > 0, 'StakingRewardsFactory::_mint: mintAmount is zero');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 842,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(_surplusRewardAmount > 0 && farmAddr != address(0)){\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _notifyRewardAmount(farmAddr,_surplusRewardAmount);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 808,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 722,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _rewardRates.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == rewardsDistribution, \"Caller is not RewardsDistribution contract\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 704,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_stakingRewardsGenesis >= block.timestamp, 'StakingRewardsFactory::constructor: genesis too soon');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 720,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_stakingTokens.length == _rewardRates.length, \"stakingTokens and rewardRates lengths mismatch\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 731,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_stakingTokens[i] != address(0), \"StakingRewardsFactory::deploy: stakingToken empty\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(info.rewardRate==0, \"StakingRewardsFactory::deploy: _stakingTokens is repeat\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 744,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(totalRate == 10000, 'StakingRewardsFactory::deploy: totalRate not equal to 10000');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(stakingTokens.length > 0, 'StakingRewardsFactory::notifyRewardAmounts: called before any deploys');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 759,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(block.timestamp >= stakingRewardsGenesis, 'StakingRewardsFactory::notifyRewardAmounts: reward not start');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 760,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(stakingRateTotal > 0, 'StakingRewardsFactory::notifyRewardAmounts: reward is over');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_stakingToken != address(0), 'StakingRewardsFactory::notifyRewardAmount: not deployed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 818,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 819,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                IERC20(rewardsToken).transfer(_stakingToken, _rewardAmount),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 820,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                'StakingRewardsFactory::notifyRewardAmount: transfer failed'\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 821,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 827,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_account != address(0), 'StakingRewardsFactory::_reserveRewards: not deployed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 829,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(rewardsToken).transfer(_account, _rawRewardsAmount),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 831,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            'StakingRewardsFactory::_reserveRewards: transfer failed'\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 836,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_mintAmount > 0, 'StakingRewardsFactory::_mint: mintAmount is zero');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_45"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": 366,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies in extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "Address.isContract (StakingRewardsFactory.sol#357-366) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": 619,
                    "vulnerability_code": "    function exit() external {\n\n        withdraw(_balances[msg.sender]);\n\n        getReward();\n",
                    "message": "Reentrancy in StakingRewards.exit (StakingRewardsFactory.sol#616-619):\n\tExternal calls:\n\t- withdraw(_balances[msg.sender]) (StakingRewardsFactory.sol#617)\n\t- getReward() (StakingRewardsFactory.sol#618)\n\tState variables written after the call(s):\n\t- _guardCounter (StakingRewardsFactory.sol#618)\n\t- lastUpdateTime (StakingRewardsFactory.sol#618)\n\t- rewardPerTokenStored (StakingRewardsFactory.sol#618)\n\t- rewards (StakingRewardsFactory.sol#618)\n\t- userRewardPerTokenPaid (StakingRewardsFactory.sol#618)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": 642,
                    "vulnerability_code": "    function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {\n\n        if (block.timestamp >= periodFinish) {\n\n            rewardRate = reward.div(rewardsDuration);\n\n        } else {\n\n            uint256 remaining = periodFinish.sub(block.timestamp);\n\n            uint256 leftover = remaining.mul(rewardRate);\n\n            rewardRate = reward.add(leftover).div(rewardsDuration);\n\n        }\n\n\n\n        // Ensure the provided reward amount is not more than the balance in the contract.\n\n        // This keeps the reward rate in the right range, preventing overflows due to\n\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\n\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n\n        uint balance = rewardsToken.balanceOf(address(this));\n\n        require(rewardRate <= balance.div(rewardsDuration), \"Provided reward too high\");\n\n\n\n        lastUpdateTime = block.timestamp;\n\n        periodFinish = block.timestamp.add(rewardsDuration);\n\n        emit RewardAdded(reward);\n",
                    "message": "Reentrancy in StakingRewards.notifyRewardAmount (StakingRewardsFactory.sol#623-642):\n\tExternal calls:\n\t- balance = rewardsToken.balanceOf(address(this)) (StakingRewardsFactory.sol#636)\n\tState variables written after the call(s):\n\t- periodFinish (StakingRewardsFactory.sol#640)\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 787,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address farmAddr;\n",
                    "message": "farmAddr in StakingRewardsFactory._notifyPoolRewardAmounts (StakingRewardsFactory.sol#787) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.name (local variable @ StakingRewardsFactory.sol#305) shadows:\n\t- ERC20Detailed.name (function @ StakingRewardsFactory.sol#314-316)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.symbol (local variable @ StakingRewardsFactory.sol#305) shadows:\n\t- ERC20Detailed.symbol (function @ StakingRewardsFactory.sol#322-324)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.decimals (local variable @ StakingRewardsFactory.sol#305) shadows:\n\t- ERC20Detailed.decimals (function @ StakingRewardsFactory.sol#338-340)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": 642,
                    "vulnerability_code": "    function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {\n\n        if (block.timestamp >= periodFinish) {\n\n            rewardRate = reward.div(rewardsDuration);\n\n        } else {\n\n            uint256 remaining = periodFinish.sub(block.timestamp);\n\n            uint256 leftover = remaining.mul(rewardRate);\n\n            rewardRate = reward.add(leftover).div(rewardsDuration);\n\n        }\n\n\n\n        // Ensure the provided reward amount is not more than the balance in the contract.\n\n        // This keeps the reward rate in the right range, preventing overflows due to\n\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\n\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n\n        uint balance = rewardsToken.balanceOf(address(this));\n\n        require(rewardRate <= balance.div(rewardsDuration), \"Provided reward too high\");\n\n\n\n        lastUpdateTime = block.timestamp;\n\n        periodFinish = block.timestamp.add(rewardsDuration);\n\n        emit RewardAdded(reward);\n",
                    "message": "Reentrancy in StakingRewards.notifyRewardAmount (StakingRewardsFactory.sol#623-642):\n\tExternal calls:\n\t- balance = rewardsToken.balanceOf(address(this)) (StakingRewardsFactory.sol#636)\n\tState variables written after the call(s):\n\t- lastUpdateTime (StakingRewardsFactory.sol#639)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": 642,
                    "vulnerability_code": "    function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {\n\n        if (block.timestamp >= periodFinish) {\n\n            rewardRate = reward.div(rewardsDuration);\n\n        } else {\n\n            uint256 remaining = periodFinish.sub(block.timestamp);\n\n            uint256 leftover = remaining.mul(rewardRate);\n\n            rewardRate = reward.add(leftover).div(rewardsDuration);\n\n        }\n\n\n\n        // Ensure the provided reward amount is not more than the balance in the contract.\n\n        // This keeps the reward rate in the right range, preventing overflows due to\n\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\n\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n\n        uint balance = rewardsToken.balanceOf(address(this));\n\n        require(rewardRate <= balance.div(rewardsDuration), \"Provided reward too high\");\n\n\n\n        lastUpdateTime = block.timestamp;\n\n        periodFinish = block.timestamp.add(rewardsDuration);\n\n        emit RewardAdded(reward);\n",
                    "message": "StakingRewards.notifyRewardAmount (StakingRewardsFactory.sol#623-642) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(rewardRate <= balance.div(rewardsDuration),Provided reward too high) (StakingRewardsFactory.sol#637)\n\t- block.timestamp >= periodFinish (StakingRewardsFactory.sol#624-630)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 697,
                    "vulnerability_to_line": 712,
                    "vulnerability_code": "    constructor(\n\n        address _rewardsToken,\n\n        address _govRewardAccount,\n\n        address _devRewardAccount0,\n\n        address _devRewardAccount1,\n\n        uint _stakingRewardsGenesis\n\n    ) Ownable() public {\n\n        require(_stakingRewardsGenesis >= block.timestamp, 'StakingRewardsFactory::constructor: genesis too soon');\n\n\n\n        rewardsToken = _rewardsToken;\n\n        govRewardAccount = _govRewardAccount;\n\n        devRewardAccount0 = _devRewardAccount0;\n\n        devRewardAccount1 = _devRewardAccount1;\n\n        stakingRewardsGenesis = _stakingRewardsGenesis;\n\n        timelock = owner();\n",
                    "message": "StakingRewardsFactory.constructor (StakingRewardsFactory.sol#697-712) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(_stakingRewardsGenesis >= block.timestamp,StakingRewardsFactory::constructor: genesis too soon) (StakingRewardsFactory.sol#704)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": 782,
                    "vulnerability_code": "    function notifyRewardAmounts() public {\n\n        require(stakingTokens.length > 0, 'StakingRewardsFactory::notifyRewardAmounts: called before any deploys');\n\n        require(block.timestamp >= stakingRewardsGenesis, 'StakingRewardsFactory::notifyRewardAmounts: reward not start');\n\n        require(stakingRateTotal > 0, 'StakingRewardsFactory::notifyRewardAmounts: reward is over');\n\n\n\n        if(stakingRateGenesis >= stakingRateTotal){\n\n            stakingRateGenesis = stakingRateTotal;\n\n        }\n\n        uint _totalRewardAmount = rewardTotalToken();// equal 270000 * 28620 / 10000 / 100\n\n\n\n        stakingRewardsGenesis = stakingRewardsGenesis + 7 days;\n\n        stakingRateTotal = stakingRateTotal.sub(stakingRateGenesis);\n\n        stakingRateGenesis = stakingRateGenesis.mul(9730).div(10000);//next reward rate equal stakingRateGenesis * (1-2.7%)\n\n\n\n        _mint(_totalRewardAmount);\n\n\n\n        uint _govFundAmount = _totalRewardAmount.div(27);// 1/27\n\n        uint _devFundAmount = _totalRewardAmount.mul(5).div(27);// 5/27\n\n        uint _devFundAmount0 = _devFundAmount.mul(80).div(100);//80%\n\n        _reserveRewards(govRewardAccount,_govFundAmount);\n\n        _reserveRewards(devRewardAccount0,_devFundAmount0);\n\n        _reserveRewards(devRewardAccount1,_devFundAmount.sub(_devFundAmount0));//20%\n\n\n\n        uint _poolRewardAmount = _totalRewardAmount.sub(_govFundAmount).sub(_devFundAmount); // 21/27\n\n        _notifyPoolRewardAmounts(_poolRewardAmount);\n",
                    "message": "StakingRewardsFactory.notifyRewardAmounts (StakingRewardsFactory.sol#757-782) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp >= stakingRewardsGenesis,StakingRewardsFactory::notifyRewardAmounts: reward not start) (StakingRewardsFactory.sol#759)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": 366,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        // This method relies in extcodesize, which returns 0 for contracts in\n\n        // construction, since the code is only stored at the end of the\n\n        // constructor execution.\n\n\n\n        uint256 size;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { size := extcodesize(account) }\n\n        return size > 0;\n",
                    "message": "Address.isContract uses assembly (StakingRewardsFactory.sol#357-366)\n\t- StakingRewardsFactory.sol#364\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 523,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public rewardsDuration = 7 days;\n",
                    "message": "StakingRewards.rewardsDuration should be constant (StakingRewardsFactory.sol#523)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": 138,
                    "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipTransferred(_owner, address(0));\n\n        _owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (StakingRewardsFactory.sol#135-138) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 146,
                    "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        _transferOwnership(newOwner);\n",
                    "message": "Ownable.transferOwnership (StakingRewardsFactory.sol#144-146) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": 316,
                    "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
                    "message": "ERC20Detailed.name (StakingRewardsFactory.sol#314-316) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
                    "message": "ERC20Detailed.symbol (StakingRewardsFactory.sol#322-324) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": 340,
                    "vulnerability_code": "    function decimals() public view returns (uint8) {\n\n        return _decimals;\n",
                    "message": "ERC20Detailed.decimals (StakingRewardsFactory.sol#338-340) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 718,
                    "vulnerability_to_line": 745,
                    "vulnerability_code": "    function deploy(address[] memory _stakingTokens, uint16[] memory _rewardRates) public {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        require(_stakingTokens.length == _rewardRates.length, \"stakingTokens and rewardRates lengths mismatch\");\n\n\n\n        for (uint i = 0; i < stakingTokens.length; i++) {\n\n            StakingRewardsInfo storage  info = stakingRewardsInfoByStakingToken[stakingTokens[i]];\n\n            info.rewardRate = 0;\n\n        }\n\n        uint16  totalRate = 0;\n\n\n\n\n\n        for (uint i = 0; i < _rewardRates.length; i++) {\n\n            require(_rewardRates[i] > 0, \"rewardRate zero\");\n\n            require(_stakingTokens[i] != address(0), \"StakingRewardsFactory::deploy: stakingToken empty\");\n\n\n\n            totalRate = totalRate + _rewardRates[i];\n\n\n\n            StakingRewardsInfo storage  info = stakingRewardsInfoByStakingToken[_stakingTokens[i]];\n\n            require(info.rewardRate==0, \"StakingRewardsFactory::deploy: _stakingTokens is repeat\");\n\n\n\n            info.rewardRate = _rewardRates[i];\n\n            if(info.stakingRewards == address(0)){\n\n                info.stakingRewards = address(new StakingRewards(/*_rewardsDistribution=*/ address(this), rewardsToken, _stakingTokens[i]));\n\n                stakingTokens.push(_stakingTokens[i]);\n\n            }\n\n        }\n\n        require(totalRate == 10000, 'StakingRewardsFactory::deploy: totalRate not equal to 10000');\n",
                    "message": "StakingRewardsFactory.deploy (StakingRewardsFactory.sol#718-745) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": 782,
                    "vulnerability_code": "    function notifyRewardAmounts() public {\n\n        require(stakingTokens.length > 0, 'StakingRewardsFactory::notifyRewardAmounts: called before any deploys');\n\n        require(block.timestamp >= stakingRewardsGenesis, 'StakingRewardsFactory::notifyRewardAmounts: reward not start');\n\n        require(stakingRateTotal > 0, 'StakingRewardsFactory::notifyRewardAmounts: reward is over');\n\n\n\n        if(stakingRateGenesis >= stakingRateTotal){\n\n            stakingRateGenesis = stakingRateTotal;\n\n        }\n\n        uint _totalRewardAmount = rewardTotalToken();// equal 270000 * 28620 / 10000 / 100\n\n\n\n        stakingRewardsGenesis = stakingRewardsGenesis + 7 days;\n\n        stakingRateTotal = stakingRateTotal.sub(stakingRateGenesis);\n\n        stakingRateGenesis = stakingRateGenesis.mul(9730).div(10000);//next reward rate equal stakingRateGenesis * (1-2.7%)\n\n\n\n        _mint(_totalRewardAmount);\n\n\n\n        uint _govFundAmount = _totalRewardAmount.div(27);// 1/27\n\n        uint _devFundAmount = _totalRewardAmount.mul(5).div(27);// 5/27\n\n        uint _devFundAmount0 = _devFundAmount.mul(80).div(100);//80%\n\n        _reserveRewards(govRewardAccount,_govFundAmount);\n\n        _reserveRewards(devRewardAccount0,_devFundAmount0);\n\n        _reserveRewards(devRewardAccount1,_devFundAmount.sub(_devFundAmount0));//20%\n\n\n\n        uint _poolRewardAmount = _totalRewardAmount.sub(_govFundAmount).sub(_devFundAmount); // 21/27\n\n        _notifyPoolRewardAmounts(_poolRewardAmount);\n",
                    "message": "StakingRewardsFactory.notifyRewardAmounts (StakingRewardsFactory.sol#757-782) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 841,
                    "vulnerability_to_line": 844,
                    "vulnerability_code": "    function setTimeLock(address _timelock) public {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        timelock = _timelock;\n",
                    "message": "StakingRewardsFactory.setTimeLock (StakingRewardsFactory.sol#841-844) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": "Detected issues with version pragma in StakingRewardsFactory.sol:\n\t- pragma solidity^0.5.16 (StakingRewardsFactory.sol#7): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": 436,
                    "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n\n        // we're implementing it ourselves.\n\n\n\n        // A Solidity high level call has three parts:\n\n        //  1. The target address is checked to verify it contains contract code\n\n        //  2. The call itself is made, and success asserted\n\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n\n        // solhint-disable-next-line max-line-length\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
                    "message": "Low level call in SafeERC20.callOptionalReturn (StakingRewardsFactory.sol#417-436):\n\t-(success,returndata) = address(token).call(data) StakingRewardsFactory.sol#429\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": 155,
                    "vulnerability_code": "    function _transferOwnership(address newOwner) internal {\n\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (StakingRewardsFactory.sol#151-155) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 536,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _rewardsDistribution,\n",
                    "message": "Parameter '_rewardsDistribution' of StakingRewards. (StakingRewardsFactory.sol#536) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _rewardsToken,\n",
                    "message": "Parameter '_rewardsToken' of StakingRewards. (StakingRewardsFactory.sol#537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 538,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _stakingToken\n",
                    "message": "Parameter '_stakingToken' of StakingRewards. (StakingRewardsFactory.sol#538) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 698,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _rewardsToken,\n",
                    "message": "Parameter '_rewardsToken' of StakingRewardsFactory. (StakingRewardsFactory.sol#698) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _govRewardAccount,\n",
                    "message": "Parameter '_govRewardAccount' of StakingRewardsFactory. (StakingRewardsFactory.sol#699) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 700,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _devRewardAccount0,\n",
                    "message": "Parameter '_devRewardAccount0' of StakingRewardsFactory. (StakingRewardsFactory.sol#700) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 701,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _devRewardAccount1,\n",
                    "message": "Parameter '_devRewardAccount1' of StakingRewardsFactory. (StakingRewardsFactory.sol#701) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 702,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _stakingRewardsGenesis\n",
                    "message": "Parameter '_stakingRewardsGenesis' of StakingRewardsFactory. (StakingRewardsFactory.sol#702) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 718,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deploy(address[] memory _stakingTokens, uint16[] memory _rewardRates) public {\n",
                    "message": "Parameter '_stakingTokens' of StakingRewardsFactory.deploy (StakingRewardsFactory.sol#718) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 718,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deploy(address[] memory _stakingTokens, uint16[] memory _rewardRates) public {\n",
                    "message": "Parameter '_rewardRates' of StakingRewardsFactory.deploy (StakingRewardsFactory.sol#718) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 784,
                    "vulnerability_to_line": 809,
                    "vulnerability_code": "    function _notifyPoolRewardAmounts(uint _poolRewardAmount) private {\n\n        uint _surplusRewardAmount = _poolRewardAmount;\n\n        uint _rewardAmount = 0;\n\n        address farmAddr;\n\n\n\n        for (uint i = 0; i < stakingTokens.length; i++) {\n\n            StakingRewardsInfo memory info = stakingRewardsInfoByStakingToken[stakingTokens[i]];\n\n            if(info.rewardRate <= 0){\n\n                continue;\n\n            }\n\n            if(stakingTokens[i] == rewardsToken){\n\n                farmAddr = info.stakingRewards;\n\n                continue;\n\n            }\n\n            _rewardAmount = _poolRewardAmount.mul(info.rewardRate).div(10000);\n\n            if(_rewardAmount >= _surplusRewardAmount){\n\n                _rewardAmount = _surplusRewardAmount;\n\n            }\n\n            _surplusRewardAmount = _surplusRewardAmount.sub(_rewardAmount);\n\n            _notifyRewardAmount(info.stakingRewards,_rewardAmount);\n\n        }\n\n        _surplusRewardAmount = IERC20(rewardsToken).balanceOf(address(this));\n\n        if(_surplusRewardAmount > 0 && farmAddr != address(0)){\n\n            _notifyRewardAmount(farmAddr,_surplusRewardAmount);\n\n        }\n",
                    "message": "Function 'StakingRewardsFactory._notifyPoolRewardAmounts' (StakingRewardsFactory.sol#784-809) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 784,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _notifyPoolRewardAmounts(uint _poolRewardAmount) private {\n",
                    "message": "Parameter '_poolRewardAmount' of StakingRewardsFactory._notifyPoolRewardAmounts (StakingRewardsFactory.sol#784) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 814,
                    "vulnerability_to_line": 824,
                    "vulnerability_code": "    function _notifyRewardAmount(address _stakingToken,uint _rewardAmount) private {\n\n        require(_stakingToken != address(0), 'StakingRewardsFactory::notifyRewardAmount: not deployed');\n\n\n\n        if (_rewardAmount > 0) {\n\n            require(\n\n                IERC20(rewardsToken).transfer(_stakingToken, _rewardAmount),\n\n                'StakingRewardsFactory::notifyRewardAmount: transfer failed'\n\n            );\n\n            StakingRewards(_stakingToken).notifyRewardAmount(_rewardAmount);\n\n        }\n",
                    "message": "Function 'StakingRewardsFactory._notifyRewardAmount' (StakingRewardsFactory.sol#814-824) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 814,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _notifyRewardAmount(address _stakingToken,uint _rewardAmount) private {\n",
                    "message": "Parameter '_stakingToken' of StakingRewardsFactory._notifyRewardAmount (StakingRewardsFactory.sol#814) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 814,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _notifyRewardAmount(address _stakingToken,uint _rewardAmount) private {\n",
                    "message": "Parameter '_rewardAmount' of StakingRewardsFactory._notifyRewardAmount (StakingRewardsFactory.sol#814) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 826,
                    "vulnerability_to_line": 833,
                    "vulnerability_code": "    function _reserveRewards(address _account,uint _rawRewardsAmount) private {\n\n        require(_account != address(0), 'StakingRewardsFactory::_reserveRewards: not deployed');\n\n\n\n        require(\n\n            IERC20(rewardsToken).transfer(_account, _rawRewardsAmount),\n\n            'StakingRewardsFactory::_reserveRewards: transfer failed'\n\n        );\n",
                    "message": "Function 'StakingRewardsFactory._reserveRewards' (StakingRewardsFactory.sol#826-833) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 826,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _reserveRewards(address _account,uint _rawRewardsAmount) private {\n",
                    "message": "Parameter '_account' of StakingRewardsFactory._reserveRewards (StakingRewardsFactory.sol#826) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 826,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _reserveRewards(address _account,uint _rawRewardsAmount) private {\n",
                    "message": "Parameter '_rawRewardsAmount' of StakingRewardsFactory._reserveRewards (StakingRewardsFactory.sol#826) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 835,
                    "vulnerability_to_line": 839,
                    "vulnerability_code": "    function _mint(uint _mintAmount) private {\n\n        require(_mintAmount > 0, 'StakingRewardsFactory::_mint: mintAmount is zero');\n\n\n\n        IMinterV2ERC20(rewardsToken).mint(address(this), _mintAmount);\n",
                    "message": "Function 'StakingRewardsFactory._mint' (StakingRewardsFactory.sol#835-839) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 835,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _mint(uint _mintAmount) private {\n",
                    "message": "Parameter '_mintAmount' of StakingRewardsFactory._mint (StakingRewardsFactory.sol#835) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 841,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTimeLock(address _timelock) public {\n",
                    "message": "Parameter '_timelock' of StakingRewardsFactory.setTimeLock (StakingRewardsFactory.sol#841) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 722,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _rewardRates.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 722,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _rewardRates.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < stakingTokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 841,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTimeLock(address _timelock) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private _owner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _guardCounter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 530,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 514,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 383,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
                    "message": null
                }
            ]
        }
    },
    "bt-finance-6300bc1271b73a1755fae02594d25fdf6fa39a9c/contracts/stake/Bt.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public totalSupply = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address minter_) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        minter = minter_;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit MinterChanged(address(0), minter);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            Checkpoint memory cp = checkpoints[account][center];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == minter, \"BT::setMinter: only the minter can change the minter address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == minter, \"BT::mint: only the minter can mint\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dst != address(0), \"BT::mint: cannot transfer to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(maxTotalSupply >= SafeMath.add(totalSupply, amount), \"BT::mint: exceeded max totalSupply\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(signatory != address(0), \"BT::permit: invalid signature\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(signatory == owner, \"BT::permit: unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now <= deadline, \"BT::permit: signature expired\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(signatory != address(0), \"BT::delegateBySig: invalid signature\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(nonce == nonces[signatory]++, \"BT::delegateBySig: invalid nonce\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now <= expiry, \"BT::delegateBySig: signature expired\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(blockNumber < block.number, \"BT::getPriorVotes: not yet determined\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(src != address(0), \"BT::_transferTokens: cannot transfer from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dst != address(0), \"BT::_transferTokens: cannot transfer to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (spender != src && spenderAllowance != uint96(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint96 newAllowance = sub96(spenderAllowance, amount, \"BT::transferFrom: transfer amount exceeds spender allowance\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            allowances[src][spender] = newAllowance;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            emit Approval(src, spender, newAllowance);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 511,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (srcRep != dstRep && amount > 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (srcRep != address(0)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 513,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint32 srcRepNum = numCheckpoints[srcRep];\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 514,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint96 srcRepNew = sub96(srcRepOld, amount, \"BT::_moveVotes: vote amount underflows\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 516,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 519,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (dstRep != address(0)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                uint32 dstRepNum = numCheckpoints[dstRep];\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            numCheckpoints[delegatee] = nCheckpoints + 1;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 536,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(nonce == nonces[signatory]++, \"BT::delegateBySig: invalid nonce\");\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == minter, \"BT::setMinter: only the minter can change the minter address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == minter, \"BT::mint: only the minter can mint\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dst != address(0), \"BT::mint: cannot transfer to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(maxTotalSupply >= SafeMath.add(totalSupply, amount), \"BT::mint: exceeded max totalSupply\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(signatory != address(0), \"BT::delegateBySig: invalid signature\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now <= expiry, \"BT::delegateBySig: signature expired\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(blockNumber < block.number, \"BT::getPriorVotes: not yet determined\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(src != address(0), \"BT::_transferTokens: cannot transfer from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dst != address(0), \"BT::_transferTokens: cannot transfer to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": 566,
                    "vulnerability_code": "    function getChainId() internal pure returns (uint) {\n\n        uint256 chainId;\n\n        assembly { chainId := chainid() }\n\n        return chainId;\n",
                    "message": "BT.getChainId (Bt.sol#562-566) is declared view but contains assembly code\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": 539,
                    "vulnerability_code": "    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\n\n        uint32 blockNumber = safe32(block.number, \"BT::_writeCheckpoint: block number exceeds 32 bits\");\n\n\n\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n\n        } else {\n\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n\n        }\n\n\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n",
                    "message": "BT._writeCheckpoint (Bt.sol#528-539) uses a dangerous strict equality:\n\t- nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": 566,
                    "vulnerability_code": "    function getChainId() internal pure returns (uint) {\n\n        uint256 chainId;\n\n        assembly { chainId := chainid() }\n\n        return chainId;\n",
                    "message": "BT.getChainId uses assembly (Bt.sol#562-566)\n\t- Bt.sol#564\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": "Different versions of Solidity is used in Bt.sol:\n\t- Version used: ['ABIEncoderV2', '^0.5.16']\n\t- Bt.sol#7 declares pragma solidity^0.5.16\n\t- Bt.sol#8 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": 416,
                    "vulnerability_code": "    function delegate(address delegatee) public {\n\n        return _delegate(msg.sender, delegatee);\n",
                    "message": "BT.delegate (Bt.sol#414-416) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 436,
                    "vulnerability_code": "    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\n\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n\n        address signatory = ecrecover(digest, v, r, s);\n\n        require(signatory != address(0), \"BT::delegateBySig: invalid signature\");\n\n        require(nonce == nonces[signatory]++, \"BT::delegateBySig: invalid nonce\");\n\n        require(now <= expiry, \"BT::delegateBySig: signature expired\");\n\n        return _delegate(signatory, delegatee);\n",
                    "message": "BT.delegateBySig (Bt.sol#427-436) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": 487,
                    "vulnerability_code": "    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\n\n        require(blockNumber < block.number, \"BT::getPriorVotes: not yet determined\");\n\n\n\n        uint32 nCheckpoints = numCheckpoints[account];\n\n        if (nCheckpoints == 0) {\n\n            return 0;\n\n        }\n\n\n\n        // First check most recent balance\n\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n\n            return checkpoints[account][nCheckpoints - 1].votes;\n\n        }\n\n\n\n        // Next check implicit zero balance\n\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n\n            return 0;\n\n        }\n\n\n\n        uint32 lower = 0;\n\n        uint32 upper = nCheckpoints - 1;\n\n        while (upper > lower) {\n\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n\n            Checkpoint memory cp = checkpoints[account][center];\n\n            if (cp.fromBlock == blockNumber) {\n\n                return cp.votes;\n\n            } else if (cp.fromBlock < blockNumber) {\n\n                lower = center;\n\n            } else {\n\n                upper = center - 1;\n\n            }\n\n        }\n\n        return checkpoints[account][lower].votes;\n",
                    "message": "BT.getPriorVotes (Bt.sol#455-487) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": "Detected issues with version pragma in Bt.sol:\n\t- pragma solidity^0.5.16 (Bt.sol#7): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": 497,
                    "vulnerability_code": "    function _delegate(address delegator, address delegatee) internal {\n\n        address currentDelegate = delegates[delegator];\n\n        uint96 delegatorBalance = balances[delegator];\n\n        delegates[delegator] = delegatee;\n\n\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n",
                    "message": "Function 'BT._delegate' (Bt.sol#489-497) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 499,
                    "vulnerability_to_line": 508,
                    "vulnerability_code": "    function _transferTokens(address src, address dst, uint96 amount) internal {\n\n        require(src != address(0), \"BT::_transferTokens: cannot transfer from the zero address\");\n\n        require(dst != address(0), \"BT::_transferTokens: cannot transfer to the zero address\");\n\n\n\n        balances[src] = sub96(balances[src], amount, \"BT::_transferTokens: transfer amount exceeds balance\");\n\n        balances[dst] = add96(balances[dst], amount, \"BT::_transferTokens: transfer amount overflows\");\n\n        emit Transfer(src, dst, amount);\n\n\n\n        _moveDelegates(delegates[src], delegates[dst], amount);\n",
                    "message": "Function 'BT._transferTokens' (Bt.sol#499-508) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 510,
                    "vulnerability_to_line": 526,
                    "vulnerability_code": "    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\n\n        if (srcRep != dstRep && amount > 0) {\n\n            if (srcRep != address(0)) {\n\n                uint32 srcRepNum = numCheckpoints[srcRep];\n\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n\n                uint96 srcRepNew = sub96(srcRepOld, amount, \"BT::_moveVotes: vote amount underflows\");\n\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n\n            }\n\n\n\n            if (dstRep != address(0)) {\n\n                uint32 dstRepNum = numCheckpoints[dstRep];\n\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n\n                uint96 dstRepNew = add96(dstRepOld, amount, \"BT::_moveVotes: vote amount overflows\");\n\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n\n            }\n\n        }\n",
                    "message": "Function 'BT._moveDelegates' (Bt.sol#510-526) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": 539,
                    "vulnerability_code": "    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\n\n        uint32 blockNumber = safe32(block.number, \"BT::_writeCheckpoint: block number exceeds 32 bits\");\n\n\n\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n\n        } else {\n\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n\n        }\n\n\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n",
                    "message": "Function 'BT._writeCheckpoint' (Bt.sol#528-539) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public constant maxTotalSupply = 270027e18;\n",
                    "message": "Constant 'BT.maxTotalSupply' (Bt.sol#212) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _moveDelegates(address(0), delegates[dst], amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (upper > lower) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinter(address minter_) external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getChainId() internal pure returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { chainId := chainid() }\n",
                    "message": null
                }
            ]
        }
    },
    "bt-finance-6300bc1271b73a1755fae02594d25fdf6fa39a9c/contracts/strategies/StrategyPickleUSDC.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public pledgePickles = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        doApprove(); \n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tswap2BTRouting = [pickletoken,weth,bt];\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        swap2TokenRouting = [pickletoken,weth,want]; \n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");                     \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == controller, \"!controller\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");                      \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 420,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "curve-readonly-reentrancy",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tuint256 _crvpla = _amount.mul(1e18).mul(1e12).div((ICurveFi(curvefi).get_virtual_price()));\n",
                    "message": "ICurveFi(curvefi).get_virtual_price() call on a Curve pool is not protected from the read- only reentrancy."
                },
                {
                    "name": "curve-readonly-reentrancy",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t    uint256 price = ICurveFi(curvefi).get_virtual_price().div(1e12);\n",
                    "message": "ICurveFi(curvefi).get_virtual_price() call on a Curve pool is not protected from the read- only reentrancy."
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2token, 0, swap2TokenRouting, address(this), now.add(1800));\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_63"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract (StrategyPickleUSDC.sol#70-76) is declared view but contains assembly code\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": 383,
                    "vulnerability_code": "    function balanceOfPickle() public view returns (uint256) \n\n\t{\n\n\t\tuint256 pickletokenNum = pERC20(PICKLE).pendingPickle(pickleindex,address(this)).add(IERC20(pickletoken).balanceOf(address(this))).mul(80).div(100);\n\n\t\tif (pickletokenNum==0)\n\n\t\t{\n\n\t\t    return 0;\n\n\t\t}\n\n\t\tuint[] memory amounts = UniswapRouter(unirouter).getAmountsOut(pickletokenNum,swap2TokenRouting);\n\n\t\treturn amounts[amounts.length-1];\n",
                    "message": "StrategyUSDCPickele.balanceOfPickle (StrategyPickleUSDC.sol#374-383) uses a dangerous strict equality:\n\t- pickletokenNum == 0\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 322,
                    "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal returns(uint256){\n\n        uint256 crvBefore = IERC20(crvPla).balanceOf(address(this));\n\n\t\tuint256 _crvpla = _amount.mul(1e18).mul(1e12).div((ICurveFi(curvefi).get_virtual_price()));\n\n\t\tif (crvBefore < _crvpla)\n\n\t\t{\n\n\t\t    _crvpla = _crvpla.sub(crvBefore);\n\n            uint256 _p3crv = _crvpla.mul(1e18).div(yERC20(pickleJar).getRatio());\n\n            uint _before = IERC20(pickleJar).balanceOf(address(this));\n\n            if (_before < _p3crv) {\n\n                _p3crv = _p3crv.sub(_before);\n\n                //require(_p3crv <= pledgePickles, \"Invalid amount!\");\n\n\t\t\t\tif (_p3crv > pledgePickles)\n\n\t\t\t\t{\n\n\t\t\t\t\t_p3crv = pledgePickles;\n\n\t\t\t\t}\t\t\t\t\n\n                pERC20(PICKLE).withdraw(pickleindex,_p3crv);\n\n                pledgePickles = pledgePickles.sub(_p3crv);\n\n            }\n\n            uint p3CRV = IERC20(pickleJar).balanceOf(address(this));\n\n\t    \tyERC20(pickleJar).withdraw(p3CRV);\n\n\t\t}\n\n\n\n        uint crv = IERC20(crvPla).balanceOf(address(this));\n\n\t\t\n\n        return withdrawUnderlying(crv);\n",
                    "message": "Reentrancy in StrategyUSDCPickele._withdrawSome (StrategyPickleUSDC.sol#297-322):\n\tExternal calls:\n\t- crvBefore = IERC20(crvPla).balanceOf(address(this)) (StrategyPickleUSDC.sol#298)\n\t- _crvpla = _amount.mul(1e18).mul(1e12).div((ICurveFi(curvefi).get_virtual_price())) (StrategyPickleUSDC.sol#299)\n\t- _p3crv = _crvpla.mul(1e18).div(yERC20(pickleJar).getRatio()) (StrategyPickleUSDC.sol#303)\n\t- _before = IERC20(pickleJar).balanceOf(address(this)) (StrategyPickleUSDC.sol#304)\n\t- pERC20(PICKLE).withdraw(pickleindex,_p3crv) (StrategyPickleUSDC.sol#312)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleUSDC.sol#313)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": 399,
                    "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();    \n",
                    "message": "Reentrancy in StrategyUSDCPickele.harvest (StrategyPickleUSDC.sol#394-399):\n\tExternal calls:\n\t- pERC20(PICKLE).withdraw(pickleindex,pledgePickles) (StrategyPickleUSDC.sol#396)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleUSDC.sol#397)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": 399,
                    "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();    \n",
                    "message": "Reentrancy in StrategyUSDCPickele.harvest (StrategyPickleUSDC.sol#394-399):\n\tExternal calls:\n\t- pERC20(PICKLE).withdraw(pickleindex,pledgePickles) (StrategyPickleUSDC.sol#396)\n\t- redelivery() (StrategyPickleUSDC.sol#398)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleUSDC.sol#398)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": 295,
                    "vulnerability_code": "\tfunction withdrawAll() external returns (uint balance){\n\n\t\tuint amount = balanceOf();\n\n\t\tbalance = _withdraw(amount);\n\n        \n\n\t\taddress _vault = Controller(controller).vaults(address(want));\n\n        require(_vault != address(0), \"!vault\");                      \n\n        IERC20(want).safeTransfer(_vault, balance);\n",
                    "message": "Reentrancy in StrategyUSDCPickele.withdrawAll (StrategyPickleUSDC.sol#288-295):\n\tExternal calls:\n\t- amount = balanceOf() (StrategyPickleUSDC.sol#289)\n\t- balance = _withdraw(amount) (StrategyPickleUSDC.sol#290)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleUSDC.sol#290)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": 235,
                    "vulnerability_code": "\tfunction doApprove () public{\n\n        IERC20(pickletoken).approve(unirouter, 0);\n\n        IERC20(pickletoken).approve(unirouter, uint(-1));\n",
                    "message": "StrategyUSDCPickele.doApprove (StrategyPickleUSDC.sol#232-235) does not use the value returned by external calls:\n\t-IERC20(pickletoken).approve(unirouter,0) (StrategyPickleUSDC.sol#233)\n\t-IERC20(pickletoken).approve(unirouter,uint256(- 1)) (StrategyPickleUSDC.sol#234)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": 411,
                    "vulnerability_code": "    function redelivery() internal {\n\n        uint256 reward = IERC20(pickletoken).balanceOf(address(this));\n\n        if (reward > redeliverynum)\n\n        {\n\n            uint256 _2token = reward.mul(80).div(100); //80%\n\n\t\t    uint256 _2bt = reward.mul(20).div(100);  //20%\n\n\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2token, 0, swap2TokenRouting, address(this), now.add(1800));\n\n\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));\n\n\t\t}\n\n        deposit();\n",
                    "message": "StrategyUSDCPickele.redelivery (StrategyPickleUSDC.sol#401-411) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_2token,0,swap2TokenRouting,address(this),now.add(1800)) (StrategyPickleUSDC.sol#407)\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_2bt,0,swap2BTRouting,Controller(controller).rewards(),now.add(1800)) (StrategyPickleUSDC.sol#408)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "    constructor() public {\n\n        governance = tx.origin;\n\n        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n\n        doApprove(); \n\n\t\tswap2BTRouting = [pickletoken,weth,bt];\n\n        swap2TokenRouting = [pickletoken,weth,want]; \n",
                    "message": "Reentrancy in StrategyUSDCPickele.constructor (StrategyPickleUSDC.sol#224-230):\n\tExternal calls:\n\t- doApprove() (StrategyPickleUSDC.sol#227)\n\tState variables written after the call(s):\n\t- swap2BTRouting (StrategyPickleUSDC.sol#228)\n\t- swap2TokenRouting (StrategyPickleUSDC.sol#229)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": 261,
                    "vulnerability_code": "    function deposit() public { \n\n\t\tuint _usdc = IERC20(want).balanceOf(address(this));\t\t\t\n\n        if (_usdc > 0) {\n\n            IERC20(want).safeApprove(curvefi, 0);\t\t\t\t\n\n            IERC20(want).safeApprove(curvefi, _usdc);\t\t\t\t\n\n            ICurveFi(curvefi).add_liquidity([0,_usdc,0],0);\t\t\n\n        }\n\n\t\t\n\n\t\tuint256 _crvpla = IERC20(crvPla).balanceOf(address(this));\n\n\t\tif (_crvpla > 0)\n\n\t\t{\n\n\t\t    IERC20(crvPla).safeApprove(pickleJar, 0);\n\n            IERC20(crvPla).safeApprove(pickleJar, _crvpla);\n\n\t\t    yERC20(pickleJar).deposit(_crvpla);\n\n\t\t}\n\n\t\t\n\n\t\tuint _p3crv= IERC20(pickleJar).balanceOf(address(this));\n\n\t\tif (_p3crv > 0)\n\n\t\t{\n\n\t        IERC20(pickleJar).safeApprove(PICKLE, 0);\n\n            IERC20(pickleJar).safeApprove(PICKLE, _p3crv);\n\n\t    \tpERC20(PICKLE).deposit(pickleindex,_p3crv);\n\n    \t\tpledgePickles = pledgePickles.add(_p3crv);\n\n\t\t}\n",
                    "message": "Reentrancy in StrategyUSDCPickele.deposit (StrategyPickleUSDC.sol#237-261):\n\tExternal calls:\n\t- _usdc = IERC20(want).balanceOf(address(this)) (StrategyPickleUSDC.sol#238)\n\t- ICurveFi(curvefi).add_liquidity((0,_usdc,0),0) (StrategyPickleUSDC.sol#242)\n\t- _crvpla = IERC20(crvPla).balanceOf(address(this)) (StrategyPickleUSDC.sol#245)\n\t- yERC20(pickleJar).deposit(_crvpla) (StrategyPickleUSDC.sol#250)\n\t- _p3crv = IERC20(pickleJar).balanceOf(address(this)) (StrategyPickleUSDC.sol#253)\n\t- pERC20(PICKLE).deposit(pickleindex,_p3crv) (StrategyPickleUSDC.sol#258)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleUSDC.sol#259)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract uses assembly (StrategyPickleUSDC.sol#70-76)\n\t- StrategyPickleUSDC.sol#74\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 pickleindex = 14;\n",
                    "message": "StrategyUSDCPickele.pickleindex should be constant (StrategyPickleUSDC.sol#197)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": 383,
                    "vulnerability_code": "    function balanceOfPickle() public view returns (uint256) \n\n\t{\n\n\t\tuint256 pickletokenNum = pERC20(PICKLE).pendingPickle(pickleindex,address(this)).add(IERC20(pickletoken).balanceOf(address(this))).mul(80).div(100);\n\n\t\tif (pickletokenNum==0)\n\n\t\t{\n\n\t\t    return 0;\n\n\t\t}\n\n\t\tuint[] memory amounts = UniswapRouter(unirouter).getAmountsOut(pickletokenNum,swap2TokenRouting);\n\n\t\treturn amounts[amounts.length-1];\n",
                    "message": "StrategyUSDCPickele.balanceOfPickle (StrategyPickleUSDC.sol#374-383) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": 387,
                    "vulnerability_code": "    function getPending() public view returns (uint256) {\n\n        return pERC20(PICKLE).pendingPickle(pickleindex,address(this));\n",
                    "message": "StrategyUSDCPickele.getPending (StrategyPickleUSDC.sol#385-387) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": 392,
                    "vulnerability_code": "\tfunction getPickle() public view returns(uint256)\n\n\t{\n\n\t\treturn IERC20(pickletoken).balanceOf(address(this));\n",
                    "message": "StrategyUSDCPickele.getPickle (StrategyPickleUSDC.sol#389-392) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": 399,
                    "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();    \n",
                    "message": "StrategyUSDCPickele.harvest (StrategyPickleUSDC.sol#394-399) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": 417,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n\n    {\n\n        require(msg.sender == governance, \"!governance\");\n\n        redeliverynum = value;\n",
                    "message": "StrategyUSDCPickele.setredeliverynum (StrategyPickleUSDC.sol#413-417) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 422,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
                    "message": "StrategyUSDCPickele.setGovernance (StrategyPickleUSDC.sol#419-422) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": "Detected issues with version pragma in StrategyPickleUSDC.sol:\n\t- pragma solidity^0.5.15 (StrategyPickleUSDC.sol#9): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Low level call in Address.sendValue (StrategyPickleUSDC.sol#80-86):\n\t-(success) = recipient.call.value(amount)() StrategyPickleUSDC.sol#84\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
                    "message": "Low level call in SafeERC20.callOptionalReturn (StrategyPickleUSDC.sol#107-118):\n\t-(success,returndata) = address(token).call(data) StrategyPickleUSDC.sol#111\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function vaults(address) external view returns (address);\n",
                    "message": "Parameter '' of Controller.vaults (StrategyPickleUSDC.sol#122) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.deposit (StrategyPickleUSDC.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.withdraw (StrategyPickleUSDC.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.balanceOf (StrategyPickleUSDC.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Function 'CurveDeposit.claimable_tokens' (StrategyPickleUSDC.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.claimable_tokens (StrategyPickleUSDC.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address) external;\n",
                    "message": "Parameter '' of CurveMinter.mint (StrategyPickleUSDC.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 154,
                    "vulnerability_code": "interface yERC20 {\n\n  function deposit(uint256 _amount) external;\n\n  function withdraw(uint256 _amount) external;\n\n  function getRatio() external view returns (uint);\n",
                    "message": "Contract 'yERC20' (StrategyPickleUSDC.sol#150-154) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": 163,
                    "vulnerability_code": "interface pERC20 {\n\n  function deposit(uint256 ,uint256 ) external;\n\n  function withdraw(uint256 ,uint256 ) external;\n\n  function balanceOf(uint256 ) external view returns(uint);\n\n  function balanceOf(uint256 ,address) external view returns(uint);\n\n  function getRatio() external view returns (uint);\n\n  function pendingPickle(uint256,address) external view returns(uint);\n",
                    "message": "Contract 'pERC20' (StrategyPickleUSDC.sol#156-163) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function deposit(uint256 ,uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.deposit (StrategyPickleUSDC.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function deposit(uint256 ,uint256 ) external;\n",
                    "message": "Parameter '_scope_0' of pERC20.deposit (StrategyPickleUSDC.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdraw(uint256 ,uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.withdraw (StrategyPickleUSDC.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdraw(uint256 ,uint256 ) external;\n",
                    "message": "Parameter '_scope_0' of pERC20.withdraw (StrategyPickleUSDC.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(uint256 ) external view returns(uint);\n",
                    "message": "Parameter '' of pERC20.balanceOf (StrategyPickleUSDC.sol#159) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(uint256 ,address) external view returns(uint);\n",
                    "message": "Parameter '' of pERC20.balanceOf (StrategyPickleUSDC.sol#160) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(uint256 ,address) external view returns(uint);\n",
                    "message": "Parameter '_scope_0' of pERC20.balanceOf (StrategyPickleUSDC.sol#160) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pendingPickle(uint256,address) external view returns(uint);\n",
                    "message": "Parameter '' of pERC20.pendingPickle (StrategyPickleUSDC.sol#162) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pendingPickle(uint256,address) external view returns(uint);\n",
                    "message": "Parameter '_scope_0' of pERC20.pendingPickle (StrategyPickleUSDC.sol#162) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function get_virtual_price() external view returns (uint);\n",
                    "message": "Function 'ICurveFi.get_virtual_price' (StrategyPickleUSDC.sol#167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": 171,
                    "vulnerability_code": "  function add_liquidity(\n\n    uint256[3] calldata amounts,\n\n    uint256 min_mint_amount\n",
                    "message": "Function 'ICurveFi.add_liquidity' (StrategyPickleUSDC.sol#168-171) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 min_mint_amount\n",
                    "message": "Parameter 'min_mint_amount' of ICurveFi.add_liquidity (StrategyPickleUSDC.sol#170) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "  function remove_liquidity(\n\n    uint256 _amount,\n\n    uint256[3] calldata amounts\n",
                    "message": "Function 'ICurveFi.remove_liquidity' (StrategyPickleUSDC.sol#172-175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\n",
                    "message": "Parameter '_from_amount' of ICurveFi.exchange (StrategyPickleUSDC.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\n",
                    "message": "Parameter '_min_to_amount' of ICurveFi.exchange (StrategyPickleUSDC.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction withdraw(uint _amount) external\n",
                    "message": "Parameter '_amount' of StrategyUSDCPickele.withdraw (StrategyPickleUSDC.sol#265) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 286,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n\n        require(msg.sender == controller, \"!controller\");\n\n\t\tuint amount = IERC20(want).balanceOf(address(this));\t\n\n\t\tif (amount < _amount) {\n\n\t\t\t_withdrawSome(_amount.sub(amount));\n\n\t\t\tamount = IERC20(want).balanceOf(address(this));\n\n\t\t}\t\n\n\t\treturn amount; \n",
                    "message": "Function 'StrategyUSDCPickele._withdraw' (StrategyPickleUSDC.sol#278-286) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n",
                    "message": "Parameter '_amount' of StrategyUSDCPickele._withdraw (StrategyPickleUSDC.sol#278) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 322,
                    "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal returns(uint256){\n\n        uint256 crvBefore = IERC20(crvPla).balanceOf(address(this));\n\n\t\tuint256 _crvpla = _amount.mul(1e18).mul(1e12).div((ICurveFi(curvefi).get_virtual_price()));\n\n\t\tif (crvBefore < _crvpla)\n\n\t\t{\n\n\t\t    _crvpla = _crvpla.sub(crvBefore);\n\n            uint256 _p3crv = _crvpla.mul(1e18).div(yERC20(pickleJar).getRatio());\n\n            uint _before = IERC20(pickleJar).balanceOf(address(this));\n\n            if (_before < _p3crv) {\n\n                _p3crv = _p3crv.sub(_before);\n\n                //require(_p3crv <= pledgePickles, \"Invalid amount!\");\n\n\t\t\t\tif (_p3crv > pledgePickles)\n\n\t\t\t\t{\n\n\t\t\t\t\t_p3crv = pledgePickles;\n\n\t\t\t\t}\t\t\t\t\n\n                pERC20(PICKLE).withdraw(pickleindex,_p3crv);\n\n                pledgePickles = pledgePickles.sub(_p3crv);\n\n            }\n\n            uint p3CRV = IERC20(pickleJar).balanceOf(address(this));\n\n\t    \tyERC20(pickleJar).withdraw(p3CRV);\n\n\t\t}\n\n\n\n        uint crv = IERC20(crvPla).balanceOf(address(this));\n\n\t\t\n\n        return withdrawUnderlying(crv);\n",
                    "message": "Function 'StrategyUSDCPickele._withdrawSome' (StrategyPickleUSDC.sol#297-322) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal returns(uint256){\n",
                    "message": "Parameter '_amount' of StrategyUSDCPickele._withdrawSome (StrategyPickleUSDC.sol#297) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction withdrawUnderlying(uint256 _amount) public returns (uint) {\n",
                    "message": "Parameter '_amount' of StrategyUSDCPickele.withdrawUnderlying (StrategyPickleUSDC.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": "Parameter '_governance' of StrategyUSDCPickele.setGovernance (StrategyPickleUSDC.sol#419) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": "Parameter '_controller' of StrategyUSDCPickele.setController (StrategyPickleUSDC.sol#424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
                    "message": "Constant 'StrategyUSDCPickele.unirouter' (StrategyPickleUSDC.sol#199) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": "Constant 'StrategyUSDCPickele.weth' (StrategyPickleUSDC.sol#200) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
                    "message": "Constant 'StrategyUSDCPickele.bt' (StrategyPickleUSDC.sol#201) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public ydai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n",
                    "message": "Constant 'StrategyUSDCPickele.ydai' (StrategyPickleUSDC.sol#203) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public yusdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n",
                    "message": "Constant 'StrategyUSDCPickele.yusdt' (StrategyPickleUSDC.sol#204) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);  //usdc\n",
                    "message": "Constant 'StrategyUSDCPickele.want' (StrategyPickleUSDC.sol#206) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public curvefi = address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\n",
                    "message": "Constant 'StrategyUSDCPickele.curvefi' (StrategyPickleUSDC.sol#207) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pickleJar = address(0x1BB74b5DdC1f4fC91D6f9E7906cf68bc93538e33);\n",
                    "message": "Constant 'StrategyUSDCPickele.pickleJar' (StrategyPickleUSDC.sol#208) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public crvPla = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\n",
                    "message": "Constant 'StrategyUSDCPickele.crvPla' (StrategyPickleUSDC.sol#211) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pickletoken = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\n",
                    "message": "Constant 'StrategyUSDCPickele.pickletoken' (StrategyPickleUSDC.sol#212) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public ydai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public yusdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);  //usdc\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public curvefi = address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pickleJar = address(0x1BB74b5DdC1f4fC91D6f9E7906cf68bc93538e33);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public PICKLE = address(0xbD17B1ce622d73bD438b9E658acA5996dc394b0d);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public crvPla = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pickletoken = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 pickleindex = 14;\n",
                    "message": null
                }
            ]
        }
    },
    "bt-finance-6300bc1271b73a1755fae02594d25fdf6fa39a9c/contracts/strategies/StrategyPickleWBTC.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public pledgePickles = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        doApprove(); \n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tswap2BTRouting = [pickletoken,weth,bt];\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        swap2TokenRouting = [pickletoken,weth,want]; \n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");                     \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == controller, \"!controller\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");                      \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "curve-readonly-reentrancy",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tuint256 _crvpla = _amount.mul(1e18).div((ICurveFi(curvefi).get_virtual_price().div(1e10)));\n",
                    "message": "ICurveFi(curvefi).get_virtual_price() call on a Curve pool is not protected from the read- only reentrancy."
                },
                {
                    "name": "curve-readonly-reentrancy",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t    uint256 price = ICurveFi(curvefi).get_virtual_price().div(1e10);\n",
                    "message": "ICurveFi(curvefi).get_virtual_price() call on a Curve pool is not protected from the read- only reentrancy."
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2token, 0, swap2TokenRouting, address(this), now.add(1800));\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_62"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract (StrategyPickleWBTC.sol#70-76) is declared view but contains assembly code\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": 373,
                    "vulnerability_code": "\tfunction balanceOfPickle() public view returns (uint256) \n\n\t{\n\n\t\tuint256 pickletokenNum = pERC20(PICKLE).pendingPickle(pickleindex,address(this)).add(IERC20(pickletoken).balanceOf(address(this))).mul(80).div(100);\n\n\t\tif (pickletokenNum==0)\n\n\t\t{\n\n\t\t    return 0;\n\n\t\t}\n\n\t\tuint[] memory amounts = UniswapRouter(unirouter).getAmountsOut(pickletokenNum,swap2TokenRouting);\n\n\t\treturn amounts[amounts.length-1];\n",
                    "message": "StrategyWBTCPickle.balanceOfPickle (StrategyPickleWBTC.sol#364-373) uses a dangerous strict equality:\n\t- pickletokenNum == 0\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": 323,
                    "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal returns(uint256){\n\n        uint256 crvBefore = IERC20(crvPla).balanceOf(address(this));\n\n\t\tuint256 _crvpla = _amount.mul(1e18).div((ICurveFi(curvefi).get_virtual_price().div(1e10)));\n\n\t\tif (crvBefore < _crvpla)\n\n\t\t{\n\n\t\t    _crvpla = _crvpla.sub(crvBefore);\n\n            uint256 _p3crv = _crvpla.mul(1e18).div(yERC20(pickleJar).getRatio());\n\n            uint _before = IERC20(pickleJar).balanceOf(address(this));\n\n            if (_before < _p3crv) {\n\n                _p3crv = _p3crv.sub(_before);\n\n                //require(_p3crv <= pledgePickles, \"Invalid amount!\");\n\n\t\t\t\tif (_p3crv > pledgePickles)\n\n\t\t\t\t{\n\n\t\t\t\t\t_p3crv = pledgePickles;\n\n\t\t\t\t}\n\n                pERC20(PICKLE).withdraw(pickleindex,_p3crv);\n\n                pledgePickles = pledgePickles.sub(_p3crv);\n\n            }\n\n            uint p3CRV = IERC20(pickleJar).balanceOf(address(this));\n\n\t    \tyERC20(pickleJar).withdraw(p3CRV);\n\n\t\t}\n\n\n\n        uint crv = IERC20(crvPla).balanceOf(address(this));\n\n\t\t\n\n        return withdrawUnderlying(crv);\n",
                    "message": "Reentrancy in StrategyWBTCPickle._withdrawSome (StrategyPickleWBTC.sol#298-323):\n\tExternal calls:\n\t- crvBefore = IERC20(crvPla).balanceOf(address(this)) (StrategyPickleWBTC.sol#299)\n\t- _crvpla = _amount.mul(1e18).div((ICurveFi(curvefi).get_virtual_price().div(1e10))) (StrategyPickleWBTC.sol#300)\n\t- _p3crv = _crvpla.mul(1e18).div(yERC20(pickleJar).getRatio()) (StrategyPickleWBTC.sol#304)\n\t- _before = IERC20(pickleJar).balanceOf(address(this)) (StrategyPickleWBTC.sol#305)\n\t- pERC20(PICKLE).withdraw(pickleindex,_p3crv) (StrategyPickleWBTC.sol#313)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleWBTC.sol#314)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": 393,
                    "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();    \n",
                    "message": "Reentrancy in StrategyWBTCPickle.harvest (StrategyPickleWBTC.sol#388-393):\n\tExternal calls:\n\t- pERC20(PICKLE).withdraw(pickleindex,pledgePickles) (StrategyPickleWBTC.sol#390)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleWBTC.sol#391)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": 393,
                    "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();    \n",
                    "message": "Reentrancy in StrategyWBTCPickle.harvest (StrategyPickleWBTC.sol#388-393):\n\tExternal calls:\n\t- pERC20(PICKLE).withdraw(pickleindex,pledgePickles) (StrategyPickleWBTC.sol#390)\n\t- redelivery() (StrategyPickleWBTC.sol#392)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleWBTC.sol#392)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": 295,
                    "vulnerability_code": "\tfunction withdrawAll() external  returns (uint balance)  {\n\n\t\tuint amount = balanceOf();\n\n\t\tbalance = _withdraw(amount);\n\n\t\t\n\n\t\taddress _vault = Controller(controller).vaults(address(want));\n\n        require(_vault != address(0), \"!vault\");                      \n\n        IERC20(want).safeTransfer(_vault, balance);\n",
                    "message": "Reentrancy in StrategyWBTCPickle.withdrawAll (StrategyPickleWBTC.sol#288-295):\n\tExternal calls:\n\t- amount = balanceOf() (StrategyPickleWBTC.sol#289)\n\t- balance = _withdraw(amount) (StrategyPickleWBTC.sol#290)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleWBTC.sol#290)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": 235,
                    "vulnerability_code": "\tfunction doApprove () public{\n\n        IERC20(pickletoken).approve(unirouter, 0);\n\n        IERC20(pickletoken).approve(unirouter, uint(-1));\n",
                    "message": "StrategyWBTCPickle.doApprove (StrategyPickleWBTC.sol#232-235) does not use the value returned by external calls:\n\t-IERC20(pickletoken).approve(unirouter,0) (StrategyPickleWBTC.sol#233)\n\t-IERC20(pickletoken).approve(unirouter,uint256(- 1)) (StrategyPickleWBTC.sol#234)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": 405,
                    "vulnerability_code": "    function redelivery() internal {\n\n        uint256 reward = IERC20(pickletoken).balanceOf(address(this));\n\n        if (reward > redeliverynum)\n\n        {\n\n            uint256 _2token = reward.mul(80).div(100); //80%\n\n\t\t    uint256 _2bt = reward.mul(20).div(100);  //20%\n\n\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2token, 0, swap2TokenRouting, address(this), now.add(1800));\n\n\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));\n\n\t\t}\n\n        deposit();\n",
                    "message": "StrategyWBTCPickle.redelivery (StrategyPickleWBTC.sol#395-405) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_2token,0,swap2TokenRouting,address(this),now.add(1800)) (StrategyPickleWBTC.sol#401)\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_2bt,0,swap2BTRouting,Controller(controller).rewards(),now.add(1800)) (StrategyPickleWBTC.sol#402)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "    constructor() public {\n\n        governance = tx.origin;\n\n        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n\n        doApprove(); \n\n\t\tswap2BTRouting = [pickletoken,weth,bt];\n\n        swap2TokenRouting = [pickletoken,weth,want]; \n",
                    "message": "Reentrancy in StrategyWBTCPickle.constructor (StrategyPickleWBTC.sol#224-230):\n\tExternal calls:\n\t- doApprove() (StrategyPickleWBTC.sol#227)\n\tState variables written after the call(s):\n\t- swap2BTRouting (StrategyPickleWBTC.sol#228)\n\t- swap2TokenRouting (StrategyPickleWBTC.sol#229)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": 261,
                    "vulnerability_code": "    function deposit() public { \n\n\t\tuint _wbtc = IERC20(want).balanceOf(address(this));\t\t\t\n\n        if (_wbtc > 0) {\n\n            IERC20(want).safeApprove(curvefi, 0);\t\t\t\t\n\n            IERC20(want).safeApprove(curvefi, _wbtc);\t\t\t\t\n\n            ICurveFi(curvefi).add_liquidity([0,_wbtc],0);\t\t\n\n        }\n\n\t\t\n\n\t\tuint256 _crvpla = IERC20(crvPla).balanceOf(address(this));\n\n\t\tif (_crvpla > 0)\n\n\t\t{\n\n\t\t    IERC20(crvPla).safeApprove(pickleJar, 0);\n\n            IERC20(crvPla).safeApprove(pickleJar, _crvpla);\n\n\t\t    yERC20(pickleJar).deposit(_crvpla);\n\n\t\t}\n\n\t\t\n\n\t\tuint _p3crv = IERC20(pickleJar).balanceOf(address(this));\n\n\t\tif (_p3crv > 0)\n\n\t\t{\n\n\t        IERC20(pickleJar).safeApprove(PICKLE, 0);\n\n            IERC20(pickleJar).safeApprove(PICKLE, _p3crv);\n\n\t    \tpERC20(PICKLE).deposit(pickleindex,_p3crv);\n\n    \t\tpledgePickles = pledgePickles.add(_p3crv);\n\n\t\t}\n",
                    "message": "Reentrancy in StrategyWBTCPickle.deposit (StrategyPickleWBTC.sol#237-261):\n\tExternal calls:\n\t- _wbtc = IERC20(want).balanceOf(address(this)) (StrategyPickleWBTC.sol#238)\n\t- ICurveFi(curvefi).add_liquidity((0,_wbtc),0) (StrategyPickleWBTC.sol#242)\n\t- _crvpla = IERC20(crvPla).balanceOf(address(this)) (StrategyPickleWBTC.sol#245)\n\t- yERC20(pickleJar).deposit(_crvpla) (StrategyPickleWBTC.sol#250)\n\t- _p3crv = IERC20(pickleJar).balanceOf(address(this)) (StrategyPickleWBTC.sol#253)\n\t- pERC20(PICKLE).deposit(pickleindex,_p3crv) (StrategyPickleWBTC.sol#258)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleWBTC.sol#259)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract uses assembly (StrategyPickleWBTC.sol#70-76)\n\t- StrategyPickleWBTC.sol#74\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 pickleindex = 13;\n",
                    "message": "StrategyWBTCPickle.pickleindex should be constant (StrategyPickleWBTC.sol#198)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": 373,
                    "vulnerability_code": "\tfunction balanceOfPickle() public view returns (uint256) \n\n\t{\n\n\t\tuint256 pickletokenNum = pERC20(PICKLE).pendingPickle(pickleindex,address(this)).add(IERC20(pickletoken).balanceOf(address(this))).mul(80).div(100);\n\n\t\tif (pickletokenNum==0)\n\n\t\t{\n\n\t\t    return 0;\n\n\t\t}\n\n\t\tuint[] memory amounts = UniswapRouter(unirouter).getAmountsOut(pickletokenNum,swap2TokenRouting);\n\n\t\treturn amounts[amounts.length-1];\n",
                    "message": "StrategyWBTCPickle.balanceOfPickle (StrategyPickleWBTC.sol#364-373) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "    function getPending() public view returns (uint256) {\n\n        return pERC20(PICKLE).pendingPickle(pickleindex,address(this));\n",
                    "message": "StrategyWBTCPickle.getPending (StrategyPickleWBTC.sol#379-381) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 383,
                    "vulnerability_to_line": 386,
                    "vulnerability_code": "\tfunction getPickle() public view returns(uint256)\n\n\t{\n\n\t\treturn IERC20(pickletoken).balanceOf(address(this));\n",
                    "message": "StrategyWBTCPickle.getPickle (StrategyPickleWBTC.sol#383-386) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": 393,
                    "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();    \n",
                    "message": "StrategyWBTCPickle.harvest (StrategyPickleWBTC.sol#388-393) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": 411,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n\n    {\n\n        require(msg.sender == governance, \"!governance\");\n\n        redeliverynum = value;\n",
                    "message": "StrategyWBTCPickle.setredeliverynum (StrategyPickleWBTC.sol#407-411) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": 416,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
                    "message": "StrategyWBTCPickle.setGovernance (StrategyPickleWBTC.sol#413-416) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": "Detected issues with version pragma in StrategyPickleWBTC.sol:\n\t- pragma solidity^0.5.15 (StrategyPickleWBTC.sol#9): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Low level call in Address.sendValue (StrategyPickleWBTC.sol#80-86):\n\t-(success) = recipient.call.value(amount)() StrategyPickleWBTC.sol#84\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
                    "message": "Low level call in SafeERC20.callOptionalReturn (StrategyPickleWBTC.sol#107-118):\n\t-(success,returndata) = address(token).call(data) StrategyPickleWBTC.sol#111\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function vaults(address) external view returns (address);\n",
                    "message": "Parameter '' of Controller.vaults (StrategyPickleWBTC.sol#122) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.deposit (StrategyPickleWBTC.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.withdraw (StrategyPickleWBTC.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.balanceOf (StrategyPickleWBTC.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Function 'CurveDeposit.claimable_tokens' (StrategyPickleWBTC.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.claimable_tokens (StrategyPickleWBTC.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address) external;\n",
                    "message": "Parameter '' of CurveMinter.mint (StrategyPickleWBTC.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 154,
                    "vulnerability_code": "interface yERC20 {\n\n  function deposit(uint256 _amount) external;\n\n  function withdraw(uint256 _amount) external;\n\n  function getRatio() external view returns (uint);\n",
                    "message": "Contract 'yERC20' (StrategyPickleWBTC.sol#150-154) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": 163,
                    "vulnerability_code": "interface pERC20 {\n\n  function deposit(uint256 ,uint256 ) external;\n\n  function withdraw(uint256 ,uint256 ) external;\n\n  function balanceOf(uint256 ) external view returns(uint);\n\n  function balanceOf(uint256 ,address) external view returns(uint);\n\n  function getRatio() external view returns (uint);\n\n  function pendingPickle(uint256,address) external view returns(uint);\n",
                    "message": "Contract 'pERC20' (StrategyPickleWBTC.sol#156-163) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function deposit(uint256 ,uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.deposit (StrategyPickleWBTC.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function deposit(uint256 ,uint256 ) external;\n",
                    "message": "Parameter '_scope_0' of pERC20.deposit (StrategyPickleWBTC.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdraw(uint256 ,uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.withdraw (StrategyPickleWBTC.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdraw(uint256 ,uint256 ) external;\n",
                    "message": "Parameter '_scope_0' of pERC20.withdraw (StrategyPickleWBTC.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(uint256 ) external view returns(uint);\n",
                    "message": "Parameter '' of pERC20.balanceOf (StrategyPickleWBTC.sol#159) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(uint256 ,address) external view returns(uint);\n",
                    "message": "Parameter '' of pERC20.balanceOf (StrategyPickleWBTC.sol#160) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(uint256 ,address) external view returns(uint);\n",
                    "message": "Parameter '_scope_0' of pERC20.balanceOf (StrategyPickleWBTC.sol#160) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pendingPickle(uint256,address) external view returns(uint);\n",
                    "message": "Parameter '' of pERC20.pendingPickle (StrategyPickleWBTC.sol#162) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pendingPickle(uint256,address) external view returns(uint);\n",
                    "message": "Parameter '_scope_0' of pERC20.pendingPickle (StrategyPickleWBTC.sol#162) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function get_virtual_price() external view returns (uint);\n",
                    "message": "Function 'ICurveFi.get_virtual_price' (StrategyPickleWBTC.sol#167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": 171,
                    "vulnerability_code": "  function add_liquidity(\n\n    uint256[2] calldata amounts,\n\n    uint256 min_mint_amount\n",
                    "message": "Function 'ICurveFi.add_liquidity' (StrategyPickleWBTC.sol#168-171) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 min_mint_amount\n",
                    "message": "Parameter 'min_mint_amount' of ICurveFi.add_liquidity (StrategyPickleWBTC.sol#170) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "  function remove_liquidity(\n\n    uint256 _amount,\n\n    uint256[2] calldata amounts\n",
                    "message": "Function 'ICurveFi.remove_liquidity' (StrategyPickleWBTC.sol#172-175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\n",
                    "message": "Parameter '_from_amount' of ICurveFi.exchange (StrategyPickleWBTC.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\n",
                    "message": "Parameter '_min_to_amount' of ICurveFi.exchange (StrategyPickleWBTC.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint _amount) external\n",
                    "message": "Parameter '_amount' of StrategyWBTCPickle.withdraw (StrategyPickleWBTC.sol#265) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 286,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n\n        require(msg.sender == controller, \"!controller\");\n\n\t\tuint amount = IERC20(want).balanceOf(address(this));\t\n\n\t\tif (amount < _amount) {\n\n\t\t\t_withdrawSome(_amount.sub(amount));\n\n\t\t\tamount = IERC20(want).balanceOf(address(this));\n\n\t\t}\t\n\n\t\treturn amount; \n",
                    "message": "Function 'StrategyWBTCPickle._withdraw' (StrategyPickleWBTC.sol#278-286) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n",
                    "message": "Parameter '_amount' of StrategyWBTCPickle._withdraw (StrategyPickleWBTC.sol#278) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": 323,
                    "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal returns(uint256){\n\n        uint256 crvBefore = IERC20(crvPla).balanceOf(address(this));\n\n\t\tuint256 _crvpla = _amount.mul(1e18).div((ICurveFi(curvefi).get_virtual_price().div(1e10)));\n\n\t\tif (crvBefore < _crvpla)\n\n\t\t{\n\n\t\t    _crvpla = _crvpla.sub(crvBefore);\n\n            uint256 _p3crv = _crvpla.mul(1e18).div(yERC20(pickleJar).getRatio());\n\n            uint _before = IERC20(pickleJar).balanceOf(address(this));\n\n            if (_before < _p3crv) {\n\n                _p3crv = _p3crv.sub(_before);\n\n                //require(_p3crv <= pledgePickles, \"Invalid amount!\");\n\n\t\t\t\tif (_p3crv > pledgePickles)\n\n\t\t\t\t{\n\n\t\t\t\t\t_p3crv = pledgePickles;\n\n\t\t\t\t}\n\n                pERC20(PICKLE).withdraw(pickleindex,_p3crv);\n\n                pledgePickles = pledgePickles.sub(_p3crv);\n\n            }\n\n            uint p3CRV = IERC20(pickleJar).balanceOf(address(this));\n\n\t    \tyERC20(pickleJar).withdraw(p3CRV);\n\n\t\t}\n\n\n\n        uint crv = IERC20(crvPla).balanceOf(address(this));\n\n\t\t\n\n        return withdrawUnderlying(crv);\n",
                    "message": "Function 'StrategyWBTCPickle._withdrawSome' (StrategyPickleWBTC.sol#298-323) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal returns(uint256){\n",
                    "message": "Parameter '_amount' of StrategyWBTCPickle._withdrawSome (StrategyPickleWBTC.sol#298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction withdrawUnderlying(uint256 _amount) public returns (uint) {\n",
                    "message": "Parameter '_amount' of StrategyWBTCPickle.withdrawUnderlying (StrategyPickleWBTC.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": "Parameter '_governance' of StrategyWBTCPickle.setGovernance (StrategyPickleWBTC.sol#413) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": "Parameter '_controller' of StrategyWBTCPickle.setController (StrategyPickleWBTC.sol#418) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
                    "message": "Constant 'StrategyWBTCPickle.unirouter' (StrategyPickleWBTC.sol#201) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": "Constant 'StrategyWBTCPickle.weth' (StrategyPickleWBTC.sol#202) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
                    "message": "Constant 'StrategyWBTCPickle.bt' (StrategyPickleWBTC.sol#203) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public renBTC = address(0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D);\n",
                    "message": "Constant 'StrategyWBTCPickle.renBTC' (StrategyPickleWBTC.sol#205) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);  //wbtc\n",
                    "message": "Constant 'StrategyWBTCPickle.want' (StrategyPickleWBTC.sol#207) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public curvefi = address(0x93054188d876f558f4a66B2EF1d97d16eDf0895B);\n",
                    "message": "Constant 'StrategyWBTCPickle.curvefi' (StrategyPickleWBTC.sol#208) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pickleJar = address(0x2E35392F4c36EBa7eCAFE4de34199b2373Af22ec);\n",
                    "message": "Constant 'StrategyWBTCPickle.pickleJar' (StrategyPickleWBTC.sol#209) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public crvPla = address(0x49849C98ae39Fff122806C06791Fa73784FB3675);\n",
                    "message": "Constant 'StrategyWBTCPickle.crvPla' (StrategyPickleWBTC.sol#212) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pickletoken = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\n",
                    "message": "Constant 'StrategyWBTCPickle.pickletoken' (StrategyPickleWBTC.sol#213) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public renBTC = address(0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);  //wbtc\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public curvefi = address(0x93054188d876f558f4a66B2EF1d97d16eDf0895B);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pickleJar = address(0x2E35392F4c36EBa7eCAFE4de34199b2373Af22ec);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public PICKLE = address(0xbD17B1ce622d73bD438b9E658acA5996dc394b0d);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public crvPla = address(0x49849C98ae39Fff122806C06791Fa73784FB3675);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pickletoken = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 pickleindex = 13;\n",
                    "message": null
                }
            ]
        }
    },
    "bt-finance-6300bc1271b73a1755fae02594d25fdf6fa39a9c/contracts/strategies/StrategyETHAlpha.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public withdrawalFee = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tswap2BTRouting = [weth,bt];\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_want > 0,\"WETH is 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == controller, \"!controller\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_withdrawalFee <=1000,\"fee >= 10%\"); //max:1%\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            UniswapRouter(unirouter).swapExactTokensForTokens(_fee, 0, swap2BTRouting, address(this), now.add(1800));\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_28"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract (StrategyETHAlpha.sol#70-76) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract uses assembly (StrategyETHAlpha.sol#70-76)\n\t- StrategyETHAlpha.sol#74\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": 212,
                    "vulnerability_code": "    function deposit() public {\n\n\t\tuint _want = IERC20(want).balanceOf(address(this));\n\n        require(_want > 0,\"WETH is 0\");\n\n        WETH(address(weth)).withdraw(_want); //weth->eth\n\n        IBETH(ethpool).deposit.value(_want)();\n",
                    "message": "StrategyETHAlpha.deposit (StrategyETHAlpha.sol#207-212) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": 280,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n\n    {\n\n        require(msg.sender == governance, \"!governance\");\n\n        redeliverynum = value;\n",
                    "message": "StrategyETHAlpha.setredeliverynum (StrategyETHAlpha.sol#276-280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
                    "message": "StrategyETHAlpha.setGovernance (StrategyETHAlpha.sol#282-285) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in StrategyETHAlpha.sol:\n\t- pragma solidity^0.5.17 (StrategyETHAlpha.sol#9): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Low level call in Address.sendValue (StrategyETHAlpha.sol#80-86):\n\t-(success) = recipient.call.value(amount)() StrategyETHAlpha.sol#84\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
                    "message": "Low level call in SafeERC20.callOptionalReturn (StrategyETHAlpha.sol#107-118):\n\t-(success,returndata) = address(token).call(data) StrategyETHAlpha.sol#111\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function vaults(address) external view returns (address);\n",
                    "message": "Parameter '' of Controller.vaults (StrategyETHAlpha.sol#122) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
                    "message": "Parameter '' of UniswapRouter.swapExactTokensForTokens (StrategyETHAlpha.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
                    "message": "Parameter '_scope_0' of UniswapRouter.swapExactTokensForTokens (StrategyETHAlpha.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
                    "message": "Parameter '_scope_1' of UniswapRouter.swapExactTokensForTokens (StrategyETHAlpha.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
                    "message": "Parameter '_scope_2' of UniswapRouter.swapExactTokensForTokens (StrategyETHAlpha.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
                    "message": "Parameter '_scope_3' of UniswapRouter.swapExactTokensForTokens (StrategyETHAlpha.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint _amount) external\n",
                    "message": "Parameter '_amount' of StrategyETHAlpha.withdraw (StrategyETHAlpha.sol#216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": 245,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\n\n        require(msg.sender == controller, \"!controller\");\n\n\t\tuint amount = IERC20(want).balanceOf(address(this));\n\n\t\tif (amount < _amount) {\n\n\t\t\t_withdrawSome(_amount.sub(amount));\n\n\t\t\tamount = IERC20(want).balanceOf(address(this));\n\n\t\t}\n\n\n\n        uint _fee = 0;\n\n        if (withdrawalFee>0){\n\n            _fee = amount.mul(withdrawalFee).div(withdrawalMax);\n\n            amount = amount.sub(_fee);\n\n            UniswapRouter(unirouter).swapExactTokensForTokens(_fee, 0, swap2BTRouting, address(this), now.add(1800));\n\n        }\n\n\n\n\t\treturn amount;\n",
                    "message": "Function 'StrategyETHAlpha._withdraw' (StrategyETHAlpha.sol#229-245) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\n",
                    "message": "Parameter '_amount' of StrategyETHAlpha._withdraw (StrategyETHAlpha.sol#229) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": 252,
                    "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n\n    {\n\n        uint256 share = _amount.mul(IBETH(ethpool).totalSupply()).div(IBETH(ethpool).totalETH());\n\n        IBETH(ethpool).withdraw(share);\n\n        WETH(address(weth)).deposit.value(address(this).balance)();\n",
                    "message": "Function 'StrategyETHAlpha._withdrawSome' (StrategyETHAlpha.sol#247-252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n",
                    "message": "Parameter '_amount' of StrategyETHAlpha._withdrawSome (StrategyETHAlpha.sol#247) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": "Parameter '_governance' of StrategyETHAlpha.setGovernance (StrategyETHAlpha.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setWithdrawalFee(uint _withdrawalFee) external {\n",
                    "message": "Parameter '_withdrawalFee' of StrategyETHAlpha.setWithdrawalFee (StrategyETHAlpha.sol#287) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": "Parameter '_controller' of StrategyETHAlpha.setController (StrategyETHAlpha.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
                    "message": "Constant 'StrategyETHAlpha.unirouter' (StrategyETHAlpha.sol#181) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": "Constant 'StrategyETHAlpha.weth' (StrategyETHAlpha.sol#182) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
                    "message": "Constant 'StrategyETHAlpha.bt' (StrategyETHAlpha.sol#183) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);  //weth\n",
                    "message": "Constant 'StrategyETHAlpha.want' (StrategyETHAlpha.sol#185) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public ethpool = address(0x67B66C99D3Eb37Fa76Aa3Ed1ff33E8e39F0b9c7A);\n",
                    "message": "Constant 'StrategyETHAlpha.ethpool' (StrategyETHAlpha.sol#187) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant public withdrawalMax = 10000;\n",
                    "message": "Constant 'StrategyETHAlpha.withdrawalMax' (StrategyETHAlpha.sol#194) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);  //weth\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public ethpool = address(0x67B66C99D3Eb37Fa76Aa3Ed1ff33E8e39F0b9c7A);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setWithdrawalFee(uint _withdrawalFee) external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": null
                }
            ]
        }
    },
    "bt-finance-6300bc1271b73a1755fae02594d25fdf6fa39a9c/contracts/strategies/StrategyPickleCRVRenWBTC.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public pledgePickles = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        doApprove(); \n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tswap2BTRouting = [pickletoken,weth,bt];\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        swap2TokenRouting = [pickletoken,weth,wbtc];\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");                     \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == controller, \"!controller\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");                      \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 383,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "curve-readonly-reentrancy",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\treturn _wbtc.mul(1e10).mul(1e18).div(ICurveFi(curvefi).get_virtual_price());\n",
                    "message": "ICurveFi(curvefi).get_virtual_price() call on a Curve pool is not protected from the read- only reentrancy."
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2token, 0, swap2TokenRouting, address(this), now.add(1800));\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_62"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract (StrategyPickleCRVRenWBTC.sol#70-76) is declared view but contains assembly code\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": 330,
                    "vulnerability_code": "\tfunction balanceOfPickle() public view returns (uint256) \n\n\t{\n\n\t\tuint256 pickletokenNum = pERC20(PICKLE).pendingPickle(pickleindex,address(this)).add(IERC20(pickletoken).balanceOf(address(this))).mul(80).div(100);\n\n\t\tif (pickletokenNum==0)\n\n\t\t{\n\n\t\t    return 0;\n\n\t\t}\n\n        uint[] memory amounts = UniswapRouter(unirouter).getAmountsOut(pickletokenNum,swap2TokenRouting);\n\n        uint _wbtc = amounts[amounts.length-1];\n\n\t\treturn _wbtc.mul(1e10).mul(1e18).div(ICurveFi(curvefi).get_virtual_price());\n",
                    "message": "StrategyCRVRenWBTCPickle.balanceOfPickle (StrategyPickleCRVRenWBTC.sol#320-330) uses a dangerous strict equality:\n\t- pickletokenNum == 0\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 305,
                    "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal {\n\n        uint256 _p3crv = _amount.mul(1e18).div(yERC20(pickleJar).getRatio());\n\n        uint _before = IERC20(pickleJar).balanceOf(address(this));\n\n        if (_before < _p3crv) {\n\n            _p3crv = _p3crv.sub(_before);\n\n            if (_p3crv > pledgePickles)\n\n            {\n\n                _p3crv = pledgePickles;\n\n            }\n\n            pERC20(PICKLE).withdraw(pickleindex,_p3crv);\n\n            pledgePickles = pledgePickles.sub(_p3crv);\n\n            _p3crv = IERC20(pickleJar).balanceOf(address(this));\n\n        }\n\n        yERC20(pickleJar).withdraw(_p3crv);\n",
                    "message": "Reentrancy in StrategyCRVRenWBTCPickle._withdrawSome (StrategyPickleCRVRenWBTC.sol#291-305):\n\tExternal calls:\n\t- _p3crv = _amount.mul(1e18).div(yERC20(pickleJar).getRatio()) (StrategyPickleCRVRenWBTC.sol#292)\n\t- _before = IERC20(pickleJar).balanceOf(address(this)) (StrategyPickleCRVRenWBTC.sol#293)\n\t- pERC20(PICKLE).withdraw(pickleindex,_p3crv) (StrategyPickleCRVRenWBTC.sol#300)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleCRVRenWBTC.sol#301)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();    \n",
                    "message": "Reentrancy in StrategyCRVRenWBTCPickle.harvest (StrategyPickleCRVRenWBTC.sol#345-350):\n\tExternal calls:\n\t- pERC20(PICKLE).withdraw(pickleindex,pledgePickles) (StrategyPickleCRVRenWBTC.sol#347)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleCRVRenWBTC.sol#348)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();    \n",
                    "message": "Reentrancy in StrategyCRVRenWBTCPickle.harvest (StrategyPickleCRVRenWBTC.sol#345-350):\n\tExternal calls:\n\t- pERC20(PICKLE).withdraw(pickleindex,pledgePickles) (StrategyPickleCRVRenWBTC.sol#347)\n\t- redelivery() (StrategyPickleCRVRenWBTC.sol#349)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleCRVRenWBTC.sol#349)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": 288,
                    "vulnerability_code": "\tfunction withdrawAll() external  returns (uint balance)  {\n\n\t\tuint amount = balanceOf();\n\n\t\tbalance = _withdraw(amount);\n\n\t\t\n\n\t\taddress _vault = Controller(controller).vaults(address(want));\n\n        require(_vault != address(0), \"!vault\");                      \n\n        IERC20(want).safeTransfer(_vault, balance);\n",
                    "message": "Reentrancy in StrategyCRVRenWBTCPickle.withdrawAll (StrategyPickleCRVRenWBTC.sol#281-288):\n\tExternal calls:\n\t- amount = balanceOf() (StrategyPickleCRVRenWBTC.sol#282)\n\t- balance = _withdraw(amount) (StrategyPickleCRVRenWBTC.sol#283)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleCRVRenWBTC.sol#283)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": 235,
                    "vulnerability_code": "\tfunction doApprove () public{\n\n        IERC20(pickletoken).approve(unirouter, 0);\n\n        IERC20(pickletoken).approve(unirouter, uint(-1));\n",
                    "message": "StrategyCRVRenWBTCPickle.doApprove (StrategyPickleCRVRenWBTC.sol#232-235) does not use the value returned by external calls:\n\t-IERC20(pickletoken).approve(unirouter,0) (StrategyPickleCRVRenWBTC.sol#233)\n\t-IERC20(pickletoken).approve(unirouter,uint256(- 1)) (StrategyPickleCRVRenWBTC.sol#234)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": 369,
                    "vulnerability_code": "    function redelivery() internal {\n\n        uint256 reward = IERC20(pickletoken).balanceOf(address(this));\n\n        if (reward > redeliverynum)\n\n        {\n\n            uint256 _2token = reward.mul(80).div(100); //80%\n\n\t\t    uint256 _2bt = reward.mul(20).div(100);  //20%\n\n\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2token, 0, swap2TokenRouting, address(this), now.add(1800));\n\n\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));\n\n\n\n            uint _wbtc = IERC20(wbtc).balanceOf(address(this));\n\n            if (_wbtc > 0) {\n\n                IERC20(wbtc).safeApprove(curvefi, 0);\n\n                IERC20(wbtc).safeApprove(curvefi, _wbtc);\n\n                ICurveFi(curvefi).add_liquidity([0,_wbtc],0);\n\n            }\n\n\t\t}\n\n        deposit();\n",
                    "message": "StrategyCRVRenWBTCPickle.redelivery (StrategyPickleCRVRenWBTC.sol#352-369) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_2token,0,swap2TokenRouting,address(this),now.add(1800)) (StrategyPickleCRVRenWBTC.sol#358)\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_2bt,0,swap2BTRouting,Controller(controller).rewards(),now.add(1800)) (StrategyPickleCRVRenWBTC.sol#359)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "    constructor() public {\n\n        governance = tx.origin;\n\n        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n\n        doApprove(); \n\n\t\tswap2BTRouting = [pickletoken,weth,bt];\n\n        swap2TokenRouting = [pickletoken,weth,wbtc];\n",
                    "message": "Reentrancy in StrategyCRVRenWBTCPickle.constructor (StrategyPickleCRVRenWBTC.sol#224-230):\n\tExternal calls:\n\t- doApprove() (StrategyPickleCRVRenWBTC.sol#227)\n\tState variables written after the call(s):\n\t- swap2BTRouting (StrategyPickleCRVRenWBTC.sol#228)\n\t- swap2TokenRouting (StrategyPickleCRVRenWBTC.sol#229)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "    function deposit() public {\n\n\t\tuint256 _crvpla = IERC20(crvPla).balanceOf(address(this));\n\n\t\tif (_crvpla > 0)\n\n\t\t{\n\n\t\t    IERC20(crvPla).safeApprove(pickleJar, 0);\n\n            IERC20(crvPla).safeApprove(pickleJar, _crvpla);\n\n\t\t    yERC20(pickleJar).deposit(_crvpla);\n\n\t\t}\n\n\t\t\n\n\t\tuint _p3crv = IERC20(pickleJar).balanceOf(address(this));\n\n\t\tif (_p3crv > 0)\n\n\t\t{\n\n\t        IERC20(pickleJar).safeApprove(PICKLE, 0);\n\n            IERC20(pickleJar).safeApprove(PICKLE, _p3crv);\n\n\t    \tpERC20(PICKLE).deposit(pickleindex,_p3crv);\n\n    \t\tpledgePickles = pledgePickles.add(_p3crv);\n\n\t\t}\n",
                    "message": "Reentrancy in StrategyCRVRenWBTCPickle.deposit (StrategyPickleCRVRenWBTC.sol#237-254):\n\tExternal calls:\n\t- _crvpla = IERC20(crvPla).balanceOf(address(this)) (StrategyPickleCRVRenWBTC.sol#238)\n\t- yERC20(pickleJar).deposit(_crvpla) (StrategyPickleCRVRenWBTC.sol#243)\n\t- _p3crv = IERC20(pickleJar).balanceOf(address(this)) (StrategyPickleCRVRenWBTC.sol#246)\n\t- pERC20(PICKLE).deposit(pickleindex,_p3crv) (StrategyPickleCRVRenWBTC.sol#251)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickleCRVRenWBTC.sol#252)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract uses assembly (StrategyPickleCRVRenWBTC.sol#70-76)\n\t- StrategyPickleCRVRenWBTC.sol#74\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 pickleindex = 13;\n",
                    "message": "StrategyCRVRenWBTCPickle.pickleindex should be constant (StrategyPickleCRVRenWBTC.sol#198)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": 330,
                    "vulnerability_code": "\tfunction balanceOfPickle() public view returns (uint256) \n\n\t{\n\n\t\tuint256 pickletokenNum = pERC20(PICKLE).pendingPickle(pickleindex,address(this)).add(IERC20(pickletoken).balanceOf(address(this))).mul(80).div(100);\n\n\t\tif (pickletokenNum==0)\n\n\t\t{\n\n\t\t    return 0;\n\n\t\t}\n\n        uint[] memory amounts = UniswapRouter(unirouter).getAmountsOut(pickletokenNum,swap2TokenRouting);\n\n        uint _wbtc = amounts[amounts.length-1];\n\n\t\treturn _wbtc.mul(1e10).mul(1e18).div(ICurveFi(curvefi).get_virtual_price());\n",
                    "message": "StrategyCRVRenWBTCPickle.balanceOfPickle (StrategyPickleCRVRenWBTC.sol#320-330) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": 338,
                    "vulnerability_code": "    function getPending() public view returns (uint256) {\n\n        return pERC20(PICKLE).pendingPickle(pickleindex,address(this));\n",
                    "message": "StrategyCRVRenWBTCPickle.getPending (StrategyPickleCRVRenWBTC.sol#336-338) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": 343,
                    "vulnerability_code": "\tfunction getPickle() public view returns(uint256)\n\n\t{\n\n\t\treturn IERC20(pickletoken).balanceOf(address(this));\n",
                    "message": "StrategyCRVRenWBTCPickle.getPickle (StrategyPickleCRVRenWBTC.sol#340-343) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();    \n",
                    "message": "StrategyCRVRenWBTCPickle.harvest (StrategyPickleCRVRenWBTC.sol#345-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 375,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n\n    {\n\n        require(msg.sender == governance, \"!governance\");\n\n        redeliverynum = value;\n",
                    "message": "StrategyCRVRenWBTCPickle.setredeliverynum (StrategyPickleCRVRenWBTC.sol#371-375) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": 380,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
                    "message": "StrategyCRVRenWBTCPickle.setGovernance (StrategyPickleCRVRenWBTC.sol#377-380) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": "Detected issues with version pragma in StrategyPickleCRVRenWBTC.sol:\n\t- pragma solidity^0.5.15 (StrategyPickleCRVRenWBTC.sol#9): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Low level call in Address.sendValue (StrategyPickleCRVRenWBTC.sol#80-86):\n\t-(success) = recipient.call.value(amount)() StrategyPickleCRVRenWBTC.sol#84\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
                    "message": "Low level call in SafeERC20.callOptionalReturn (StrategyPickleCRVRenWBTC.sol#107-118):\n\t-(success,returndata) = address(token).call(data) StrategyPickleCRVRenWBTC.sol#111\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function vaults(address) external view returns (address);\n",
                    "message": "Parameter '' of Controller.vaults (StrategyPickleCRVRenWBTC.sol#122) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.deposit (StrategyPickleCRVRenWBTC.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.withdraw (StrategyPickleCRVRenWBTC.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.balanceOf (StrategyPickleCRVRenWBTC.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Function 'CurveDeposit.claimable_tokens' (StrategyPickleCRVRenWBTC.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.claimable_tokens (StrategyPickleCRVRenWBTC.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address) external;\n",
                    "message": "Parameter '' of CurveMinter.mint (StrategyPickleCRVRenWBTC.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 154,
                    "vulnerability_code": "interface yERC20 {\n\n  function deposit(uint256 _amount) external;\n\n  function withdraw(uint256 _amount) external;\n\n  function getRatio() external view returns (uint);\n",
                    "message": "Contract 'yERC20' (StrategyPickleCRVRenWBTC.sol#150-154) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": 163,
                    "vulnerability_code": "interface pERC20 {\n\n  function deposit(uint256 ,uint256 ) external;\n\n  function withdraw(uint256 ,uint256 ) external;\n\n  function balanceOf(uint256 ) external view returns(uint);\n\n  function balanceOf(uint256 ,address) external view returns(uint);\n\n  function getRatio() external view returns (uint);\n\n  function pendingPickle(uint256,address) external view returns(uint);\n",
                    "message": "Contract 'pERC20' (StrategyPickleCRVRenWBTC.sol#156-163) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function deposit(uint256 ,uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.deposit (StrategyPickleCRVRenWBTC.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function deposit(uint256 ,uint256 ) external;\n",
                    "message": "Parameter '_scope_0' of pERC20.deposit (StrategyPickleCRVRenWBTC.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdraw(uint256 ,uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.withdraw (StrategyPickleCRVRenWBTC.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdraw(uint256 ,uint256 ) external;\n",
                    "message": "Parameter '_scope_0' of pERC20.withdraw (StrategyPickleCRVRenWBTC.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(uint256 ) external view returns(uint);\n",
                    "message": "Parameter '' of pERC20.balanceOf (StrategyPickleCRVRenWBTC.sol#159) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(uint256 ,address) external view returns(uint);\n",
                    "message": "Parameter '' of pERC20.balanceOf (StrategyPickleCRVRenWBTC.sol#160) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(uint256 ,address) external view returns(uint);\n",
                    "message": "Parameter '_scope_0' of pERC20.balanceOf (StrategyPickleCRVRenWBTC.sol#160) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pendingPickle(uint256,address) external view returns(uint);\n",
                    "message": "Parameter '' of pERC20.pendingPickle (StrategyPickleCRVRenWBTC.sol#162) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pendingPickle(uint256,address) external view returns(uint);\n",
                    "message": "Parameter '_scope_0' of pERC20.pendingPickle (StrategyPickleCRVRenWBTC.sol#162) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function get_virtual_price() external view returns (uint);\n",
                    "message": "Function 'ICurveFi.get_virtual_price' (StrategyPickleCRVRenWBTC.sol#167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": 171,
                    "vulnerability_code": "  function add_liquidity(\n\n    uint256[2] calldata amounts,\n\n    uint256 min_mint_amount\n",
                    "message": "Function 'ICurveFi.add_liquidity' (StrategyPickleCRVRenWBTC.sol#168-171) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 min_mint_amount\n",
                    "message": "Parameter 'min_mint_amount' of ICurveFi.add_liquidity (StrategyPickleCRVRenWBTC.sol#170) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "  function remove_liquidity(\n\n    uint256 _amount,\n\n    uint256[2] calldata amounts\n",
                    "message": "Function 'ICurveFi.remove_liquidity' (StrategyPickleCRVRenWBTC.sol#172-175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\n",
                    "message": "Parameter '_from_amount' of ICurveFi.exchange (StrategyPickleCRVRenWBTC.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\n",
                    "message": "Parameter '_min_to_amount' of ICurveFi.exchange (StrategyPickleCRVRenWBTC.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint _amount) external\n",
                    "message": "Parameter '_amount' of StrategyCRVRenWBTCPickle.withdraw (StrategyPickleCRVRenWBTC.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 279,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n\n        require(msg.sender == controller, \"!controller\");\n\n\t\tuint amount = IERC20(want).balanceOf(address(this));\t\n\n\t\tif (amount < _amount) {\n\n\t\t\t_withdrawSome(_amount.sub(amount));\n\n\t\t\tamount = IERC20(want).balanceOf(address(this));\n\n\t\t}\t\n\n\t\treturn amount; \n",
                    "message": "Function 'StrategyCRVRenWBTCPickle._withdraw' (StrategyPickleCRVRenWBTC.sol#271-279) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n",
                    "message": "Parameter '_amount' of StrategyCRVRenWBTCPickle._withdraw (StrategyPickleCRVRenWBTC.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 305,
                    "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal {\n\n        uint256 _p3crv = _amount.mul(1e18).div(yERC20(pickleJar).getRatio());\n\n        uint _before = IERC20(pickleJar).balanceOf(address(this));\n\n        if (_before < _p3crv) {\n\n            _p3crv = _p3crv.sub(_before);\n\n            if (_p3crv > pledgePickles)\n\n            {\n\n                _p3crv = pledgePickles;\n\n            }\n\n            pERC20(PICKLE).withdraw(pickleindex,_p3crv);\n\n            pledgePickles = pledgePickles.sub(_p3crv);\n\n            _p3crv = IERC20(pickleJar).balanceOf(address(this));\n\n        }\n\n        yERC20(pickleJar).withdraw(_p3crv);\n",
                    "message": "Function 'StrategyCRVRenWBTCPickle._withdrawSome' (StrategyPickleCRVRenWBTC.sol#291-305) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal {\n",
                    "message": "Parameter '_amount' of StrategyCRVRenWBTCPickle._withdrawSome (StrategyPickleCRVRenWBTC.sol#291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": "Parameter '_governance' of StrategyCRVRenWBTCPickle.setGovernance (StrategyPickleCRVRenWBTC.sol#377) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": "Parameter '_controller' of StrategyCRVRenWBTCPickle.setController (StrategyPickleCRVRenWBTC.sol#382) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
                    "message": "Constant 'StrategyCRVRenWBTCPickle.unirouter' (StrategyPickleCRVRenWBTC.sol#200) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": "Constant 'StrategyCRVRenWBTCPickle.weth' (StrategyPickleCRVRenWBTC.sol#201) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
                    "message": "Constant 'StrategyCRVRenWBTCPickle.bt' (StrategyPickleCRVRenWBTC.sol#202) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public renBTC = address(0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D);\n",
                    "message": "Constant 'StrategyCRVRenWBTCPickle.renBTC' (StrategyPickleCRVRenWBTC.sol#204) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public wbtc = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\n",
                    "message": "Constant 'StrategyCRVRenWBTCPickle.wbtc' (StrategyPickleCRVRenWBTC.sol#205) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0x49849C98ae39Fff122806C06791Fa73784FB3675);  //crvRenBtc\n",
                    "message": "Constant 'StrategyCRVRenWBTCPickle.want' (StrategyPickleCRVRenWBTC.sol#207) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public curvefi = address(0x93054188d876f558f4a66B2EF1d97d16eDf0895B);\n",
                    "message": "Constant 'StrategyCRVRenWBTCPickle.curvefi' (StrategyPickleCRVRenWBTC.sol#208) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pickleJar = address(0x2E35392F4c36EBa7eCAFE4de34199b2373Af22ec);\n",
                    "message": "Constant 'StrategyCRVRenWBTCPickle.pickleJar' (StrategyPickleCRVRenWBTC.sol#209) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public crvPla = address(0x49849C98ae39Fff122806C06791Fa73784FB3675);\n",
                    "message": "Constant 'StrategyCRVRenWBTCPickle.crvPla' (StrategyPickleCRVRenWBTC.sol#212) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pickletoken = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\n",
                    "message": "Constant 'StrategyCRVRenWBTCPickle.pickletoken' (StrategyPickleCRVRenWBTC.sol#213) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public renBTC = address(0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public wbtc = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0x49849C98ae39Fff122806C06791Fa73784FB3675);  //crvRenBtc\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public curvefi = address(0x93054188d876f558f4a66B2EF1d97d16eDf0895B);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pickleJar = address(0x2E35392F4c36EBa7eCAFE4de34199b2373Af22ec);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public PICKLE = address(0xbD17B1ce622d73bD438b9E658acA5996dc394b0d);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public crvPla = address(0x49849C98ae39Fff122806C06791Fa73784FB3675);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pickletoken = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 pickleindex = 13;\n",
                    "message": null
                }
            ]
        }
    },
    "bt-finance-6300bc1271b73a1755fae02594d25fdf6fa39a9c/contracts/strategies/StrategyPickle3CRV.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public pledgePickles = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        doApprove();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tswap2BTRouting = [pickletoken,weth,bt];\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        swap2TokenRouting = [pickletoken,weth,yusdc];\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == controller, \"!controller\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "curve-readonly-reentrancy",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\treturn _usdc.mul(1e12).mul(1e18).div(ICurveFi(curvefi).get_virtual_price());\n",
                    "message": "ICurveFi(curvefi).get_virtual_price() call on a Curve pool is not protected from the read- only reentrancy."
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2token, 0, swap2TokenRouting, address(this), now.add(1800));\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_58"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract (StrategyPickle3CRV.sol#70-76) is declared view but contains assembly code\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 322,
                    "vulnerability_code": "    function balanceOfPickle() public view returns (uint256)\n\n\t{\n\n\t\tuint256 pickletokenNum = pERC20(PICKLE).pendingPickle(pickleindex,address(this)).add(IERC20(pickletoken).balanceOf(address(this))).mul(80).div(100);\n\n\t\tif (pickletokenNum==0)\n\n\t\t{\n\n\t\t    return 0;\n\n\t\t}\n\n\t\tuint[] memory amounts = UniswapRouter(unirouter).getAmountsOut(pickletokenNum,swap2TokenRouting);\n\n        uint _usdc = amounts[amounts.length-1];\n\n\t\treturn _usdc.mul(1e12).mul(1e18).div(ICurveFi(curvefi).get_virtual_price());\n",
                    "message": "Strategy3CRVPickle.balanceOfPickle (StrategyPickle3CRV.sol#312-322) uses a dangerous strict equality:\n\t- pickletokenNum == 0\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": 297,
                    "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal {\n\n        uint256 _p3crv = _amount.mul(1e18).div(yERC20(pickleJar).getRatio());\n\n        uint _before = IERC20(pickleJar).balanceOf(address(this));\n\n        if (_before < _p3crv) {\n\n            _p3crv = _p3crv.sub(_before);\n\n            if (_p3crv > pledgePickles)\n\n            {\n\n                _p3crv = pledgePickles;\n\n            }\n\n            pERC20(PICKLE).withdraw(pickleindex,_p3crv);\n\n            pledgePickles = pledgePickles.sub(_p3crv);\n\n            _p3crv = IERC20(pickleJar).balanceOf(address(this));\n\n        }\n\n        yERC20(pickleJar).withdraw(_p3crv);\n",
                    "message": "Reentrancy in Strategy3CRVPickle._withdrawSome (StrategyPickle3CRV.sol#283-297):\n\tExternal calls:\n\t- _p3crv = _amount.mul(1e18).div(yERC20(pickleJar).getRatio()) (StrategyPickle3CRV.sol#284)\n\t- _before = IERC20(pickleJar).balanceOf(address(this)) (StrategyPickle3CRV.sol#285)\n\t- pERC20(PICKLE).withdraw(pickleindex,_p3crv) (StrategyPickle3CRV.sol#292)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickle3CRV.sol#293)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": 342,
                    "vulnerability_code": "    function harvest() public\n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();\n",
                    "message": "Reentrancy in Strategy3CRVPickle.harvest (StrategyPickle3CRV.sol#337-342):\n\tExternal calls:\n\t- pERC20(PICKLE).withdraw(pickleindex,pledgePickles) (StrategyPickle3CRV.sol#339)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickle3CRV.sol#340)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": 342,
                    "vulnerability_code": "    function harvest() public\n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();\n",
                    "message": "Reentrancy in Strategy3CRVPickle.harvest (StrategyPickle3CRV.sol#337-342):\n\tExternal calls:\n\t- pERC20(PICKLE).withdraw(pickleindex,pledgePickles) (StrategyPickle3CRV.sol#339)\n\t- redelivery() (StrategyPickle3CRV.sol#341)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickle3CRV.sol#341)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": 229,
                    "vulnerability_code": "\tfunction doApprove () public{\n\n        IERC20(pickletoken).approve(unirouter, 0);\n\n        IERC20(pickletoken).approve(unirouter, uint(-1));\n",
                    "message": "Strategy3CRVPickle.doApprove (StrategyPickle3CRV.sol#226-229) does not use the value returned by external calls:\n\t-IERC20(pickletoken).approve(unirouter,0) (StrategyPickle3CRV.sol#227)\n\t-IERC20(pickletoken).approve(unirouter,uint256(- 1)) (StrategyPickle3CRV.sol#228)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": 361,
                    "vulnerability_code": "    function redelivery() internal {\n\n        uint256 reward = IERC20(pickletoken).balanceOf(address(this));\n\n        if (reward > redeliverynum)\n\n        {\n\n            uint256 _2token = reward.mul(80).div(100); //80%\n\n\t\t    uint256 _2bt = reward.mul(20).div(100);  //20%\n\n\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2token, 0, swap2TokenRouting, address(this), now.add(1800));\n\n\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));\n\n\n\n            uint _usdc = IERC20(yusdc).balanceOf(address(this));\n\n            if (_usdc > 0) {\n\n                IERC20(yusdc).safeApprove(curvefi, 0);\n\n                IERC20(yusdc).safeApprove(curvefi, _usdc);\n\n                ICurveFi(curvefi).add_liquidity([0,_usdc,0],0);\n\n            }\n\n\t\t}\n\n        deposit();\n",
                    "message": "Strategy3CRVPickle.redelivery (StrategyPickle3CRV.sol#344-361) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_2token,0,swap2TokenRouting,address(this),now.add(1800)) (StrategyPickle3CRV.sol#350)\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_2bt,0,swap2BTRouting,Controller(controller).rewards(),now.add(1800)) (StrategyPickle3CRV.sol#351)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 224,
                    "vulnerability_code": "    constructor() public {\n\n        governance = tx.origin;\n\n        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n\n        doApprove();\n\n\t\tswap2BTRouting = [pickletoken,weth,bt];\n\n        swap2TokenRouting = [pickletoken,weth,yusdc];\n",
                    "message": "Reentrancy in Strategy3CRVPickle.constructor (StrategyPickle3CRV.sol#218-224):\n\tExternal calls:\n\t- doApprove() (StrategyPickle3CRV.sol#221)\n\tState variables written after the call(s):\n\t- swap2BTRouting (StrategyPickle3CRV.sol#222)\n\t- swap2TokenRouting (StrategyPickle3CRV.sol#223)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": 248,
                    "vulnerability_code": "    function deposit() public {\n\n\t\tuint256 _crvpla = IERC20(crvPla).balanceOf(address(this));\n\n\t\tif (_crvpla > 0)\n\n\t\t{\n\n\t\t    IERC20(crvPla).safeApprove(pickleJar, 0);\n\n            IERC20(crvPla).safeApprove(pickleJar, _crvpla);\n\n\t\t    yERC20(pickleJar).deposit(_crvpla);\n\n\t\t}\n\n\n\n\t\tuint _p3crv = IERC20(pickleJar).balanceOf(address(this));\n\n\t\tif (_p3crv > 0)\n\n\t\t{\n\n\t        IERC20(pickleJar).safeApprove(PICKLE, 0);\n\n            IERC20(pickleJar).safeApprove(PICKLE, _p3crv);\n\n\t    \tpERC20(PICKLE).deposit(pickleindex,_p3crv);\n\n    \t\tpledgePickles = pledgePickles.add(_p3crv);\n\n\t\t}\n",
                    "message": "Reentrancy in Strategy3CRVPickle.deposit (StrategyPickle3CRV.sol#231-248):\n\tExternal calls:\n\t- _crvpla = IERC20(crvPla).balanceOf(address(this)) (StrategyPickle3CRV.sol#232)\n\t- yERC20(pickleJar).deposit(_crvpla) (StrategyPickle3CRV.sol#237)\n\t- _p3crv = IERC20(pickleJar).balanceOf(address(this)) (StrategyPickle3CRV.sol#240)\n\t- pERC20(PICKLE).deposit(pickleindex,_p3crv) (StrategyPickle3CRV.sol#245)\n\tState variables written after the call(s):\n\t- pledgePickles (StrategyPickle3CRV.sol#246)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract uses assembly (StrategyPickle3CRV.sol#70-76)\n\t- StrategyPickle3CRV.sol#74\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 pickleindex = 14;\n",
                    "message": "Strategy3CRVPickle.pickleindex should be constant (StrategyPickle3CRV.sol#190)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": 330,
                    "vulnerability_code": "    function getPending() public view returns (uint256) {\n\n        return pERC20(PICKLE).pendingPickle(pickleindex,address(this));\n",
                    "message": "Strategy3CRVPickle.getPending (StrategyPickle3CRV.sol#328-330) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": 335,
                    "vulnerability_code": "\tfunction getPickle() public view returns(uint256)\n\n\t{\n\n\t\treturn IERC20(pickletoken).balanceOf(address(this));\n",
                    "message": "Strategy3CRVPickle.getPickle (StrategyPickle3CRV.sol#332-335) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": 342,
                    "vulnerability_code": "    function harvest() public\n\n    {\n\n        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n\n        pledgePickles = 0;\n\n        redelivery();\n",
                    "message": "Strategy3CRVPickle.harvest (StrategyPickle3CRV.sol#337-342) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": 366,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        redeliverynum = value;\n",
                    "message": "Strategy3CRVPickle.setredeliverynum (StrategyPickle3CRV.sol#363-366) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": 371,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
                    "message": "Strategy3CRVPickle.setGovernance (StrategyPickle3CRV.sol#368-371) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": "Detected issues with version pragma in StrategyPickle3CRV.sol:\n\t- pragma solidity^0.5.15 (StrategyPickle3CRV.sol#9): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Low level call in Address.sendValue (StrategyPickle3CRV.sol#80-86):\n\t-(success) = recipient.call.value(amount)() StrategyPickle3CRV.sol#84\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
                    "message": "Low level call in SafeERC20.callOptionalReturn (StrategyPickle3CRV.sol#107-118):\n\t-(success,returndata) = address(token).call(data) StrategyPickle3CRV.sol#111\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function vaults(address) external view returns (address);\n",
                    "message": "Parameter '' of Controller.vaults (StrategyPickle3CRV.sol#122) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.deposit (StrategyPickle3CRV.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.withdraw (StrategyPickle3CRV.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.balanceOf (StrategyPickle3CRV.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Function 'CurveDeposit.claimable_tokens' (StrategyPickle3CRV.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.claimable_tokens (StrategyPickle3CRV.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address) external;\n",
                    "message": "Parameter '' of CurveMinter.mint (StrategyPickle3CRV.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 154,
                    "vulnerability_code": "interface yERC20 {\n\n  function deposit(uint256 _amount) external;\n\n  function withdraw(uint256 _amount) external;\n\n  function getRatio() external view returns (uint);\n",
                    "message": "Contract 'yERC20' (StrategyPickle3CRV.sol#150-154) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": 163,
                    "vulnerability_code": "interface pERC20 {\n\n  function deposit(uint256 ,uint256 ) external;\n\n  function withdraw(uint256 ,uint256 ) external;\n\n  function balanceOf(uint256 ) external view returns(uint);\n\n  function balanceOf(uint256 ,address) external view returns(uint);\n\n  function getRatio() external view returns (uint);\n\n  function pendingPickle(uint256,address) external view returns(uint);\n",
                    "message": "Contract 'pERC20' (StrategyPickle3CRV.sol#156-163) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function deposit(uint256 ,uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.deposit (StrategyPickle3CRV.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function deposit(uint256 ,uint256 ) external;\n",
                    "message": "Parameter '_scope_0' of pERC20.deposit (StrategyPickle3CRV.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdraw(uint256 ,uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.withdraw (StrategyPickle3CRV.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdraw(uint256 ,uint256 ) external;\n",
                    "message": "Parameter '_scope_0' of pERC20.withdraw (StrategyPickle3CRV.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(uint256 ) external view returns(uint);\n",
                    "message": "Parameter '' of pERC20.balanceOf (StrategyPickle3CRV.sol#159) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(uint256 ,address) external view returns(uint);\n",
                    "message": "Parameter '' of pERC20.balanceOf (StrategyPickle3CRV.sol#160) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(uint256 ,address) external view returns(uint);\n",
                    "message": "Parameter '_scope_0' of pERC20.balanceOf (StrategyPickle3CRV.sol#160) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pendingPickle(uint256,address) external view returns(uint);\n",
                    "message": "Parameter '' of pERC20.pendingPickle (StrategyPickle3CRV.sol#162) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pendingPickle(uint256,address) external view returns(uint);\n",
                    "message": "Parameter '_scope_0' of pERC20.pendingPickle (StrategyPickle3CRV.sol#162) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function get_virtual_price() external view returns (uint);\n",
                    "message": "Function 'ICurveFi.get_virtual_price' (StrategyPickle3CRV.sol#166) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": 170,
                    "vulnerability_code": "  function add_liquidity(\n\n    uint256[3] calldata amounts,\n\n    uint256 min_mint_amount\n",
                    "message": "Function 'ICurveFi.add_liquidity' (StrategyPickle3CRV.sol#167-170) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 min_mint_amount\n",
                    "message": "Parameter 'min_mint_amount' of ICurveFi.add_liquidity (StrategyPickle3CRV.sol#169) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction withdraw(uint _amount) external\n",
                    "message": "Parameter '_amount' of Strategy3CRVPickle.withdraw (StrategyPickle3CRV.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": 273,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\n\n        require(msg.sender == controller, \"!controller\");\n\n\t\tuint amount = IERC20(want).balanceOf(address(this));\n\n\t\tif (amount < _amount) {\n\n\t\t\t_withdrawSome(_amount.sub(amount));\n\n\t\t\tamount = IERC20(want).balanceOf(address(this));\n\n\t\t}\n\n\t\treturn amount;\n",
                    "message": "Function 'Strategy3CRVPickle._withdraw' (StrategyPickle3CRV.sol#265-273) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\n",
                    "message": "Parameter '_amount' of Strategy3CRVPickle._withdraw (StrategyPickle3CRV.sol#265) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": 297,
                    "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal {\n\n        uint256 _p3crv = _amount.mul(1e18).div(yERC20(pickleJar).getRatio());\n\n        uint _before = IERC20(pickleJar).balanceOf(address(this));\n\n        if (_before < _p3crv) {\n\n            _p3crv = _p3crv.sub(_before);\n\n            if (_p3crv > pledgePickles)\n\n            {\n\n                _p3crv = pledgePickles;\n\n            }\n\n            pERC20(PICKLE).withdraw(pickleindex,_p3crv);\n\n            pledgePickles = pledgePickles.sub(_p3crv);\n\n            _p3crv = IERC20(pickleJar).balanceOf(address(this));\n\n        }\n\n        yERC20(pickleJar).withdraw(_p3crv);\n",
                    "message": "Function 'Strategy3CRVPickle._withdrawSome' (StrategyPickle3CRV.sol#283-297) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdrawSome(uint256 _amount) internal {\n",
                    "message": "Parameter '_amount' of Strategy3CRVPickle._withdrawSome (StrategyPickle3CRV.sol#283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": "Parameter '_governance' of Strategy3CRVPickle.setGovernance (StrategyPickle3CRV.sol#368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": "Parameter '_controller' of Strategy3CRVPickle.setController (StrategyPickle3CRV.sol#373) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
                    "message": "Constant 'Strategy3CRVPickle.unirouter' (StrategyPickle3CRV.sol#192) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": "Constant 'Strategy3CRVPickle.weth' (StrategyPickle3CRV.sol#193) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
                    "message": "Constant 'Strategy3CRVPickle.bt' (StrategyPickle3CRV.sol#194) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public ydai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n",
                    "message": "Constant 'Strategy3CRVPickle.ydai' (StrategyPickle3CRV.sol#196) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public yusdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n",
                    "message": "Constant 'Strategy3CRVPickle.yusdc' (StrategyPickle3CRV.sol#197) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public yusdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n",
                    "message": "Constant 'Strategy3CRVPickle.yusdt' (StrategyPickle3CRV.sol#198) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);  //3crv\n",
                    "message": "Constant 'Strategy3CRVPickle.want' (StrategyPickle3CRV.sol#200) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public curvefi = address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\n",
                    "message": "Constant 'Strategy3CRVPickle.curvefi' (StrategyPickle3CRV.sol#201) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pickleJar = address(0x1BB74b5DdC1f4fC91D6f9E7906cf68bc93538e33);\n",
                    "message": "Constant 'Strategy3CRVPickle.pickleJar' (StrategyPickle3CRV.sol#202) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public crvPla = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\n",
                    "message": "Constant 'Strategy3CRVPickle.crvPla' (StrategyPickle3CRV.sol#205) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pickletoken = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\n",
                    "message": "Constant 'Strategy3CRVPickle.pickletoken' (StrategyPickle3CRV.sol#206) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public ydai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public yusdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public yusdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);  //3crv\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public curvefi = address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pickleJar = address(0x1BB74b5DdC1f4fC91D6f9E7906cf68bc93538e33);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public PICKLE = address(0xbD17B1ce622d73bD438b9E658acA5996dc394b0d);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public crvPla = address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pickletoken = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 pickleindex = 14;\n",
                    "message": null
                }
            ]
        }
    },
    "bt-finance-6300bc1271b73a1755fae02594d25fdf6fa39a9c/contracts/strategies/V1.2/strategyUSDTUNIFarm.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        doApprove(); \n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");                     \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == controller, \"!controller\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t\trequire(_fweth <= IERC20(pool).balanceOf(address(this)),\"Insufficient Balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");                      \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_weth > 0 && _token > 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(weth).safeApprove(unirouter, 0);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(weth).safeApprove(unirouter, _weth);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(token).safeApprove(unirouter, 0);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(token).safeApprove(unirouter, _token);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            UniswapRouter(unirouter).addLiquidity(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                weth,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                token,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        UniswapRouter(unirouter).swapExactTokensForTokens(\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _amount,\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            0,\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            path,\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address(this),\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            now.add(1800)\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_49"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract (strategyUSDTUNIFarm.sol#70-76) is declared view but contains assembly code\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": 221,
                    "vulnerability_code": "\tfunction doApprove () public{\n\n        IERC20(Farm).approve(unirouter, 0);\n\n        IERC20(Farm).approve(unirouter, uint(-1));\n\n    }\n\n    \n",
                    "message": "StrategyUSDTUNIFarm.doApprove (strategyUSDTUNIFarm.sol#216-221) does not use the value returned by external calls:\n\t-IERC20(Farm).approve(unirouter,0) (strategyUSDTUNIFarm.sol#217-218)\n\t-IERC20(Farm).approve(unirouter,uint256(- 1)) (strategyUSDTUNIFarm.sol#218-221)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "    function _redelivery() internal\n\n    {\n\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\n\n        if (_weth > 0) {\n\n            _swapUniswap(weth, token, _weth.div(2));\n\n        }\n\n\n\n        // Adds in liquidity for ETH/DAI\n\n        _weth = IERC20(weth).balanceOf(address(this));\n\n        uint256 _token = IERC20(token).balanceOf(address(this));\n\n        if (_weth > 0 && _token > 0) {\n\n            IERC20(weth).safeApprove(unirouter, 0);\n\n            IERC20(weth).safeApprove(unirouter, _weth);\n\n\n\n            IERC20(token).safeApprove(unirouter, 0);\n\n            IERC20(token).safeApprove(unirouter, _token);\n\n\n\n            UniswapRouter(unirouter).addLiquidity(\n\n                weth,\n\n                token,\n\n                _weth,\n\n                _token,\n\n                0,\n\n                0,\n\n                address(this),\n\n                now + 180\n\n            );\n\n        }\n\n    }\n\n    \n",
                    "message": "StrategyUSDTUNIFarm._redelivery (strategyUSDTUNIFarm.sol#335-365) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).addLiquidity(weth,token,_weth,_token,0,0,address(this),now + 180) (strategyUSDTUNIFarm.sol#352-364)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": 398,
                    "vulnerability_code": "     function _swapUniswap(\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal {\n\n        require(_to != address(0));\n\n\n\n        // Swap with uniswap\n\n        IERC20(_from).safeApprove(unirouter, 0);\n\n        IERC20(_from).safeApprove(unirouter, _amount);\n\n\n\n        address[] memory path;\n\n\n\n        if (_from == weth || _to == weth) {\n\n            path = new address[](2);\n\n            path[0] = _from;\n\n            path[1] = _to;\n\n        } else {\n\n            path = new address[](3);\n\n            path[0] = _from;\n\n            path[1] = weth;\n\n            path[2] = _to;\n\n        }\n\n\n\n        UniswapRouter(unirouter).swapExactTokensForTokens(\n\n            _amount,\n\n            0,\n\n            path,\n\n            address(this),\n\n            now.add(1800)\n\n        );\n\n    }\n\n    \n",
                    "message": "StrategyUSDTUNIFarm._swapUniswap (strategyUSDTUNIFarm.sol#365-398) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_amount,0,path,address(this),now.add(1800)) (strategyUSDTUNIFarm.sol#389-398)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract uses assembly (strategyUSDTUNIFarm.sol#70-76)\n\t- strategyUSDTUNIFarm.sol#74\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": 310,
                    "vulnerability_code": "    function getPending() public view returns (uint256) {\n\n        return pERC20(pool).earned(address(this));\n\n    }\n\n\t\n",
                    "message": "StrategyUSDTUNIFarm.getPending (strategyUSDTUNIFarm.sol#306-310) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "\tfunction getFarm() public view returns(uint256)\n\n\t{\n\n\t\treturn IERC20(Farm).balanceOf(address(this));\n\n\t}\n\n    \n",
                    "message": "StrategyUSDTUNIFarm.getFarm (strategyUSDTUNIFarm.sol#310-315) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": 321,
                    "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(pool).getReward();\n\n        redelivery();    \n\n    }\n\n    \n",
                    "message": "StrategyUSDTUNIFarm.harvest (strategyUSDTUNIFarm.sol#315-321) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": 404,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n\n    {\n\n        require(msg.sender == governance, \"!governance\");\n\n        redeliverynum = value;\n\n    }\n\n\n",
                    "message": "StrategyUSDTUNIFarm.setredeliverynum (strategyUSDTUNIFarm.sol#398-404) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": 409,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n\n    }\n\n\n",
                    "message": "StrategyUSDTUNIFarm.setGovernance (strategyUSDTUNIFarm.sol#404-409) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": "Detected issues with version pragma in strategyUSDTUNIFarm.sol:\n\t- pragma solidity^0.5.15 (strategyUSDTUNIFarm.sol#9): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Low level call in Address.sendValue (strategyUSDTUNIFarm.sol#80-86):\n\t-(success) = recipient.call.value(amount)() strategyUSDTUNIFarm.sol#84\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
                    "message": "Low level call in SafeERC20.callOptionalReturn (strategyUSDTUNIFarm.sol#107-118):\n\t-(success,returndata) = address(token).call(data) strategyUSDTUNIFarm.sol#111\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function vaults(address) external view returns (address);\n",
                    "message": "Parameter '' of Controller.vaults (strategyUSDTUNIFarm.sol#122) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.deposit (strategyUSDTUNIFarm.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.withdraw (strategyUSDTUNIFarm.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.balanceOf (strategyUSDTUNIFarm.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Function 'CurveDeposit.claimable_tokens' (strategyUSDTUNIFarm.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.claimable_tokens (strategyUSDTUNIFarm.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address) external;\n",
                    "message": "Parameter '' of CurveMinter.mint (strategyUSDTUNIFarm.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 155,
                    "vulnerability_code": "interface yERC20 {\n\n  function deposit(uint256 _amount) external;\n\n  function depositAll(uint256[] calldata,address[] calldata)external;\n\n  function withdraw(uint256 _amount) external;\n\n  function getPricePerFullShare() external view returns (uint);\n",
                    "message": "Contract 'yERC20' (strategyUSDTUNIFarm.sol#150-155) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function depositAll(uint256[] calldata,address[] calldata)external;\n",
                    "message": "Parameter '' of yERC20.depositAll (strategyUSDTUNIFarm.sol#152) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function depositAll(uint256[] calldata,address[] calldata)external;\n",
                    "message": "Parameter '_scope_0' of yERC20.depositAll (strategyUSDTUNIFarm.sol#152) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 163,
                    "vulnerability_code": "interface pERC20 {\n\n  function stake(uint256 ) external;\n\n  function withdraw(uint256 ) external;\n\n  function balanceOf(address) external view returns(uint);\n\n  function earned(address) external view returns (uint);\n\n  function getReward()external;\n",
                    "message": "Contract 'pERC20' (strategyUSDTUNIFarm.sol#157-163) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function stake(uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.stake (strategyUSDTUNIFarm.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdraw(uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.withdraw (strategyUSDTUNIFarm.sol#159) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address) external view returns(uint);\n",
                    "message": "Parameter '' of pERC20.balanceOf (strategyUSDTUNIFarm.sol#160) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function earned(address) external view returns (uint);\n",
                    "message": "Parameter '' of pERC20.earned (strategyUSDTUNIFarm.sol#161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": 248,
                    "vulnerability_code": "    function withdraw(uint _amount) external\n\n\t{\n",
                    "message": "Parameter '_amount' of StrategyUSDTUNIFarm.withdraw (strategyUSDTUNIFarm.sol#246-248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n\n        require(msg.sender == controller, \"!controller\");\n\n\t\tuint amount = IERC20(want).balanceOf(address(this));\t\n\n\t\tif (amount < _amount) {\n\n\t\t\t_withdrawSome(_amount.sub(amount));\n\n\t\t\tamount = IERC20(want).balanceOf(address(this));\n\n\t\t}\t\n\n\t\treturn amount; \n\n    }\n\n    \n",
                    "message": "Function 'StrategyUSDTUNIFarm._withdraw' (strategyUSDTUNIFarm.sol#259-269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n",
                    "message": "Parameter '_amount' of StrategyUSDTUNIFarm._withdraw (strategyUSDTUNIFarm.sol#259) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n\n    {\n\n        uint256 _fweth = _amount.mul(1e18).div(yERC20(fUNI).getPricePerFullShare());\n\n\t\tuint _before = IERC20(fUNI).balanceOf(address(this));\n\n\t\tif (_before < _fweth) {\n\n\t\t\t_fweth = _fweth.sub(_before);   \n\n\t\t\trequire(_fweth <= IERC20(pool).balanceOf(address(this)),\"Insufficient Balance\");\n\n\t\t\tpERC20(pool).withdraw(_fweth);\n\n\t\t}\n\n\t\t\n\n\t\t_fweth = IERC20(fUNI).balanceOf(address(this));\n\n\t\tyERC20(fUNI).withdraw(_fweth);\n\n    }\n\n\t\n",
                    "message": "Function 'StrategyUSDTUNIFarm._withdrawSome' (strategyUSDTUNIFarm.sol#269-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": 271,
                    "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n\n    {\n",
                    "message": "Parameter '_amount' of StrategyUSDTUNIFarm._withdrawSome (strategyUSDTUNIFarm.sol#269-271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "    function _redelivery() internal\n\n    {\n\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\n\n        if (_weth > 0) {\n\n            _swapUniswap(weth, token, _weth.div(2));\n\n        }\n\n\n\n        // Adds in liquidity for ETH/DAI\n\n        _weth = IERC20(weth).balanceOf(address(this));\n\n        uint256 _token = IERC20(token).balanceOf(address(this));\n\n        if (_weth > 0 && _token > 0) {\n\n            IERC20(weth).safeApprove(unirouter, 0);\n\n            IERC20(weth).safeApprove(unirouter, _weth);\n\n\n\n            IERC20(token).safeApprove(unirouter, 0);\n\n            IERC20(token).safeApprove(unirouter, _token);\n\n\n\n            UniswapRouter(unirouter).addLiquidity(\n\n                weth,\n\n                token,\n\n                _weth,\n\n                _token,\n\n                0,\n\n                0,\n\n                address(this),\n\n                now + 180\n\n            );\n\n        }\n\n    }\n\n    \n",
                    "message": "Function 'StrategyUSDTUNIFarm._redelivery' (strategyUSDTUNIFarm.sol#335-365) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": 398,
                    "vulnerability_code": "     function _swapUniswap(\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal {\n\n        require(_to != address(0));\n\n\n\n        // Swap with uniswap\n\n        IERC20(_from).safeApprove(unirouter, 0);\n\n        IERC20(_from).safeApprove(unirouter, _amount);\n\n\n\n        address[] memory path;\n\n\n\n        if (_from == weth || _to == weth) {\n\n            path = new address[](2);\n\n            path[0] = _from;\n\n            path[1] = _to;\n\n        } else {\n\n            path = new address[](3);\n\n            path[0] = _from;\n\n            path[1] = weth;\n\n            path[2] = _to;\n\n        }\n\n\n\n        UniswapRouter(unirouter).swapExactTokensForTokens(\n\n            _amount,\n\n            0,\n\n            path,\n\n            address(this),\n\n            now.add(1800)\n\n        );\n\n    }\n\n    \n",
                    "message": "Function 'StrategyUSDTUNIFarm._swapUniswap' (strategyUSDTUNIFarm.sol#365-398) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_from' of StrategyUSDTUNIFarm._swapUniswap (strategyUSDTUNIFarm.sol#367) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_to' of StrategyUSDTUNIFarm._swapUniswap (strategyUSDTUNIFarm.sol#368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 370,
                    "vulnerability_code": "    ) internal {\n",
                    "message": "Parameter '_amount' of StrategyUSDTUNIFarm._swapUniswap (strategyUSDTUNIFarm.sol#369-370) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": 405,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": "Parameter '_governance' of StrategyUSDTUNIFarm.setGovernance (strategyUSDTUNIFarm.sol#404-405) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": "Parameter '_controller' of StrategyUSDTUNIFarm.setController (strategyUSDTUNIFarm.sol#409-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);    //Uniswap\u4ea4\u6613\u5408\u7ea6\n",
                    "message": "Constant 'StrategyUSDTUNIFarm.unirouter' (strategyUSDTUNIFarm.sol#192) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);  //swap\u7528\u7684\u4e2d\u95f4\u5e01 WETH\n",
                    "message": "Constant 'StrategyUSDTUNIFarm.weth' (strategyUSDTUNIFarm.sol#193) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": 196,
                    "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n\n\t\n",
                    "message": "Constant 'StrategyUSDTUNIFarm.bt' (strategyUSDTUNIFarm.sol#194-196) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "    address constant public want = address(0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852);  //ETH/token\n\n\n",
                    "message": "Constant 'StrategyUSDTUNIFarm.want' (strategyUSDTUNIFarm.sol#196-198) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 199,
                    "vulnerability_code": "    address constant public token = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\t//usdt\n",
                    "message": "Constant 'StrategyUSDTUNIFarm.token' (strategyUSDTUNIFarm.sol#198-199) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": 200,
                    "vulnerability_code": "    address constant public Harvest = address(0xF8ce90c2710713552fb564869694B2505Bfc0846);\n",
                    "message": "Constant 'StrategyUSDTUNIFarm.Harvest' (strategyUSDTUNIFarm.sol#199-200) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": 201,
                    "vulnerability_code": "\taddress constant public fUNI = address(0x7DDc3ffF0612E75Ea5ddC0d6Bd4e268f70362Cff);\n",
                    "message": "Constant 'StrategyUSDTUNIFarm.fUNI' (strategyUSDTUNIFarm.sol#200-201) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": 203,
                    "vulnerability_code": "\taddress constant public pool = address(0x75071F2653fBC902EBaff908d4c68712a5d1C960);\n\n\n",
                    "message": "Constant 'StrategyUSDTUNIFarm.pool' (strategyUSDTUNIFarm.sol#201-203) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": 205,
                    "vulnerability_code": "    address constant public Farm = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\n\n\n",
                    "message": "Constant 'StrategyUSDTUNIFarm.Farm' (strategyUSDTUNIFarm.sol#203-205) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);    //Uniswap\u4ea4\u6613\u5408\u7ea6\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);  //swap\u7528\u7684\u4e2d\u95f4\u5e01 WETH\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852);  //ETH/token\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public token = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\t//usdt\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public Harvest = address(0xF8ce90c2710713552fb564869694B2505Bfc0846);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public fUNI = address(0x7DDc3ffF0612E75Ea5ddC0d6Bd4e268f70362Cff);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public pool = address(0x75071F2653fBC902EBaff908d4c68712a5d1C960);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public Farm = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint amountA, uint amountB, uint liquidity);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint[] memory amounts);\n",
                    "message": null
                }
            ]
        }
    },
    "bt-finance-6300bc1271b73a1755fae02594d25fdf6fa39a9c/contracts/strategies/V1.2/StrategyDAIUNIFarm.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        doApprove(); \n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");                     \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == controller, \"!controller\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t\trequire(_fweth <= IERC20(pool).balanceOf(address(this)),\"Insufficient Balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");                      \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_weth > 0 && _token > 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(weth).safeApprove(unirouter, 0);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(weth).safeApprove(unirouter, _weth);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(token).safeApprove(unirouter, 0);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(token).safeApprove(unirouter, _token);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            UniswapRouter(unirouter).addLiquidity(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                weth,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                token,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        UniswapRouter(unirouter).swapExactTokensForTokens(\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _amount,\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            0,\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            path,\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address(this),\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            now.add(1800)\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_49"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract (StrategyDAIUNIFarm.sol#70-76) is declared view but contains assembly code\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": 219,
                    "vulnerability_code": "\tfunction doApprove () public{\n\n        IERC20(Farm).approve(unirouter, 0);\n\n        IERC20(Farm).approve(unirouter, uint(-1));\n",
                    "message": "StrategyDAIUNIFarm.doApprove (StrategyDAIUNIFarm.sol#216-219) does not use the value returned by external calls:\n\t-IERC20(Farm).approve(unirouter,0) (StrategyDAIUNIFarm.sol#217)\n\t-IERC20(Farm).approve(unirouter,uint256(- 1)) (StrategyDAIUNIFarm.sol#218)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": 363,
                    "vulnerability_code": "    function _redelivery() internal\n\n    {\n\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\n\n        if (_weth > 0) {\n\n            _swapUniswap(weth, token, _weth.div(2));\n\n        }\n\n\n\n        // Adds in liquidity for ETH/DAI\n\n        _weth = IERC20(weth).balanceOf(address(this));\n\n        uint256 _token = IERC20(token).balanceOf(address(this));\n\n        if (_weth > 0 && _token > 0) {\n\n            IERC20(weth).safeApprove(unirouter, 0);\n\n            IERC20(weth).safeApprove(unirouter, _weth);\n\n\n\n            IERC20(token).safeApprove(unirouter, 0);\n\n            IERC20(token).safeApprove(unirouter, _token);\n\n\n\n            UniswapRouter(unirouter).addLiquidity(\n\n                weth,\n\n                token,\n\n                _weth,\n\n                _token,\n\n                0,\n\n                0,\n\n                address(this),\n\n                now + 180\n\n            );\n\n        }\n",
                    "message": "StrategyDAIUNIFarm._redelivery (StrategyDAIUNIFarm.sol#335-363) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).addLiquidity(weth,token,_weth,_token,0,0,address(this),now + 180) (StrategyDAIUNIFarm.sol#352-361)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "     function _swapUniswap(\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal {\n\n        require(_to != address(0));\n\n\n\n        // Swap with uniswap\n\n        IERC20(_from).safeApprove(unirouter, 0);\n\n        IERC20(_from).safeApprove(unirouter, _amount);\n\n\n\n        address[] memory path;\n\n\n\n        if (_from == weth || _to == weth) {\n\n            path = new address[](2);\n\n            path[0] = _from;\n\n            path[1] = _to;\n\n        } else {\n\n            path = new address[](3);\n\n            path[0] = _from;\n\n            path[1] = weth;\n\n            path[2] = _to;\n\n        }\n\n\n\n        UniswapRouter(unirouter).swapExactTokensForTokens(\n\n            _amount,\n\n            0,\n\n            path,\n\n            address(this),\n\n            now.add(1800)\n\n        );\n",
                    "message": "StrategyDAIUNIFarm._swapUniswap (StrategyDAIUNIFarm.sol#365-396) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_amount,0,path,address(this),now.add(1800)) (StrategyDAIUNIFarm.sol#389-395)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract uses assembly (StrategyDAIUNIFarm.sol#70-76)\n\t- StrategyDAIUNIFarm.sol#74\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 309,
                    "vulnerability_code": "    function getPending() public view returns (uint256) {\n\n        return pERC20(pool).earned(address(this));\n",
                    "message": "StrategyDAIUNIFarm.getPending (StrategyDAIUNIFarm.sol#307-309) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": 314,
                    "vulnerability_code": "\tfunction getFarm() public view returns(uint256)\n\n\t{\n\n\t\treturn IERC20(Farm).balanceOf(address(this));\n",
                    "message": "StrategyDAIUNIFarm.getFarm (StrategyDAIUNIFarm.sol#311-314) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(pool).getReward();\n\n        redelivery();    \n",
                    "message": "StrategyDAIUNIFarm.harvest (StrategyDAIUNIFarm.sol#316-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": 402,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n\n    {\n\n        require(msg.sender == governance, \"!governance\");\n\n        redeliverynum = value;\n",
                    "message": "StrategyDAIUNIFarm.setredeliverynum (StrategyDAIUNIFarm.sol#398-402) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": 407,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
                    "message": "StrategyDAIUNIFarm.setGovernance (StrategyDAIUNIFarm.sol#404-407) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": "Detected issues with version pragma in StrategyDAIUNIFarm.sol:\n\t- pragma solidity^0.5.15 (StrategyDAIUNIFarm.sol#9): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Low level call in Address.sendValue (StrategyDAIUNIFarm.sol#80-86):\n\t-(success) = recipient.call.value(amount)() StrategyDAIUNIFarm.sol#84\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
                    "message": "Low level call in SafeERC20.callOptionalReturn (StrategyDAIUNIFarm.sol#107-118):\n\t-(success,returndata) = address(token).call(data) StrategyDAIUNIFarm.sol#111\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function vaults(address) external view returns (address);\n",
                    "message": "Parameter '' of Controller.vaults (StrategyDAIUNIFarm.sol#122) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.deposit (StrategyDAIUNIFarm.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.withdraw (StrategyDAIUNIFarm.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.balanceOf (StrategyDAIUNIFarm.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Function 'CurveDeposit.claimable_tokens' (StrategyDAIUNIFarm.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.claimable_tokens (StrategyDAIUNIFarm.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address) external;\n",
                    "message": "Parameter '' of CurveMinter.mint (StrategyDAIUNIFarm.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 155,
                    "vulnerability_code": "interface yERC20 {\n\n  function deposit(uint256 _amount) external;\n\n  function depositAll(uint256[] calldata,address[] calldata)external;\n\n  function withdraw(uint256 _amount) external;\n\n  function getPricePerFullShare() external view returns (uint);\n",
                    "message": "Contract 'yERC20' (StrategyDAIUNIFarm.sol#150-155) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function depositAll(uint256[] calldata,address[] calldata)external;\n",
                    "message": "Parameter '' of yERC20.depositAll (StrategyDAIUNIFarm.sol#152) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function depositAll(uint256[] calldata,address[] calldata)external;\n",
                    "message": "Parameter '_scope_0' of yERC20.depositAll (StrategyDAIUNIFarm.sol#152) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 163,
                    "vulnerability_code": "interface pERC20 {\n\n  function stake(uint256 ) external;\n\n  function withdraw(uint256 ) external;\n\n  function balanceOf(address) external view returns(uint);\n\n  function earned(address) external view returns (uint);\n\n  function getReward()external;\n",
                    "message": "Contract 'pERC20' (StrategyDAIUNIFarm.sol#157-163) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function stake(uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.stake (StrategyDAIUNIFarm.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdraw(uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.withdraw (StrategyDAIUNIFarm.sol#159) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address) external view returns(uint);\n",
                    "message": "Parameter '' of pERC20.balanceOf (StrategyDAIUNIFarm.sol#160) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function earned(address) external view returns (uint);\n",
                    "message": "Parameter '' of pERC20.earned (StrategyDAIUNIFarm.sol#161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint _amount) external\n",
                    "message": "Parameter '_amount' of StrategyDAIUNIFarm.withdraw (StrategyDAIUNIFarm.sol#246) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 267,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n\n        require(msg.sender == controller, \"!controller\");\n\n\t\tuint amount = IERC20(want).balanceOf(address(this));\t\n\n\t\tif (amount < _amount) {\n\n\t\t\t_withdrawSome(_amount.sub(amount));\n\n\t\t\tamount = IERC20(want).balanceOf(address(this));\n\n\t\t}\t\n\n\t\treturn amount; \n",
                    "message": "Function 'StrategyDAIUNIFarm._withdraw' (StrategyDAIUNIFarm.sol#259-267) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n",
                    "message": "Parameter '_amount' of StrategyDAIUNIFarm._withdraw (StrategyDAIUNIFarm.sol#259) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n\n    {\n\n        uint256 _fweth = _amount.mul(1e18).div(yERC20(fUNI).getPricePerFullShare());\n\n\t\tuint _before = IERC20(fUNI).balanceOf(address(this));\n\n\t\tif (_before < _fweth) {\n\n\t\t\t_fweth = _fweth.sub(_before);   \n\n\t\t\trequire(_fweth <= IERC20(pool).balanceOf(address(this)),\"Insufficient Balance\");\n\n\t\t\tpERC20(pool).withdraw(_fweth);\n\n\t\t}\n\n\t\t\n\n\t\t_fweth = IERC20(fUNI).balanceOf(address(this));\n\n\t\tyERC20(fUNI).withdraw(_fweth);\n",
                    "message": "Function 'StrategyDAIUNIFarm._withdrawSome' (StrategyDAIUNIFarm.sol#269-281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n",
                    "message": "Parameter '_amount' of StrategyDAIUNIFarm._withdrawSome (StrategyDAIUNIFarm.sol#269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": 363,
                    "vulnerability_code": "    function _redelivery() internal\n\n    {\n\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\n\n        if (_weth > 0) {\n\n            _swapUniswap(weth, token, _weth.div(2));\n\n        }\n\n\n\n        // Adds in liquidity for ETH/DAI\n\n        _weth = IERC20(weth).balanceOf(address(this));\n\n        uint256 _token = IERC20(token).balanceOf(address(this));\n\n        if (_weth > 0 && _token > 0) {\n\n            IERC20(weth).safeApprove(unirouter, 0);\n\n            IERC20(weth).safeApprove(unirouter, _weth);\n\n\n\n            IERC20(token).safeApprove(unirouter, 0);\n\n            IERC20(token).safeApprove(unirouter, _token);\n\n\n\n            UniswapRouter(unirouter).addLiquidity(\n\n                weth,\n\n                token,\n\n                _weth,\n\n                _token,\n\n                0,\n\n                0,\n\n                address(this),\n\n                now + 180\n\n            );\n\n        }\n",
                    "message": "Function 'StrategyDAIUNIFarm._redelivery' (StrategyDAIUNIFarm.sol#335-363) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "     function _swapUniswap(\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal {\n\n        require(_to != address(0));\n\n\n\n        // Swap with uniswap\n\n        IERC20(_from).safeApprove(unirouter, 0);\n\n        IERC20(_from).safeApprove(unirouter, _amount);\n\n\n\n        address[] memory path;\n\n\n\n        if (_from == weth || _to == weth) {\n\n            path = new address[](2);\n\n            path[0] = _from;\n\n            path[1] = _to;\n\n        } else {\n\n            path = new address[](3);\n\n            path[0] = _from;\n\n            path[1] = weth;\n\n            path[2] = _to;\n\n        }\n\n\n\n        UniswapRouter(unirouter).swapExactTokensForTokens(\n\n            _amount,\n\n            0,\n\n            path,\n\n            address(this),\n\n            now.add(1800)\n\n        );\n",
                    "message": "Function 'StrategyDAIUNIFarm._swapUniswap' (StrategyDAIUNIFarm.sol#365-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of StrategyDAIUNIFarm._swapUniswap (StrategyDAIUNIFarm.sol#366) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of StrategyDAIUNIFarm._swapUniswap (StrategyDAIUNIFarm.sol#367) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of StrategyDAIUNIFarm._swapUniswap (StrategyDAIUNIFarm.sol#368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": "Parameter '_governance' of StrategyDAIUNIFarm.setGovernance (StrategyDAIUNIFarm.sol#404) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": "Parameter '_controller' of StrategyDAIUNIFarm.setController (StrategyDAIUNIFarm.sol#409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
                    "message": "Constant 'StrategyDAIUNIFarm.unirouter' (StrategyDAIUNIFarm.sol#192) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": "Constant 'StrategyDAIUNIFarm.weth' (StrategyDAIUNIFarm.sol#193) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0xbF08E77B5709196F4D15a7F30db5Be8F31143d9A);\n",
                    "message": "Constant 'StrategyDAIUNIFarm.bt' (StrategyDAIUNIFarm.sol#194) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11);  //ETH/token\n",
                    "message": "Constant 'StrategyDAIUNIFarm.want' (StrategyDAIUNIFarm.sol#196) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public token = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\t//DAI\n",
                    "message": "Constant 'StrategyDAIUNIFarm.token' (StrategyDAIUNIFarm.sol#198) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public Harvest = address(0xF8ce90c2710713552fb564869694B2505Bfc0846);\n",
                    "message": "Constant 'StrategyDAIUNIFarm.Harvest' (StrategyDAIUNIFarm.sol#199) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public fUNI = address(0x307E2752e8b8a9C29005001Be66B1c012CA9CDB7);\n",
                    "message": "Constant 'StrategyDAIUNIFarm.fUNI' (StrategyDAIUNIFarm.sol#200) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public pool = address(0x7aeb36e22e60397098C2a5C51f0A5fB06e7b859c);\n",
                    "message": "Constant 'StrategyDAIUNIFarm.pool' (StrategyDAIUNIFarm.sol#201) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public Farm = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\n",
                    "message": "Constant 'StrategyDAIUNIFarm.Farm' (StrategyDAIUNIFarm.sol#203) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0xbF08E77B5709196F4D15a7F30db5Be8F31143d9A);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11);  //ETH/token\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public token = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\t//DAI\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public Harvest = address(0xF8ce90c2710713552fb564869694B2505Bfc0846);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public fUNI = address(0x307E2752e8b8a9C29005001Be66B1c012CA9CDB7);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public pool = address(0x7aeb36e22e60397098C2a5C51f0A5fB06e7b859c);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public Farm = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint amountA, uint amountB, uint liquidity);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint[] memory amounts);\n",
                    "message": null
                }
            ]
        }
    },
    "bt-finance-6300bc1271b73a1755fae02594d25fdf6fa39a9c/contracts/strategies/V1.2/StrategyDAISLPFarm.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        doApprove(); \n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 270,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");                     \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == controller, \"!controller\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t\trequire(_fweth <= IERC20(pool).balanceOf(address(this)),\"Insufficient Balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");                      \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        UniswapRouter(unirouter).swapExactTokensForTokens(\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _amount,\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            0,\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            path,\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address(this),\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            now.add(1800)\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_52"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract (StrategyDAISLPFarm.sol#70-76) is declared view but contains assembly code\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": 235,
                    "vulnerability_code": "\tfunction doApprove () public{\n\n        IERC20(Farm).approve(unirouter, 0);\n\n        IERC20(Farm).approve(unirouter, uint(-1));\n",
                    "message": "StrategyDATSLPFarm.doApprove (StrategyDAISLPFarm.sol#232-235) does not use the value returned by external calls:\n\t-IERC20(Farm).approve(unirouter,0) (StrategyDAISLPFarm.sol#233)\n\t-IERC20(Farm).approve(unirouter,uint256(- 1)) (StrategyDAISLPFarm.sol#234)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": 363,
                    "vulnerability_code": "    function _redelivery() internal\n\n    {\n\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\n\n        if (_weth > 0) {\n\n            ZAPPER(zapper).ZapIn(\n\n                weth,\n\n                pair,\n\n                _weth,\n\n                0,\n\n                swap,\n\n                swap,\n\n                new bytes(0));\n\n        }\n",
                    "message": "StrategyDATSLPFarm._redelivery (StrategyDAISLPFarm.sol#350-363) does not use the value returned by external calls:\n\t-ZAPPER(zapper).ZapIn(weth,pair,_weth,0,swap,swap,new bytes(0)) (StrategyDAISLPFarm.sol#354-361)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "     function _swapUniswap(\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal {\n\n        require(_to != address(0));\n\n\n\n        // Swap with uniswap\n\n        IERC20(_from).safeApprove(unirouter, 0);\n\n        IERC20(_from).safeApprove(unirouter, _amount);\n\n\n\n        address[] memory path;\n\n\n\n        if (_from == weth || _to == weth) {\n\n            path = new address[](2);\n\n            path[0] = _from;\n\n            path[1] = _to;\n\n        } else {\n\n            path = new address[](3);\n\n            path[0] = _from;\n\n            path[1] = weth;\n\n            path[2] = _to;\n\n        }\n\n\n\n        UniswapRouter(unirouter).swapExactTokensForTokens(\n\n            _amount,\n\n            0,\n\n            path,\n\n            address(this),\n\n            now.add(1800)\n\n        );\n",
                    "message": "StrategyDATSLPFarm._swapUniswap (StrategyDAISLPFarm.sol#365-396) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_amount,0,path,address(this),now.add(1800)) (StrategyDAISLPFarm.sol#389-395)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract uses assembly (StrategyDAISLPFarm.sol#70-76)\n\t- StrategyDAISLPFarm.sol#74\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "    function getPending() public view returns (uint256) {\n\n        return pERC20(pool).earned(address(this));\n",
                    "message": "StrategyDATSLPFarm.getPending (StrategyDAISLPFarm.sol#322-324) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": 329,
                    "vulnerability_code": "\tfunction getFarm() public view returns(uint256)\n\n\t{\n\n\t\treturn IERC20(Farm).balanceOf(address(this));\n",
                    "message": "StrategyDATSLPFarm.getFarm (StrategyDAISLPFarm.sol#326-329) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": 335,
                    "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(pool).getReward();\n\n        redelivery();    \n",
                    "message": "StrategyDATSLPFarm.harvest (StrategyDAISLPFarm.sol#331-335) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": 402,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n\n    {\n\n        require(msg.sender == governance, \"!governance\");\n\n        redeliverynum = value;\n",
                    "message": "StrategyDATSLPFarm.setredeliverynum (StrategyDAISLPFarm.sol#398-402) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": 407,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
                    "message": "StrategyDATSLPFarm.setGovernance (StrategyDAISLPFarm.sol#404-407) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": "Detected issues with version pragma in StrategyDAISLPFarm.sol:\n\t- pragma solidity^0.5.15 (StrategyDAISLPFarm.sol#9): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Low level call in Address.sendValue (StrategyDAISLPFarm.sol#80-86):\n\t-(success) = recipient.call.value(amount)() StrategyDAISLPFarm.sol#84\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
                    "message": "Low level call in SafeERC20.callOptionalReturn (StrategyDAISLPFarm.sol#107-118):\n\t-(success,returndata) = address(token).call(data) StrategyDAISLPFarm.sol#111\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function vaults(address) external view returns (address);\n",
                    "message": "Parameter '' of Controller.vaults (StrategyDAISLPFarm.sol#122) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.deposit (StrategyDAISLPFarm.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.withdraw (StrategyDAISLPFarm.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.balanceOf (StrategyDAISLPFarm.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Function 'CurveDeposit.claimable_tokens' (StrategyDAISLPFarm.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.claimable_tokens (StrategyDAISLPFarm.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address) external;\n",
                    "message": "Parameter '' of CurveMinter.mint (StrategyDAISLPFarm.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 155,
                    "vulnerability_code": "interface yERC20 {\n\n  function deposit(uint256 _amount) external;\n\n  function depositAll(uint256[] calldata,address[] calldata)external;\n\n  function withdraw(uint256 _amount) external;\n\n  function getPricePerFullShare() external view returns (uint);\n",
                    "message": "Contract 'yERC20' (StrategyDAISLPFarm.sol#150-155) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function depositAll(uint256[] calldata,address[] calldata)external;\n",
                    "message": "Parameter '' of yERC20.depositAll (StrategyDAISLPFarm.sol#152) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function depositAll(uint256[] calldata,address[] calldata)external;\n",
                    "message": "Parameter '_scope_0' of yERC20.depositAll (StrategyDAISLPFarm.sol#152) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 163,
                    "vulnerability_code": "interface pERC20 {\n\n  function stake(uint256 ) external;\n\n  function withdraw(uint256 ) external;\n\n  function balanceOf(address) external view returns(uint);\n\n  function earned(address) external view returns (uint);\n\n  function getReward()external;\n",
                    "message": "Contract 'pERC20' (StrategyDAISLPFarm.sol#157-163) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function stake(uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.stake (StrategyDAISLPFarm.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdraw(uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.withdraw (StrategyDAISLPFarm.sol#159) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address) external view returns(uint);\n",
                    "message": "Parameter '' of pERC20.balanceOf (StrategyDAISLPFarm.sol#160) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function earned(address) external view returns (uint);\n",
                    "message": "Parameter '' of pERC20.earned (StrategyDAISLPFarm.sol#161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": 196,
                    "vulnerability_code": "    function ZapIn(\n\n        address _FromTokenContractAddress,\n\n        address _pairAddress,\n\n        uint256 _amount,\n\n        uint256 _minPoolTokens,\n\n        address _allowanceTarget,\n\n        address _swapTarget,\n\n        bytes calldata swapData\n",
                    "message": "Function 'ZAPPER.ZapIn' (StrategyDAISLPFarm.sol#188-196) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint _amount) external\n",
                    "message": "Parameter '_amount' of StrategyDATSLPFarm.withdraw (StrategyDAISLPFarm.sol#262) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n\n        require(msg.sender == controller, \"!controller\");\n\n\t\tuint amount = IERC20(want).balanceOf(address(this));\t\n\n\t\tif (amount < _amount) {\n\n\t\t\t_withdrawSome(_amount.sub(amount));\n\n\t\t\tamount = IERC20(want).balanceOf(address(this));\n\n\t\t}\t\n\n\t\treturn amount; \n",
                    "message": "Function 'StrategyDATSLPFarm._withdraw' (StrategyDAISLPFarm.sol#275-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n",
                    "message": "Parameter '_amount' of StrategyDATSLPFarm._withdraw (StrategyDAISLPFarm.sol#275) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 297,
                    "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n\n    {\n\n        uint256 _fweth = _amount.mul(1e18).div(yERC20(fUNI).getPricePerFullShare());\n\n\t\tuint _before = IERC20(fUNI).balanceOf(address(this));\n\n\t\tif (_before < _fweth) {\n\n\t\t\t_fweth = _fweth.sub(_before);   \n\n\t\t\trequire(_fweth <= IERC20(pool).balanceOf(address(this)),\"Insufficient Balance\");\n\n\t\t\tpERC20(pool).withdraw(_fweth);\n\n\t\t}\n\n\t\t\n\n\t\t_fweth = IERC20(fUNI).balanceOf(address(this));\n\n\t\tyERC20(fUNI).withdraw(_fweth);\n",
                    "message": "Function 'StrategyDATSLPFarm._withdrawSome' (StrategyDAISLPFarm.sol#285-297) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n",
                    "message": "Parameter '_amount' of StrategyDATSLPFarm._withdrawSome (StrategyDAISLPFarm.sol#285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": 363,
                    "vulnerability_code": "    function _redelivery() internal\n\n    {\n\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\n\n        if (_weth > 0) {\n\n            ZAPPER(zapper).ZapIn(\n\n                weth,\n\n                pair,\n\n                _weth,\n\n                0,\n\n                swap,\n\n                swap,\n\n                new bytes(0));\n\n        }\n",
                    "message": "Function 'StrategyDATSLPFarm._redelivery' (StrategyDAISLPFarm.sol#350-363) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": 396,
                    "vulnerability_code": "     function _swapUniswap(\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal {\n\n        require(_to != address(0));\n\n\n\n        // Swap with uniswap\n\n        IERC20(_from).safeApprove(unirouter, 0);\n\n        IERC20(_from).safeApprove(unirouter, _amount);\n\n\n\n        address[] memory path;\n\n\n\n        if (_from == weth || _to == weth) {\n\n            path = new address[](2);\n\n            path[0] = _from;\n\n            path[1] = _to;\n\n        } else {\n\n            path = new address[](3);\n\n            path[0] = _from;\n\n            path[1] = weth;\n\n            path[2] = _to;\n\n        }\n\n\n\n        UniswapRouter(unirouter).swapExactTokensForTokens(\n\n            _amount,\n\n            0,\n\n            path,\n\n            address(this),\n\n            now.add(1800)\n\n        );\n",
                    "message": "Function 'StrategyDATSLPFarm._swapUniswap' (StrategyDAISLPFarm.sol#365-396) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of StrategyDATSLPFarm._swapUniswap (StrategyDAISLPFarm.sol#366) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of StrategyDATSLPFarm._swapUniswap (StrategyDAISLPFarm.sol#367) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of StrategyDATSLPFarm._swapUniswap (StrategyDAISLPFarm.sol#368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": "Parameter '_governance' of StrategyDATSLPFarm.setGovernance (StrategyDAISLPFarm.sol#404) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": "Parameter '_controller' of StrategyDATSLPFarm.setController (StrategyDAISLPFarm.sol#409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
                    "message": "Constant 'StrategyDATSLPFarm.unirouter' (StrategyDAISLPFarm.sol#205) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": "Constant 'StrategyDATSLPFarm.weth' (StrategyDAISLPFarm.sol#206) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0xbF08E77B5709196F4D15a7F30db5Be8F31143d9A);\n",
                    "message": "Constant 'StrategyDATSLPFarm.bt' (StrategyDAISLPFarm.sol#207) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0xC3D03e4F041Fd4cD388c549Ee2A29a9E5075882f);  //ETH/DAI SLP\n",
                    "message": "Constant 'StrategyDATSLPFarm.want' (StrategyDAISLPFarm.sol#209) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public Harvest = address(0xF8ce90c2710713552fb564869694B2505Bfc0846);\n",
                    "message": "Constant 'StrategyDATSLPFarm.Harvest' (StrategyDAISLPFarm.sol#211) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public fUNI = address(0x203E97aa6eB65A1A02d9E80083414058303f241E);\n",
                    "message": "Constant 'StrategyDATSLPFarm.fUNI' (StrategyDAISLPFarm.sol#212) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public pool = address(0x76Aef359a33C02338902aCA543f37de4b01BA1FA);\n",
                    "message": "Constant 'StrategyDATSLPFarm.pool' (StrategyDAISLPFarm.sol#213) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public Farm = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\n",
                    "message": "Constant 'StrategyDATSLPFarm.Farm' (StrategyDAISLPFarm.sol#215) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public zapper = address(0xfF350eDc2242Ca4d7252A64746aec4A5487a852B);\n",
                    "message": "Constant 'StrategyDATSLPFarm.zapper' (StrategyDAISLPFarm.sol#217) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pair = address(0xC3D03e4F041Fd4cD388c549Ee2A29a9E5075882f);\n",
                    "message": "Constant 'StrategyDATSLPFarm.pair' (StrategyDAISLPFarm.sol#218) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public swap = address(0xDef1C0ded9bec7F1a1670819833240f027b25EfF);\n",
                    "message": "Constant 'StrategyDATSLPFarm.swap' (StrategyDAISLPFarm.sol#219) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0xbF08E77B5709196F4D15a7F30db5Be8F31143d9A);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0xC3D03e4F041Fd4cD388c549Ee2A29a9E5075882f);  //ETH/DAI SLP\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public Harvest = address(0xF8ce90c2710713552fb564869694B2505Bfc0846);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public fUNI = address(0x203E97aa6eB65A1A02d9E80083414058303f241E);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public pool = address(0x76Aef359a33C02338902aCA543f37de4b01BA1FA);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public Farm = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public zapper = address(0xfF350eDc2242Ca4d7252A64746aec4A5487a852B);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public pair = address(0xC3D03e4F041Fd4cD388c549Ee2A29a9E5075882f);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public swap = address(0xDef1C0ded9bec7F1a1670819833240f027b25EfF);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint amountA, uint amountB, uint liquidity);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint[] memory amounts);\n",
                    "message": null
                }
            ]
        }
    },
    "bt-finance-6300bc1271b73a1755fae02594d25fdf6fa39a9c/contracts/strategies/V1.2/StrategyUSDCUNIFarm.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public pledgePickles = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        doApprove(); \n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");                     \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == controller, \"!controller\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t\trequire(_fweth <= IERC20(pool).balanceOf(address(this)),\"Insufficient Balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");                      \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_weth > 0 && _token > 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(weth).safeApprove(unirouter, 0);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(weth).safeApprove(unirouter, _weth);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(token).safeApprove(unirouter, 0);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(token).safeApprove(unirouter, _token);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            UniswapRouter(unirouter).addLiquidity(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                weth,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                token,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        UniswapRouter(unirouter).swapExactTokensForTokens(\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _amount,\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            0,\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            path,\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address(this),\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            now.add(1800)\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_50"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract (StrategyUSDCUNIFarm.sol#70-76) is declared view but contains assembly code\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 220,
                    "vulnerability_code": "\tfunction doApprove () public{\n\n        IERC20(Farm).approve(unirouter, 0);\n\n        IERC20(Farm).approve(unirouter, uint(-1));\n",
                    "message": "StrategyUSDCUNIFarm.doApprove (StrategyUSDCUNIFarm.sol#217-220) does not use the value returned by external calls:\n\t-IERC20(Farm).approve(unirouter,0) (StrategyUSDCUNIFarm.sol#218)\n\t-IERC20(Farm).approve(unirouter,uint256(- 1)) (StrategyUSDCUNIFarm.sol#219)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": 361,
                    "vulnerability_code": "    function _redelivery() internal\n\n    {\n\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\n\n        if (_weth > 0) {\n\n            _swapUniswap(weth, token, _weth.div(2));\n\n        }\n\n\n\n        // Adds in liquidity for ETH/DAI\n\n        _weth = IERC20(weth).balanceOf(address(this));\n\n        uint256 _token = IERC20(token).balanceOf(address(this));\n\n        if (_weth > 0 && _token > 0) {\n\n            IERC20(weth).safeApprove(unirouter, 0);\n\n            IERC20(weth).safeApprove(unirouter, _weth);\n\n\n\n            IERC20(token).safeApprove(unirouter, 0);\n\n            IERC20(token).safeApprove(unirouter, _token);\n\n\n\n            UniswapRouter(unirouter).addLiquidity(\n\n                weth,\n\n                token,\n\n                _weth,\n\n                _token,\n\n                0,\n\n                0,\n\n                address(this),\n\n                now + 180\n\n            );\n\n        }\n",
                    "message": "StrategyUSDCUNIFarm._redelivery (StrategyUSDCUNIFarm.sol#333-361) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).addLiquidity(weth,token,_weth,_token,0,0,address(this),now + 180) (StrategyUSDCUNIFarm.sol#350-359)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": 394,
                    "vulnerability_code": "     function _swapUniswap(\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal {\n\n        require(_to != address(0));\n\n\n\n        // Swap with uniswap\n\n        IERC20(_from).safeApprove(unirouter, 0);\n\n        IERC20(_from).safeApprove(unirouter, _amount);\n\n\n\n        address[] memory path;\n\n\n\n        if (_from == weth || _to == weth) {\n\n            path = new address[](2);\n\n            path[0] = _from;\n\n            path[1] = _to;\n\n        } else {\n\n            path = new address[](3);\n\n            path[0] = _from;\n\n            path[1] = weth;\n\n            path[2] = _to;\n\n        }\n\n\n\n        UniswapRouter(unirouter).swapExactTokensForTokens(\n\n            _amount,\n\n            0,\n\n            path,\n\n            address(this),\n\n            now.add(1800)\n\n        );\n",
                    "message": "StrategyUSDCUNIFarm._swapUniswap (StrategyUSDCUNIFarm.sol#363-394) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_amount,0,path,address(this),now.add(1800)) (StrategyUSDCUNIFarm.sol#387-393)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract uses assembly (StrategyUSDCUNIFarm.sol#70-76)\n\t- StrategyUSDCUNIFarm.sol#74\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public pledgePickles = 0;\n",
                    "message": "StrategyUSDCUNIFarm.pledgePickles should be constant (StrategyUSDCUNIFarm.sol#208)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function getPending() public view returns (uint256) {\n\n        return pERC20(pool).earned(address(this));\n",
                    "message": "StrategyUSDCUNIFarm.getPending (StrategyUSDCUNIFarm.sol#304-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "\tfunction getFarm() public view returns(uint256)\n\n\t{\n\n\t\treturn IERC20(Farm).balanceOf(address(this));\n",
                    "message": "StrategyUSDCUNIFarm.getFarm (StrategyUSDCUNIFarm.sol#308-311) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": 317,
                    "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(pool).getReward();\n\n        redelivery();    \n",
                    "message": "StrategyUSDCUNIFarm.harvest (StrategyUSDCUNIFarm.sol#313-317) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": 400,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n\n    {\n\n        require(msg.sender == governance, \"!governance\");\n\n        redeliverynum = value;\n",
                    "message": "StrategyUSDCUNIFarm.setredeliverynum (StrategyUSDCUNIFarm.sol#396-400) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": 405,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
                    "message": "StrategyUSDCUNIFarm.setGovernance (StrategyUSDCUNIFarm.sol#402-405) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": "Detected issues with version pragma in StrategyUSDCUNIFarm.sol:\n\t- pragma solidity^0.5.15 (StrategyUSDCUNIFarm.sol#9): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Low level call in Address.sendValue (StrategyUSDCUNIFarm.sol#80-86):\n\t-(success) = recipient.call.value(amount)() StrategyUSDCUNIFarm.sol#84\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
                    "message": "Low level call in SafeERC20.callOptionalReturn (StrategyUSDCUNIFarm.sol#107-118):\n\t-(success,returndata) = address(token).call(data) StrategyUSDCUNIFarm.sol#111\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function vaults(address) external view returns (address);\n",
                    "message": "Parameter '' of Controller.vaults (StrategyUSDCUNIFarm.sol#122) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.deposit (StrategyUSDCUNIFarm.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.withdraw (StrategyUSDCUNIFarm.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.balanceOf (StrategyUSDCUNIFarm.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Function 'CurveDeposit.claimable_tokens' (StrategyUSDCUNIFarm.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.claimable_tokens (StrategyUSDCUNIFarm.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address) external;\n",
                    "message": "Parameter '' of CurveMinter.mint (StrategyUSDCUNIFarm.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 155,
                    "vulnerability_code": "interface yERC20 {\n\n  function deposit(uint256 _amount) external;\n\n  function depositAll(uint256[] calldata,address[] calldata)external;\n\n  function withdraw(uint256 _amount) external;\n\n  function getPricePerFullShare() external view returns (uint);\n",
                    "message": "Contract 'yERC20' (StrategyUSDCUNIFarm.sol#150-155) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function depositAll(uint256[] calldata,address[] calldata)external;\n",
                    "message": "Parameter '' of yERC20.depositAll (StrategyUSDCUNIFarm.sol#152) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function depositAll(uint256[] calldata,address[] calldata)external;\n",
                    "message": "Parameter '_scope_0' of yERC20.depositAll (StrategyUSDCUNIFarm.sol#152) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 163,
                    "vulnerability_code": "interface pERC20 {\n\n  function stake(uint256 ) external;\n\n  function withdraw(uint256 ) external;\n\n  function balanceOf(address) external view returns(uint);\n\n  function earned(address) external view returns (uint);\n\n  function getReward()external;\n",
                    "message": "Contract 'pERC20' (StrategyUSDCUNIFarm.sol#157-163) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function stake(uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.stake (StrategyUSDCUNIFarm.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdraw(uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.withdraw (StrategyUSDCUNIFarm.sol#159) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address) external view returns(uint);\n",
                    "message": "Parameter '' of pERC20.balanceOf (StrategyUSDCUNIFarm.sol#160) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function earned(address) external view returns (uint);\n",
                    "message": "Parameter '' of pERC20.earned (StrategyUSDCUNIFarm.sol#161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint _amount) external\n",
                    "message": "Parameter '_amount' of StrategyUSDCUNIFarm.withdraw (StrategyUSDCUNIFarm.sol#245) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 265,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n\n        require(msg.sender == controller, \"!controller\");\n\n\t\tuint amount = IERC20(want).balanceOf(address(this));\t\n\n\t\tif (amount < _amount) {\n\n\t\t\t_withdrawSome(_amount.sub(amount));\n\n\t\t\tamount = IERC20(want).balanceOf(address(this));\n\n\t\t}\t\n\n\t\treturn amount; \n",
                    "message": "Function 'StrategyUSDCUNIFarm._withdraw' (StrategyUSDCUNIFarm.sol#257-265) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n",
                    "message": "Parameter '_amount' of StrategyUSDCUNIFarm._withdraw (StrategyUSDCUNIFarm.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": 279,
                    "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n\n    {\n\n        uint256 _fweth = _amount.mul(1e18).div(yERC20(fUNI).getPricePerFullShare());\n\n\t\tuint _before = IERC20(fUNI).balanceOf(address(this));\n\n\t\tif (_before < _fweth) {\n\n\t\t\t_fweth = _fweth.sub(_before);   \n\n\t\t\trequire(_fweth <= IERC20(pool).balanceOf(address(this)),\"Insufficient Balance\");\n\n\t\t\tpERC20(pool).withdraw(_fweth);\n\n\t\t}\n\n\t\t\n\n\t\t_fweth = IERC20(fUNI).balanceOf(address(this));\n\n\t\tyERC20(fUNI).withdraw(_fweth);\n",
                    "message": "Function 'StrategyUSDCUNIFarm._withdrawSome' (StrategyUSDCUNIFarm.sol#267-279) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n",
                    "message": "Parameter '_amount' of StrategyUSDCUNIFarm._withdrawSome (StrategyUSDCUNIFarm.sol#267) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": 361,
                    "vulnerability_code": "    function _redelivery() internal\n\n    {\n\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\n\n        if (_weth > 0) {\n\n            _swapUniswap(weth, token, _weth.div(2));\n\n        }\n\n\n\n        // Adds in liquidity for ETH/DAI\n\n        _weth = IERC20(weth).balanceOf(address(this));\n\n        uint256 _token = IERC20(token).balanceOf(address(this));\n\n        if (_weth > 0 && _token > 0) {\n\n            IERC20(weth).safeApprove(unirouter, 0);\n\n            IERC20(weth).safeApprove(unirouter, _weth);\n\n\n\n            IERC20(token).safeApprove(unirouter, 0);\n\n            IERC20(token).safeApprove(unirouter, _token);\n\n\n\n            UniswapRouter(unirouter).addLiquidity(\n\n                weth,\n\n                token,\n\n                _weth,\n\n                _token,\n\n                0,\n\n                0,\n\n                address(this),\n\n                now + 180\n\n            );\n\n        }\n",
                    "message": "Function 'StrategyUSDCUNIFarm._redelivery' (StrategyUSDCUNIFarm.sol#333-361) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": 394,
                    "vulnerability_code": "     function _swapUniswap(\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal {\n\n        require(_to != address(0));\n\n\n\n        // Swap with uniswap\n\n        IERC20(_from).safeApprove(unirouter, 0);\n\n        IERC20(_from).safeApprove(unirouter, _amount);\n\n\n\n        address[] memory path;\n\n\n\n        if (_from == weth || _to == weth) {\n\n            path = new address[](2);\n\n            path[0] = _from;\n\n            path[1] = _to;\n\n        } else {\n\n            path = new address[](3);\n\n            path[0] = _from;\n\n            path[1] = weth;\n\n            path[2] = _to;\n\n        }\n\n\n\n        UniswapRouter(unirouter).swapExactTokensForTokens(\n\n            _amount,\n\n            0,\n\n            path,\n\n            address(this),\n\n            now.add(1800)\n\n        );\n",
                    "message": "Function 'StrategyUSDCUNIFarm._swapUniswap' (StrategyUSDCUNIFarm.sol#363-394) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of StrategyUSDCUNIFarm._swapUniswap (StrategyUSDCUNIFarm.sol#364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of StrategyUSDCUNIFarm._swapUniswap (StrategyUSDCUNIFarm.sol#365) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of StrategyUSDCUNIFarm._swapUniswap (StrategyUSDCUNIFarm.sol#366) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": "Parameter '_governance' of StrategyUSDCUNIFarm.setGovernance (StrategyUSDCUNIFarm.sol#402) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": "Parameter '_controller' of StrategyUSDCUNIFarm.setController (StrategyUSDCUNIFarm.sol#407) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
                    "message": "Constant 'StrategyUSDCUNIFarm.unirouter' (StrategyUSDCUNIFarm.sol#192) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": "Constant 'StrategyUSDCUNIFarm.weth' (StrategyUSDCUNIFarm.sol#193) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
                    "message": "Constant 'StrategyUSDCUNIFarm.bt' (StrategyUSDCUNIFarm.sol#194) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc);  //ETH/token\n",
                    "message": "Constant 'StrategyUSDCUNIFarm.want' (StrategyUSDCUNIFarm.sol#196) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public token = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\t//usdc\n",
                    "message": "Constant 'StrategyUSDCUNIFarm.token' (StrategyUSDCUNIFarm.sol#198) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public Harvest = address(0xF8ce90c2710713552fb564869694B2505Bfc0846);\n",
                    "message": "Constant 'StrategyUSDCUNIFarm.Harvest' (StrategyUSDCUNIFarm.sol#199) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public fUNI = address(0xA79a083FDD87F73c2f983c5551EC974685D6bb36);\n",
                    "message": "Constant 'StrategyUSDCUNIFarm.fUNI' (StrategyUSDCUNIFarm.sol#200) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public pool = address(0x156733b89Ac5C704F3217FEe2949A9D4A73764b5);\n",
                    "message": "Constant 'StrategyUSDCUNIFarm.pool' (StrategyUSDCUNIFarm.sol#201) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public Farm = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\n",
                    "message": "Constant 'StrategyUSDCUNIFarm.Farm' (StrategyUSDCUNIFarm.sol#203) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc);  //ETH/token\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public token = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\t//usdc\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public Harvest = address(0xF8ce90c2710713552fb564869694B2505Bfc0846);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public fUNI = address(0xA79a083FDD87F73c2f983c5551EC974685D6bb36);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public pool = address(0x156733b89Ac5C704F3217FEe2949A9D4A73764b5);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public Farm = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint amountA, uint amountB, uint liquidity);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint[] memory amounts);\n",
                    "message": null
                }
            ]
        }
    },
    "bt-finance-6300bc1271b73a1755fae02594d25fdf6fa39a9c/contracts/strategies/V1.2/StrategyWBTCUNIFarm.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        doApprove(); \n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");                     \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == controller, \"!controller\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t\trequire(_fweth <= IERC20(pool).balanceOf(address(this)),\"Insufficient Balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_vault != address(0), \"!vault\");                      \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (_weth > 0 && _token > 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(weth).safeApprove(unirouter, 0);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(weth).safeApprove(unirouter, _weth);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(token).safeApprove(unirouter, 0);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC20(token).safeApprove(unirouter, _token);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            UniswapRouter(unirouter).addLiquidity(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                weth,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                token,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        UniswapRouter(unirouter).swapExactTokensForTokens(\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _amount,\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            0,\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            path,\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address(this),\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            now.add(1800)\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                },
                {
                    "name": "no-slippage-check",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "No slippage check in a Uniswap v2/v3 trade"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_49"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract (StrategyWBTCUNIFarm.sol#70-76) is declared view but contains assembly code\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 222,
                    "vulnerability_code": "\tfunction doApprove () public{\n\n        IERC20(Farm).approve(unirouter, 0);\n\n        IERC20(Farm).approve(unirouter, uint(-1));\n\n    }\n\n    \n",
                    "message": "StrategyWBTCUNIFarm.doApprove (StrategyWBTCUNIFarm.sol#217-222) does not use the value returned by external calls:\n\t-IERC20(Farm).approve(unirouter,0) (StrategyWBTCUNIFarm.sol#218-219)\n\t-IERC20(Farm).approve(unirouter,uint256(- 1)) (StrategyWBTCUNIFarm.sol#219-222)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": 366,
                    "vulnerability_code": "    function _redelivery() internal\n\n    {\n\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\n\n        if (_weth > 0) {\n\n            _swapUniswap(weth, token, _weth.div(2));\n\n        }\n\n\n\n        // Adds in liquidity for ETH/DAI\n\n        _weth = IERC20(weth).balanceOf(address(this));\n\n        uint256 _token = IERC20(token).balanceOf(address(this));\n\n        if (_weth > 0 && _token > 0) {\n\n            IERC20(weth).safeApprove(unirouter, 0);\n\n            IERC20(weth).safeApprove(unirouter, _weth);\n\n\n\n            IERC20(token).safeApprove(unirouter, 0);\n\n            IERC20(token).safeApprove(unirouter, _token);\n\n\n\n            UniswapRouter(unirouter).addLiquidity(\n\n                weth,\n\n                token,\n\n                _weth,\n\n                _token,\n\n                0,\n\n                0,\n\n                address(this),\n\n                now + 180\n\n            );\n\n        }\n\n    }\n\n    \n",
                    "message": "StrategyWBTCUNIFarm._redelivery (StrategyWBTCUNIFarm.sol#336-366) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).addLiquidity(weth,token,_weth,_token,0,0,address(this),now + 180) (StrategyWBTCUNIFarm.sol#353-365)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": 399,
                    "vulnerability_code": "     function _swapUniswap(\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal {\n\n        require(_to != address(0));\n\n\n\n        // Swap with uniswap\n\n        IERC20(_from).safeApprove(unirouter, 0);\n\n        IERC20(_from).safeApprove(unirouter, _amount);\n\n\n\n        address[] memory path;\n\n\n\n        if (_from == weth || _to == weth) {\n\n            path = new address[](2);\n\n            path[0] = _from;\n\n            path[1] = _to;\n\n        } else {\n\n            path = new address[](3);\n\n            path[0] = _from;\n\n            path[1] = weth;\n\n            path[2] = _to;\n\n        }\n\n\n\n        UniswapRouter(unirouter).swapExactTokensForTokens(\n\n            _amount,\n\n            0,\n\n            path,\n\n            address(this),\n\n            now.add(1800)\n\n        );\n\n    }\n\n    \n",
                    "message": "StrategyWBTCUNIFarm._swapUniswap (StrategyWBTCUNIFarm.sol#366-399) does not use the value returned by external calls:\n\t-UniswapRouter(unirouter).swapExactTokensForTokens(_amount,0,path,address(this),now.add(1800)) (StrategyWBTCUNIFarm.sol#390-399)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract uses assembly (StrategyWBTCUNIFarm.sol#70-76)\n\t- StrategyWBTCUNIFarm.sol#74\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "    function getPending() public view returns (uint256) {\n\n        return pERC20(pool).earned(address(this));\n\n    }\n\n\t\n",
                    "message": "StrategyWBTCUNIFarm.getPending (StrategyWBTCUNIFarm.sol#307-311) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": 316,
                    "vulnerability_code": "\tfunction getFarm() public view returns(uint256)\n\n\t{\n\n\t\treturn IERC20(Farm).balanceOf(address(this));\n\n\t}\n\n    \n",
                    "message": "StrategyWBTCUNIFarm.getFarm (StrategyWBTCUNIFarm.sol#311-316) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": 322,
                    "vulnerability_code": "    function harvest() public \n\n    {\n\n        pERC20(pool).getReward();\n\n        redelivery();    \n\n    }\n\n    \n",
                    "message": "StrategyWBTCUNIFarm.harvest (StrategyWBTCUNIFarm.sol#316-322) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": 405,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n\n    {\n\n        require(msg.sender == governance, \"!governance\");\n\n        redeliverynum = value;\n\n    }\n\n\n",
                    "message": "StrategyWBTCUNIFarm.setredeliverynum (StrategyWBTCUNIFarm.sol#399-405) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n\n    }\n\n\n",
                    "message": "StrategyWBTCUNIFarm.setGovernance (StrategyWBTCUNIFarm.sol#405-410) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": "Detected issues with version pragma in StrategyWBTCUNIFarm.sol:\n\t- pragma solidity^0.5.15 (StrategyWBTCUNIFarm.sol#9): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Low level call in Address.sendValue (StrategyWBTCUNIFarm.sol#80-86):\n\t-(success) = recipient.call.value(amount)() StrategyWBTCUNIFarm.sol#84\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
                    "message": "Low level call in SafeERC20.callOptionalReturn (StrategyWBTCUNIFarm.sol#107-118):\n\t-(success,returndata) = address(token).call(data) StrategyWBTCUNIFarm.sol#111\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function vaults(address) external view returns (address);\n",
                    "message": "Parameter '' of Controller.vaults (StrategyWBTCUNIFarm.sol#122) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.deposit (StrategyWBTCUNIFarm.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint256) external;\n",
                    "message": "Parameter '' of CurveDeposit.withdraw (StrategyWBTCUNIFarm.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.balanceOf (StrategyWBTCUNIFarm.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Function 'CurveDeposit.claimable_tokens' (StrategyWBTCUNIFarm.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint256);\n",
                    "message": "Parameter '' of CurveDeposit.claimable_tokens (StrategyWBTCUNIFarm.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address) external;\n",
                    "message": "Parameter '' of CurveMinter.mint (StrategyWBTCUNIFarm.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 155,
                    "vulnerability_code": "interface yERC20 {\n\n  function deposit(uint256 _amount) external;\n\n  function depositAll(uint256[] calldata,address[] calldata)external;\n\n  function withdraw(uint256 _amount) external;\n\n  function getPricePerFullShare() external view returns (uint);\n",
                    "message": "Contract 'yERC20' (StrategyWBTCUNIFarm.sol#150-155) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function depositAll(uint256[] calldata,address[] calldata)external;\n",
                    "message": "Parameter '' of yERC20.depositAll (StrategyWBTCUNIFarm.sol#152) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function depositAll(uint256[] calldata,address[] calldata)external;\n",
                    "message": "Parameter '_scope_0' of yERC20.depositAll (StrategyWBTCUNIFarm.sol#152) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 163,
                    "vulnerability_code": "interface pERC20 {\n\n  function stake(uint256 ) external;\n\n  function withdraw(uint256 ) external;\n\n  function balanceOf(address) external view returns(uint);\n\n  function earned(address) external view returns (uint);\n\n  function getReward()external;\n",
                    "message": "Contract 'pERC20' (StrategyWBTCUNIFarm.sol#157-163) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function stake(uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.stake (StrategyWBTCUNIFarm.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdraw(uint256 ) external;\n",
                    "message": "Parameter '' of pERC20.withdraw (StrategyWBTCUNIFarm.sol#159) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address) external view returns(uint);\n",
                    "message": "Parameter '' of pERC20.balanceOf (StrategyWBTCUNIFarm.sol#160) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function earned(address) external view returns (uint);\n",
                    "message": "Parameter '' of pERC20.earned (StrategyWBTCUNIFarm.sol#161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": 249,
                    "vulnerability_code": "    function withdraw(uint _amount) external\n\n\t{\n",
                    "message": "Parameter '_amount' of StrategyWBTCUNIFarm.withdraw (StrategyWBTCUNIFarm.sol#247-249) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": 270,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n\n        require(msg.sender == controller, \"!controller\");\n\n\t\tuint amount = IERC20(want).balanceOf(address(this));\t\n\n\t\tif (amount < _amount) {\n\n\t\t\t_withdrawSome(_amount.sub(amount));\n\n\t\t\tamount = IERC20(want).balanceOf(address(this));\n\n\t\t}\t\n\n\t\treturn amount; \n\n    }\n\n    \n",
                    "message": "Function 'StrategyWBTCUNIFarm._withdraw' (StrategyWBTCUNIFarm.sol#260-270) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _withdraw(uint _amount) internal returns(uint) {\t\t\t\n",
                    "message": "Parameter '_amount' of StrategyWBTCUNIFarm._withdraw (StrategyWBTCUNIFarm.sol#260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 270,
                    "vulnerability_to_line": 284,
                    "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n\n    {\n\n        uint256 _fweth = _amount.mul(1e18).div(yERC20(fUNI).getPricePerFullShare());\n\n\t\tuint _before = IERC20(fUNI).balanceOf(address(this));\n\n\t\tif (_before < _fweth) {\n\n\t\t\t_fweth = _fweth.sub(_before);   \n\n\t\t\trequire(_fweth <= IERC20(pool).balanceOf(address(this)),\"Insufficient Balance\");\n\n\t\t\tpERC20(pool).withdraw(_fweth);\n\n\t\t}\n\n\t\t\n\n\t\t_fweth = IERC20(fUNI).balanceOf(address(this));\n\n\t\tyERC20(fUNI).withdraw(_fweth);\n\n    }\n\n\t\n",
                    "message": "Function 'StrategyWBTCUNIFarm._withdrawSome' (StrategyWBTCUNIFarm.sol#270-284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 270,
                    "vulnerability_to_line": 272,
                    "vulnerability_code": "    function _withdrawSome(uint _amount) internal\n\n    {\n",
                    "message": "Parameter '_amount' of StrategyWBTCUNIFarm._withdrawSome (StrategyWBTCUNIFarm.sol#270-272) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": 366,
                    "vulnerability_code": "    function _redelivery() internal\n\n    {\n\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\n\n        if (_weth > 0) {\n\n            _swapUniswap(weth, token, _weth.div(2));\n\n        }\n\n\n\n        // Adds in liquidity for ETH/DAI\n\n        _weth = IERC20(weth).balanceOf(address(this));\n\n        uint256 _token = IERC20(token).balanceOf(address(this));\n\n        if (_weth > 0 && _token > 0) {\n\n            IERC20(weth).safeApprove(unirouter, 0);\n\n            IERC20(weth).safeApprove(unirouter, _weth);\n\n\n\n            IERC20(token).safeApprove(unirouter, 0);\n\n            IERC20(token).safeApprove(unirouter, _token);\n\n\n\n            UniswapRouter(unirouter).addLiquidity(\n\n                weth,\n\n                token,\n\n                _weth,\n\n                _token,\n\n                0,\n\n                0,\n\n                address(this),\n\n                now + 180\n\n            );\n\n        }\n\n    }\n\n    \n",
                    "message": "Function 'StrategyWBTCUNIFarm._redelivery' (StrategyWBTCUNIFarm.sol#336-366) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": 399,
                    "vulnerability_code": "     function _swapUniswap(\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal {\n\n        require(_to != address(0));\n\n\n\n        // Swap with uniswap\n\n        IERC20(_from).safeApprove(unirouter, 0);\n\n        IERC20(_from).safeApprove(unirouter, _amount);\n\n\n\n        address[] memory path;\n\n\n\n        if (_from == weth || _to == weth) {\n\n            path = new address[](2);\n\n            path[0] = _from;\n\n            path[1] = _to;\n\n        } else {\n\n            path = new address[](3);\n\n            path[0] = _from;\n\n            path[1] = weth;\n\n            path[2] = _to;\n\n        }\n\n\n\n        UniswapRouter(unirouter).swapExactTokensForTokens(\n\n            _amount,\n\n            0,\n\n            path,\n\n            address(this),\n\n            now.add(1800)\n\n        );\n\n    }\n\n    \n",
                    "message": "Function 'StrategyWBTCUNIFarm._swapUniswap' (StrategyWBTCUNIFarm.sol#366-399) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_from' of StrategyWBTCUNIFarm._swapUniswap (StrategyWBTCUNIFarm.sol#368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_to' of StrategyWBTCUNIFarm._swapUniswap (StrategyWBTCUNIFarm.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": 371,
                    "vulnerability_code": "    ) internal {\n",
                    "message": "Parameter '_amount' of StrategyWBTCUNIFarm._swapUniswap (StrategyWBTCUNIFarm.sol#370-371) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": "Parameter '_governance' of StrategyWBTCUNIFarm.setGovernance (StrategyWBTCUNIFarm.sol#405-406) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": 411,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": "Parameter '_controller' of StrategyWBTCUNIFarm.setController (StrategyWBTCUNIFarm.sol#410-411) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);    //Uniswap\u4ea4\u6613\u5408\u7ea6\n",
                    "message": "Constant 'StrategyWBTCUNIFarm.unirouter' (StrategyWBTCUNIFarm.sol#192) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);  //swap\u7528\u7684\u4e2d\u95f4\u5e01 WETH\n",
                    "message": "Constant 'StrategyWBTCUNIFarm.weth' (StrategyWBTCUNIFarm.sol#193) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": 196,
                    "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n\n\t\n",
                    "message": "Constant 'StrategyWBTCUNIFarm.bt' (StrategyWBTCUNIFarm.sol#194-196) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "    address constant public want = address(0xBb2b8038a1640196FbE3e38816F3e67Cba72D940);  //ETH/token\n\n\n",
                    "message": "Constant 'StrategyWBTCUNIFarm.want' (StrategyWBTCUNIFarm.sol#196-198) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 199,
                    "vulnerability_code": "    address constant public token = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\n",
                    "message": "Constant 'StrategyWBTCUNIFarm.token' (StrategyWBTCUNIFarm.sol#198-199) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": 200,
                    "vulnerability_code": "    address constant public Harvest = address(0xF8ce90c2710713552fb564869694B2505Bfc0846);\n",
                    "message": "Constant 'StrategyWBTCUNIFarm.Harvest' (StrategyWBTCUNIFarm.sol#199-200) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": 201,
                    "vulnerability_code": "\taddress constant public fUNI = address(0x01112a60f427205dcA6E229425306923c3Cc2073);\n",
                    "message": "Constant 'StrategyWBTCUNIFarm.fUNI' (StrategyWBTCUNIFarm.sol#200-201) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": 203,
                    "vulnerability_code": "\taddress constant public pool = address(0xF1181A71CC331958AE2cA2aAD0784Acfc436CB93);\n\n\n",
                    "message": "Constant 'StrategyWBTCUNIFarm.pool' (StrategyWBTCUNIFarm.sol#201-203) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "    address constant public Farm = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\n\n\n\n\n",
                    "message": "Constant 'StrategyWBTCUNIFarm.Farm' (StrategyWBTCUNIFarm.sol#203-206) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);    //Uniswap\u4ea4\u6613\u5408\u7ea6\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);  //swap\u7528\u7684\u4e2d\u95f4\u5e01 WETH\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public want = address(0xBb2b8038a1640196FbE3e38816F3e67Cba72D940);  //ETH/token\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public token = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public Harvest = address(0xF8ce90c2710713552fb564869694B2505Bfc0846);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public fUNI = address(0x01112a60f427205dcA6E229425306923c3Cc2073);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant public pool = address(0xF1181A71CC331958AE2cA2aAD0784Acfc436CB93);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public Farm = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setredeliverynum(uint256 value) public\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint amountA, uint amountB, uint liquidity);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint[] memory amounts);\n",
                    "message": null
                }
            ]
        }
    },
    "bt-finance-6300bc1271b73a1755fae02594d25fdf6fa39a9c/contracts/vault/bVault.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal { }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = _msgSender();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0), _owner);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (address _token,uint _earnLowerlimit) public ERC20Detailed(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string(abi.encodePacked(\"bt:vault: \", ERC20Detailed(_token).name())),\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string(abi.encodePacked(\"b\", ERC20Detailed(_token).symbol())),\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ERC20Detailed(_token).decimals()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        token = IERC20(_token);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        earnLowerlimit = _earnLowerlimit;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        feeAddress = tx.origin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(), \"Ownable: caller is not the owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: mint to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!RestrictContractCall || !s.isContract(), \"Contract cannot call\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\trequire(_amount > 0, \"Cannot deposit 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\trequire(_shares > 0, \"Cannot withdraw 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(fees[0]<feeMax&&fees[1]<feeMax&&fees[2]<feeMax,\"The fee is too high\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(fees[0]<feeMax&&fees[1]<feeMax&&fees[2]<feeMax,\"The fee is too high\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_61"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": 214,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract (bVault.sol#208-214) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "    function withdraw(uint _shares) public onlyRestrictContractCall {\n\n\t\trequire(_shares > 0, \"Cannot withdraw 0\");\n\n\n\n        uint r = (balance().mul(_shares)).div(totalSupply());\n\n        _burn(msg.sender, _shares);\n\n        \n\n        // Check balance\n\n        uint b = token.balanceOf(address(this));\n\n        if (b < r) {\n\n            uint _withdraw = r.sub(b);\n\n            Controller(controller).withdraw(address(token), _withdraw);\n\n            uint _after = token.balanceOf(address(this));\n\n            uint _diff = _after.sub(b);\n\n            if (_diff < _withdraw) {\n\n                r = b.add(_diff);\n\n            }\n\n        }\n\n        uint feeRatio = getFeeRatio();\n\n        if(feeRatio>0){\n\n            uint fee = r.mul(feeRatio).div(feeMax);\n\n            r = r.sub(fee);\n\n            token.safeTransfer(feeAddress,fee);\n\n        }\n\n        token.safeTransfer(msg.sender, r);\n",
                    "message": "Reentrancy in bVault.withdraw (bVault.sol#386-410):\n\tExternal calls:\n\t- r = (balance().mul(_shares)).div(totalSupply()) (bVault.sol#389)\n\tState variables written after the call(s):\n\t- _totalSupply (bVault.sol#390)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.name (local variable @ bVault.sol#146) shadows:\n\t- ERC20Detailed.name (function @ bVault.sol#151-153)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.symbol (local variable @ bVault.sol#146) shadows:\n\t- ERC20Detailed.symbol (function @ bVault.sol#154-156)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.decimals (local variable @ bVault.sol#146) shadows:\n\t- ERC20Detailed.decimals (function @ bVault.sol#157-159)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": 377,
                    "vulnerability_code": "    function deposit(uint _amount) public onlyRestrictContractCall {\n\n\t\trequire(_amount > 0, \"Cannot deposit 0\");\n\n        uint _pool = balance();\n\n        uint _before = token.balanceOf(address(this));\n\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint _after = token.balanceOf(address(this));\n\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\n\n        uint shares = 0;\n\n        if (totalSupply() == 0) {\n\n            shares = _amount;\n\n        } else {\n\n            shares = (_amount.mul(totalSupply())).div(_pool);\n\n        }\n\n        _mint(msg.sender, shares);\n\n        userDepoistTime[msg.sender] = now;\n\n        if (token.balanceOf(address(this))>earnLowerlimit){\n\n          earn();\n\n        }\n",
                    "message": "Reentrancy in bVault.deposit (bVault.sol#359-377):\n\tExternal calls:\n\t- _pool = balance() (bVault.sol#361)\n\t- _before = token.balanceOf(address(this)) (bVault.sol#362)\n\t- _after = token.balanceOf(address(this)) (bVault.sol#364)\n\tState variables written after the call(s):\n\t- _balances (bVault.sol#372)\n\t- _totalSupply (bVault.sol#372)\n\t- userDepoistTime (bVault.sol#373)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "    function withdraw(uint _shares) public onlyRestrictContractCall {\n\n\t\trequire(_shares > 0, \"Cannot withdraw 0\");\n\n\n\n        uint r = (balance().mul(_shares)).div(totalSupply());\n\n        _burn(msg.sender, _shares);\n\n        \n\n        // Check balance\n\n        uint b = token.balanceOf(address(this));\n\n        if (b < r) {\n\n            uint _withdraw = r.sub(b);\n\n            Controller(controller).withdraw(address(token), _withdraw);\n\n            uint _after = token.balanceOf(address(this));\n\n            uint _diff = _after.sub(b);\n\n            if (_diff < _withdraw) {\n\n                r = b.add(_diff);\n\n            }\n\n        }\n\n        uint feeRatio = getFeeRatio();\n\n        if(feeRatio>0){\n\n            uint fee = r.mul(feeRatio).div(feeMax);\n\n            r = r.sub(fee);\n\n            token.safeTransfer(feeAddress,fee);\n\n        }\n\n        token.safeTransfer(msg.sender, r);\n",
                    "message": "Reentrancy in bVault.withdraw (bVault.sol#386-410):\n\tExternal calls:\n\t- r = (balance().mul(_shares)).div(totalSupply()) (bVault.sol#389)\n\tState variables written after the call(s):\n\t- _balances (bVault.sol#390)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": 214,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract uses assembly (bVault.sol#208-214)\n\t- bVault.sol#212\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public feeMax = 1000;\n",
                    "message": "bVault.feeMax should be constant (bVault.sol#292)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "    function owner() public view returns (address) {\n\n        return _owner;\n",
                    "message": "Ownable.owner (bVault.sol#44-46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipTransferred(_owner, address(0));\n\n        _owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (bVault.sol#54-57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 60,
                    "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        _transferOwnership(newOwner);\n",
                    "message": "Ownable.transferOwnership (bVault.sol#58-60) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 85,
                    "vulnerability_code": "    function transfer(address recipient, uint256 amount) public returns (bool) {\n\n        _transfer(_msgSender(), recipient, amount);\n\n        return true;\n",
                    "message": "ERC20.transfer (bVault.sol#82-85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address recipient, uint256 amount) external returns (bool);\n",
                    "message": "IERC20.transfer (bVault.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n\n        return _allowances[owner][spender];\n",
                    "message": "ERC20.allowance (bVault.sol#86-88) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) external view returns (uint256);\n",
                    "message": "IERC20.allowance (bVault.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) external returns (bool);\n",
                    "message": "IERC20.approve (bVault.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 92,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) public returns (bool) {\n\n        _approve(_msgSender(), spender, amount);\n\n        return true;\n",
                    "message": "ERC20.approve (bVault.sol#89-92) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": 97,
                    "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n\n        _transfer(sender, recipient, amount);\n\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n\n        return true;\n",
                    "message": "ERC20.transferFrom (bVault.sol#93-97) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n",
                    "message": "IERC20.transferFrom (bVault.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": 101,
                    "vulnerability_code": "    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n\n        return true;\n",
                    "message": "ERC20.increaseAllowance (bVault.sol#98-101) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": 105,
                    "vulnerability_code": "    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n\n        return true;\n",
                    "message": "ERC20.decreaseAllowance (bVault.sol#102-105) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": 153,
                    "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
                    "message": "ERC20Detailed.name (bVault.sol#151-153) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
                    "message": "ERC20Detailed.symbol (bVault.sol#154-156) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 159,
                    "vulnerability_code": "    function decimals() public view returns (uint8) {\n\n        return _decimals;\n",
                    "message": "ERC20Detailed.decimals (bVault.sol#157-159) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": 332,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
                    "message": "bVault.setGovernance (bVault.sol#329-332) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": 337,
                    "vulnerability_code": "    function setController(address _controller) public {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        controller = _controller;\n",
                    "message": "bVault.setController (bVault.sol#334-337) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": 341,
                    "vulnerability_code": "    function setEarnLowerlimit(uint256 _earnLowerlimit) public{\n\n      require(msg.sender == governance, \"!governance\");\n\n      earnLowerlimit = _earnLowerlimit;\n",
                    "message": "bVault.setEarnLowerlimit (bVault.sol#338-341) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "    function getPricePerFullShare() public view returns (uint) {\n\n        if (totalSupply()==0) {\n\n            return 0;\n\n        }\n\n        return balance().mul(1e18).div(totalSupply());\n",
                    "message": "bVault.getPricePerFullShare (bVault.sol#424-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "    function setFeeRatio(uint[3] memory fees) public\n\n    {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        require(fees[0]<feeMax&&fees[1]<feeMax&&fees[2]<feeMax,\"The fee is too high\");\n\n        fee1 = fees[0];\n\n        fee2 = fees[1];\n\n        fee3 = fees[2];\n",
                    "message": "bVault.setFeeRatio (bVault.sol#431-438) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": 444,
                    "vulnerability_code": "    function setFeeAddress(address fadd) public \n\n    {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        feeAddress = fadd;\n",
                    "message": "bVault.setFeeAddress (bVault.sol#440-444) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 446,
                    "vulnerability_to_line": 450,
                    "vulnerability_code": "\tfunction setTimeLock(address _timelock) public \n\n    {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        timelock = _timelock;\n",
                    "message": "bVault.setTimeLock (bVault.sol#446-450) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 455,
                    "vulnerability_code": "    function setRestrictContractCall(bool enabled) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        RestrictContractCall = enabled;\n",
                    "message": "bVault.setRestrictContractCall (bVault.sol#452-455) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": "Detected issues with version pragma in bVault.sol:\n\t- pragma solidity^0.5.16 (bVault.sol#9): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 224,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Low level call in Address.sendValue (bVault.sol#218-224):\n\t-(success) = recipient.call.value(amount)() bVault.sol#222\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": 266,
                    "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
                    "message": "Low level call in SafeERC20.callOptionalReturn (bVault.sol#255-266):\n\t-(success,returndata) = address(token).call(data) bVault.sol#259\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": 28,
                    "vulnerability_code": "    function _msgSender() internal view returns (address payable) {\n\n        return msg.sender;\n",
                    "message": "Function 'Context._msgSender' (bVault.sol#26-28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "    function _msgData() internal view returns (bytes memory) {\n\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\n        return msg.data;\n",
                    "message": "Function 'Context._msgData' (bVault.sol#30-33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "    function _transferOwnership(address newOwner) internal {\n\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (bVault.sol#61-65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": 113,
                    "vulnerability_code": "    function _transfer(address sender, address recipient, uint256 amount) internal {\n\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n\n        _balances[recipient] = _balances[recipient].add(amount);\n\n        emit Transfer(sender, recipient, amount);\n",
                    "message": "Function 'ERC20._transfer' (bVault.sol#106-113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": 120,
                    "vulnerability_code": "    function _mint(address account, uint256 amount) internal {\n\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n\n\n        _totalSupply = _totalSupply.add(amount);\n\n        _balances[account] = _balances[account].add(amount);\n\n        emit Transfer(address(0), account, amount);\n",
                    "message": "Function 'ERC20._mint' (bVault.sol#114-120) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": 127,
                    "vulnerability_code": "    function _burn(address account, uint256 amount) internal {\n\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n\n        _totalSupply = _totalSupply.sub(amount);\n\n        emit Transfer(account, address(0), amount);\n",
                    "message": "Function 'ERC20._burn' (bVault.sol#121-127) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 134,
                    "vulnerability_code": "    function _approve(address owner, address spender, uint256 amount) internal {\n\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n\n\n        _allowances[owner][spender] = amount;\n\n        emit Approval(owner, spender, amount);\n",
                    "message": "Function 'ERC20._approve' (bVault.sol#128-134) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": 138,
                    "vulnerability_code": "    function _burnFrom(address account, uint256 amount) internal {\n\n        _burn(account, amount);\n\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n",
                    "message": "Function 'ERC20._burnFrom' (bVault.sol#135-138) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 270,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address, uint) external;\n",
                    "message": "Parameter '' of Controller.withdraw (bVault.sol#270) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 270,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address, uint) external;\n",
                    "message": "Parameter '_scope_0' of Controller.withdraw (bVault.sol#270) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint);\n",
                    "message": "Parameter '' of Controller.balanceOf (bVault.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function earn(address, uint) external;\n",
                    "message": "Parameter '' of Controller.earn (bVault.sol#272) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function earn(address, uint) external;\n",
                    "message": "Parameter '_scope_0' of Controller.earn (bVault.sol#272) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": 456,
                    "vulnerability_code": "contract bVault is ERC20, ERC20Detailed {\n\n    using SafeERC20 for IERC20;\n\n    using Address for address;\n\n    using SafeMath for uint256;\n\n    \n\n    IERC20 public token;\n\n    \n\n    uint public min = 9500;\n\n    uint public constant max = 10000;\n\n    uint public earnLowerlimit;\n\n    \n\n    mapping(address => uint256) userDepoistTime;\n\n    address public feeAddress;\n\n    \n\n    uint public fee1 = 5;       //fee within 24 hours\n\n    uint public fee2 = 3;       //fee within 1 week\n\n    uint public fee3 = 1;       //fee without 1 week\n\n    uint public feeMax = 1000;\n\n    \n\n    address public governance;\n\n    address public controller;\n\n\taddress public timelock;\n\n\t\n\n\tbool public RestrictContractCall = true;\n\n\n\n     modifier onlyRestrictContractCall() {\n\n         address s = msg.sender;\n\n        require(!RestrictContractCall || !s.isContract(), \"Contract cannot call\");\n\n        _;\n\n    }\n\n    \n\n    constructor (address _token,uint _earnLowerlimit) public ERC20Detailed(\n\n        string(abi.encodePacked(\"bt:vault: \", ERC20Detailed(_token).name())),\n\n        string(abi.encodePacked(\"b\", ERC20Detailed(_token).symbol())),\n\n        ERC20Detailed(_token).decimals()\n\n    ) {\n\n        token = IERC20(_token);\n\n        governance = tx.origin;\n\n        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n\n        earnLowerlimit = _earnLowerlimit;\n\n        feeAddress = tx.origin;\n\n\t\ttimelock = tx.origin;\n\n    }\n\n    \n\n    function balance() public view returns (uint) {\n\n        return token.balanceOf(address(this))\n\n                .add(Controller(controller).balanceOf(address(token)));\n\n    }\n\n    \n\n    function setMin(uint _min) external {\n\n        require(msg.sender == governance, \"!governance\");\n\n        min = _min;\n\n    }\n\n    \n\n    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n\n    }\n\n    \n\n    function setController(address _controller) public {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        controller = _controller;\n\n    }\n\n    function setEarnLowerlimit(uint256 _earnLowerlimit) public{\n\n      require(msg.sender == governance, \"!governance\");\n\n      earnLowerlimit = _earnLowerlimit;\n\n  }\n\n    \n\n    // Custom logic in here for how much the vault allows to be borrowed\n\n    // Sets minimum required on-hand to keep small withdrawals cheap\n\n    function available() public view returns (uint) {\n\n        return token.balanceOf(address(this)).mul(min).div(max);\n\n    }\n\n    \n\n    function earn() public {\n\n        uint _bal = available();\n\n        token.safeTransfer(controller, _bal);\n\n        Controller(controller).earn(address(token), _bal);\n\n    }\n\n    \n\n    function depositAll() external {\n\n        deposit(token.balanceOf(msg.sender));\n\n    }\n\n    //SWC-Reentrancy: L357-L375\n\n    function deposit(uint _amount) public onlyRestrictContractCall {\n\n\t\trequire(_amount > 0, \"Cannot deposit 0\");\n\n        uint _pool = balance();\n\n        uint _before = token.balanceOf(address(this));\n\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint _after = token.balanceOf(address(this));\n\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\n\n        uint shares = 0;\n\n        if (totalSupply() == 0) {\n\n            shares = _amount;\n\n        } else {\n\n            shares = (_amount.mul(totalSupply())).div(_pool);\n\n        }\n\n        _mint(msg.sender, shares);\n\n        userDepoistTime[msg.sender] = now;\n\n        if (token.balanceOf(address(this))>earnLowerlimit){\n\n          earn();\n\n        }\n\n    }\n\n    \n\n    function withdrawAll() external {\n\n        withdraw(balanceOf(msg.sender));\n\n    }\n\n    \n\n    \n\n    \n\n    // No rebalance implementation for lower fees and faster swaps\n\n    function withdraw(uint _shares) public onlyRestrictContractCall {\n\n\t\trequire(_shares > 0, \"Cannot withdraw 0\");\n\n\n\n        uint r = (balance().mul(_shares)).div(totalSupply());\n\n        _burn(msg.sender, _shares);\n\n        \n\n        // Check balance\n\n        uint b = token.balanceOf(address(this));\n\n        if (b < r) {\n\n            uint _withdraw = r.sub(b);\n\n            Controller(controller).withdraw(address(token), _withdraw);\n\n            uint _after = token.balanceOf(address(this));\n\n            uint _diff = _after.sub(b);\n\n            if (_diff < _withdraw) {\n\n                r = b.add(_diff);\n\n            }\n\n        }\n\n        uint feeRatio = getFeeRatio();\n\n        if(feeRatio>0){\n\n            uint fee = r.mul(feeRatio).div(feeMax);\n\n            r = r.sub(fee);\n\n            token.safeTransfer(feeAddress,fee);\n\n        }\n\n        token.safeTransfer(msg.sender, r);\n\n    }\n\n    \n\n    function getFeeRatio() internal view returns(uint)\n\n    {\n\n        uint256 t = now - userDepoistTime[msg.sender];\n\n        if(t > 604800) {//7*24*60*60\n\n            return fee3;\n\n        }\n\n        if(t>86400) {//24*60*60\n\n            return fee2;\n\n        }\n\n        return fee1;\n\n    }\n\n    \n\n    function getPricePerFullShare() public view returns (uint) {\n\n        if (totalSupply()==0) {\n\n            return 0;\n\n        }\n\n        return balance().mul(1e18).div(totalSupply());\n\n    }\n\n\n\n    function setFeeRatio(uint[3] memory fees) public\n\n    {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        require(fees[0]<feeMax&&fees[1]<feeMax&&fees[2]<feeMax,\"The fee is too high\");\n\n        fee1 = fees[0];\n\n        fee2 = fees[1];\n\n        fee3 = fees[2];\n\n    }\n\n    \n\n    function setFeeAddress(address fadd) public \n\n    {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        feeAddress = fadd;\n\n    }\n\n\t\n\n\tfunction setTimeLock(address _timelock) public \n\n    {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        timelock = _timelock;\n\n    }\n\n    \n\n    function setRestrictContractCall(bool enabled) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        RestrictContractCall = enabled;\n\n    }\n",
                    "message": "Contract 'bVault' (bVault.sol#275-456) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (address _token,uint _earnLowerlimit) public ERC20Detailed(\n",
                    "message": "Parameter '_token' of bVault. (bVault.sol#306) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (address _token,uint _earnLowerlimit) public ERC20Detailed(\n",
                    "message": "Parameter '_earnLowerlimit' of bVault. (bVault.sol#306) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMin(uint _min) external {\n",
                    "message": "Parameter '_min' of bVault.setMin (bVault.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": "Parameter '_governance' of bVault.setGovernance (bVault.sol#329) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) public {\n",
                    "message": "Parameter '_controller' of bVault.setController (bVault.sol#334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setEarnLowerlimit(uint256 _earnLowerlimit) public{\n",
                    "message": "Parameter '_earnLowerlimit' of bVault.setEarnLowerlimit (bVault.sol#338) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint _amount) public onlyRestrictContractCall {\n",
                    "message": "Parameter '_amount' of bVault.deposit (bVault.sol#359) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint _shares) public onlyRestrictContractCall {\n",
                    "message": "Parameter '_shares' of bVault.withdraw (bVault.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 446,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setTimeLock(address _timelock) public \n",
                    "message": "Parameter '_timelock' of bVault.setTimeLock (bVault.sol#446) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public constant max = 10000;\n",
                    "message": "Constant 'bVault.max' (bVault.sol#283) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tbool public RestrictContractCall = true;\n",
                    "message": "Variable 'bVault.RestrictContractCall' (bVault.sol#298) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMin(uint _min) external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setEarnLowerlimit(uint256 _earnLowerlimit) public{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setFeeRatio(uint[3] memory fees) public\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 440,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setFeeAddress(address fadd) public \n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 446,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setTimeLock(address _timelock) public \n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setRestrictContractCall(bool enabled) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private _owner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        feeAddress = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\ttimelock = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) userDepoistTime;\n",
                    "message": null
                }
            ]
        }
    },
    "bt-finance-6300bc1271b73a1755fae02594d25fdf6fa39a9c/contracts/vault/bVaultETH.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal { }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = _msgSender();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0), _owner);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (uint _earnLowerlimit) public ERC20Detailed(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        \"BT:vault:ETH\",\"bETH\",18\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        earnLowerlimit = _earnLowerlimit;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        feeAddress = tx.origin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\ttimelock = tx.origin;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(), \"Ownable: caller is not the owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: mint to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"SafeERC20: low-level call failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!RestrictContractCall || !s.isContract(), \"Contract cannot call\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(fees[0]<feeMax&&fees[1]<feeMax&&fees[2]<feeMax,\"The fee is too high\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == timelock, \"!timelock\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governance, \"!governance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(fees[0]<feeMax&&fees[1]<feeMax&&fees[2]<feeMax,\"The fee is too high\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((value == 0) || (token.allowance(address(this), spender) == 0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"SafeERC20: approve from non-zero to non-zero allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_60"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": 214,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract (bVaultETH.sol#208-214) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "    function withdrawETH(uint _shares) public {\n\n        uint r = (balance().mul(_shares)).div(totalSupply());\n\n        _burn(msg.sender, _shares);\n\n\n\n        // Check balance\n\n        uint b = IERC20(weth).balanceOf(address(this));\n\n        if (b < r) {\n\n            uint _withdraw = r.sub(b);\n\n            Controller(controller).withdraw(weth, _withdraw);\n\n            uint _after = IERC20(weth).balanceOf(address(this));\n\n            uint _diff = _after.sub(b);\n\n            if (_diff < _withdraw) {\n\n                r = b.add(_diff);\n\n            }\n\n        }\n\n        uint feeRatio = getFeeRatio();\n\n        if(feeRatio>0){\n\n            uint fee = r.mul(feeRatio).div(feeMax);\n\n            r = r.sub(fee);\n\n            IERC20(weth).safeTransfer(feeAddress,fee);\n\n        }\n\n        WETH(address(weth)).withdraw(r);\n\n        address(msg.sender).transfer(r);\n",
                    "message": "Reentrancy in bVault.withdrawETH (bVaultETH.sol#390-413):\n\tExternal calls:\n\t- r = (balance().mul(_shares)).div(totalSupply()) (bVaultETH.sol#391)\n\tState variables written after the call(s):\n\t- _totalSupply (bVaultETH.sol#392)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.name (local variable @ bVaultETH.sol#146) shadows:\n\t- ERC20Detailed.name (function @ bVaultETH.sol#151-153)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.symbol (local variable @ bVaultETH.sol#146) shadows:\n\t- ERC20Detailed.symbol (function @ bVaultETH.sol#154-156)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.decimals (local variable @ bVaultETH.sol#146) shadows:\n\t- ERC20Detailed.decimals (function @ bVaultETH.sol#157-159)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": 384,
                    "vulnerability_code": "    function depositETH() public payable {\n\n        uint _pool = balance();\n\n        uint _before = IERC20(weth).balanceOf(address(this));\n\n        uint _amount = msg.value;\n\n        WETH(address(weth)).deposit.value(_amount)();\n\n        uint _after = IERC20(weth).balanceOf(address(this));\n\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\n\n        uint shares = 0;\n\n        if (totalSupply() == 0) {\n\n            shares = _amount;\n\n        } else {\n\n            shares = (_amount.mul(totalSupply())).div(_pool);\n\n        }\n\n        _mint(msg.sender, shares);\n\n        userDepoistTime[msg.sender] = now;\n\n        if (IERC20(weth).balanceOf(address(this))>earnLowerlimit){\n\n          earn();\n\n        }\n",
                    "message": "Reentrancy in bVault.depositETH (bVaultETH.sol#366-384):\n\tExternal calls:\n\t- _pool = balance() (bVaultETH.sol#367)\n\t- _before = IERC20(weth).balanceOf(address(this)) (bVaultETH.sol#368)\n\t- WETH(address(weth)).deposit.value(_amount)() (bVaultETH.sol#370)\n\t- _after = IERC20(weth).balanceOf(address(this)) (bVaultETH.sol#371)\n\tExternal calls sending eth:\n\t- WETH(address(weth)).deposit.value(_amount)() (bVaultETH.sol#370)\n\tState variables written after the call(s):\n\t- _balances (bVaultETH.sol#379)\n\t- _totalSupply (bVaultETH.sol#379)\n\t- userDepoistTime (bVaultETH.sol#380)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "    function withdrawETH(uint _shares) public {\n\n        uint r = (balance().mul(_shares)).div(totalSupply());\n\n        _burn(msg.sender, _shares);\n\n\n\n        // Check balance\n\n        uint b = IERC20(weth).balanceOf(address(this));\n\n        if (b < r) {\n\n            uint _withdraw = r.sub(b);\n\n            Controller(controller).withdraw(weth, _withdraw);\n\n            uint _after = IERC20(weth).balanceOf(address(this));\n\n            uint _diff = _after.sub(b);\n\n            if (_diff < _withdraw) {\n\n                r = b.add(_diff);\n\n            }\n\n        }\n\n        uint feeRatio = getFeeRatio();\n\n        if(feeRatio>0){\n\n            uint fee = r.mul(feeRatio).div(feeMax);\n\n            r = r.sub(fee);\n\n            IERC20(weth).safeTransfer(feeAddress,fee);\n\n        }\n\n        WETH(address(weth)).withdraw(r);\n\n        address(msg.sender).transfer(r);\n",
                    "message": "Reentrancy in bVault.withdrawETH (bVaultETH.sol#390-413):\n\tExternal calls:\n\t- r = (balance().mul(_shares)).div(totalSupply()) (bVaultETH.sol#391)\n\tState variables written after the call(s):\n\t- _balances (bVaultETH.sol#392)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": 214,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != 0x0 && codehash != accountHash);\n",
                    "message": "Address.isContract uses assembly (bVaultETH.sol#208-214)\n\t- bVaultETH.sol#212\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public feeMax = 1000;\n",
                    "message": "bVault.feeMax should be constant (bVaultETH.sol#298)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "    function owner() public view returns (address) {\n\n        return _owner;\n",
                    "message": "Ownable.owner (bVaultETH.sol#44-46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipTransferred(_owner, address(0));\n\n        _owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (bVaultETH.sol#54-57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 60,
                    "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        _transferOwnership(newOwner);\n",
                    "message": "Ownable.transferOwnership (bVaultETH.sol#58-60) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 85,
                    "vulnerability_code": "    function transfer(address recipient, uint256 amount) public returns (bool) {\n\n        _transfer(_msgSender(), recipient, amount);\n\n        return true;\n",
                    "message": "ERC20.transfer (bVaultETH.sol#82-85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address recipient, uint256 amount) external returns (bool);\n",
                    "message": "IERC20.transfer (bVaultETH.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n\n        return _allowances[owner][spender];\n",
                    "message": "ERC20.allowance (bVaultETH.sol#86-88) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) external view returns (uint256);\n",
                    "message": "IERC20.allowance (bVaultETH.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 92,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) public returns (bool) {\n\n        _approve(_msgSender(), spender, amount);\n\n        return true;\n",
                    "message": "ERC20.approve (bVaultETH.sol#89-92) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) external returns (bool);\n",
                    "message": "IERC20.approve (bVaultETH.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n",
                    "message": "IERC20.transferFrom (bVaultETH.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": 97,
                    "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n\n        _transfer(sender, recipient, amount);\n\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n\n        return true;\n",
                    "message": "ERC20.transferFrom (bVaultETH.sol#93-97) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": 101,
                    "vulnerability_code": "    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n\n        return true;\n",
                    "message": "ERC20.increaseAllowance (bVaultETH.sol#98-101) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": 105,
                    "vulnerability_code": "    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n\n        return true;\n",
                    "message": "ERC20.decreaseAllowance (bVaultETH.sol#102-105) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": 153,
                    "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
                    "message": "ERC20Detailed.name (bVaultETH.sol#151-153) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
                    "message": "ERC20Detailed.symbol (bVaultETH.sol#154-156) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 159,
                    "vulnerability_code": "    function decimals() public view returns (uint8) {\n\n        return _decimals;\n",
                    "message": "ERC20Detailed.decimals (bVaultETH.sol#157-159) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": 343,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n",
                    "message": "bVault.setGovernance (bVaultETH.sol#340-343) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": 348,
                    "vulnerability_code": "    function setController(address _controller) public {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        controller = _controller;\n",
                    "message": "bVault.setController (bVaultETH.sol#345-348) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": 352,
                    "vulnerability_code": "    function setEarnLowerlimit(uint256 _earnLowerlimit) public{\n\n      require(msg.sender == governance, \"!governance\");\n\n      earnLowerlimit = _earnLowerlimit;\n",
                    "message": "bVault.setEarnLowerlimit (bVaultETH.sol#349-352) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 432,
                    "vulnerability_code": "    function getPricePerFullShare() public view returns (uint) {\n\n        if (totalSupply()==0) {\n\n            return 0;\n\n        }\n\n        return balance().mul(1e18).div(totalSupply());\n",
                    "message": "bVault.getPricePerFullShare (bVaultETH.sol#427-432) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": 441,
                    "vulnerability_code": "    function setFeeRatio(uint[3] memory fees) public\n\n    {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        require(fees[0]<feeMax&&fees[1]<feeMax&&fees[2]<feeMax,\"The fee is too high\");\n\n        fee1 = fees[0];\n\n        fee2 = fees[1];\n\n        fee3 = fees[2];\n",
                    "message": "bVault.setFeeRatio (bVaultETH.sol#434-441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": 447,
                    "vulnerability_code": "    function setFeeAddress(address fadd) public \n\n    {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        feeAddress = fadd;\n",
                    "message": "bVault.setFeeAddress (bVaultETH.sol#443-447) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": 453,
                    "vulnerability_code": "\tfunction setTimeLock(address _timelock) public \n\n    {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        timelock = _timelock;\n",
                    "message": "bVault.setTimeLock (bVaultETH.sol#449-453) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": 458,
                    "vulnerability_code": "    function setRestrictContractCall(bool enabled) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        RestrictContractCall = enabled;\n",
                    "message": "bVault.setRestrictContractCall (bVaultETH.sol#455-458) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": "Detected issues with version pragma in bVaultETH.sol:\n\t- pragma solidity^0.5.16 (bVaultETH.sol#9): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": 224,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Low level call in Address.sendValue (bVaultETH.sol#218-224):\n\t-(success) = recipient.call.value(amount)() bVaultETH.sol#222\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": 266,
                    "vulnerability_code": "    function callOptionalReturn(IERC20 token, bytes memory data) private {\n\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n\n        require(success, \"SafeERC20: low-level call failed\");\n\n\n\n        if (returndata.length > 0) { // Return data is optional\n\n            // solhint-disable-next-line max-line-length\n\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\n        }\n",
                    "message": "Low level call in SafeERC20.callOptionalReturn (bVaultETH.sol#255-266):\n\t-(success,returndata) = address(token).call(data) bVaultETH.sol#259\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": 28,
                    "vulnerability_code": "    function _msgSender() internal view returns (address payable) {\n\n        return msg.sender;\n",
                    "message": "Function 'Context._msgSender' (bVaultETH.sol#26-28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "    function _msgData() internal view returns (bytes memory) {\n\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\n        return msg.data;\n",
                    "message": "Function 'Context._msgData' (bVaultETH.sol#30-33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "    function _transferOwnership(address newOwner) internal {\n\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (bVaultETH.sol#61-65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": 113,
                    "vulnerability_code": "    function _transfer(address sender, address recipient, uint256 amount) internal {\n\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n\n        _balances[recipient] = _balances[recipient].add(amount);\n\n        emit Transfer(sender, recipient, amount);\n",
                    "message": "Function 'ERC20._transfer' (bVaultETH.sol#106-113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": 120,
                    "vulnerability_code": "    function _mint(address account, uint256 amount) internal {\n\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n\n\n        _totalSupply = _totalSupply.add(amount);\n\n        _balances[account] = _balances[account].add(amount);\n\n        emit Transfer(address(0), account, amount);\n",
                    "message": "Function 'ERC20._mint' (bVaultETH.sol#114-120) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": 127,
                    "vulnerability_code": "    function _burn(address account, uint256 amount) internal {\n\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n\n        _totalSupply = _totalSupply.sub(amount);\n\n        emit Transfer(account, address(0), amount);\n",
                    "message": "Function 'ERC20._burn' (bVaultETH.sol#121-127) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 134,
                    "vulnerability_code": "    function _approve(address owner, address spender, uint256 amount) internal {\n\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n\n\n        _allowances[owner][spender] = amount;\n\n        emit Approval(owner, spender, amount);\n",
                    "message": "Function 'ERC20._approve' (bVaultETH.sol#128-134) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": 138,
                    "vulnerability_code": "    function _burnFrom(address account, uint256 amount) internal {\n\n        _burn(account, amount);\n\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n",
                    "message": "Function 'ERC20._burnFrom' (bVaultETH.sol#135-138) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address, uint) external;\n",
                    "message": "Parameter '' of Controller.withdraw (bVaultETH.sol#278) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address, uint) external;\n",
                    "message": "Parameter '_scope_0' of Controller.withdraw (bVaultETH.sol#278) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint);\n",
                    "message": "Parameter '' of Controller.balanceOf (bVaultETH.sol#279) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function earn(address, uint) external;\n",
                    "message": "Parameter '' of Controller.earn (bVaultETH.sol#280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function earn(address, uint) external;\n",
                    "message": "Parameter '_scope_0' of Controller.earn (bVaultETH.sol#280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": 459,
                    "vulnerability_code": "contract bVault is ERC20, ERC20Detailed {\n\n    using SafeERC20 for IERC20;\n\n    using Address for address;\n\n    using SafeMath for uint256;\n\n    \n\n    uint public min = 9500;\n\n    uint public constant max = 10000;\n\n    uint public earnLowerlimit;\n\n    \n\n    mapping(address => uint256) userDepoistTime;\n\n    address public feeAddress;\n\n    \n\n    uint public fee1 = 5;       //fee within 24 hours\n\n    uint public fee2 = 3;       //fee within 1 week\n\n    uint public fee3 = 1;       //fee without 1 week\n\n    uint public feeMax = 1000;\n\n\n\n    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n\n\n    address public governance;\n\n    address public controller;\n\n\taddress public timelock;\n\n\t\n\n\tbool public RestrictContractCall = true;\n\n\n\n     modifier onlyRestrictContractCall() {\n\n         address s = msg.sender;\n\n        require(!RestrictContractCall || !s.isContract(), \"Contract cannot call\");\n\n        _;\n\n    }\n\n\n\n    function () external payable {\n\n        if (msg.sender != weth) {\n\n            depositETH();\n\n        }\n\n    }\n\n    \n\n    constructor (uint _earnLowerlimit) public ERC20Detailed(\n\n        \"BT:vault:ETH\",\"bETH\",18\n\n    ) {\n\n        governance = tx.origin;\n\n        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n\n        earnLowerlimit = _earnLowerlimit;\n\n        feeAddress = tx.origin;\n\n\t\ttimelock = tx.origin;\n\n    }\n\n    \n\n    function balance() public view returns (uint) {\n\n        return IERC20(weth).balanceOf(address(this))\n\n                .add(Controller(controller).balanceOf(weth));\n\n    }\n\n    \n\n    function setMin(uint _min) external {\n\n        require(msg.sender == governance, \"!governance\");\n\n        min = _min;\n\n    }\n\n    \n\n    function setGovernance(address _governance) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        governance = _governance;\n\n    }\n\n    \n\n    function setController(address _controller) public {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        controller = _controller;\n\n    }\n\n    function setEarnLowerlimit(uint256 _earnLowerlimit) public{\n\n      require(msg.sender == governance, \"!governance\");\n\n      earnLowerlimit = _earnLowerlimit;\n\n  }\n\n    \n\n    // Custom logic in here for how much the vault allows to be borrowed\n\n    // Sets minimum required on-hand to keep small withdrawals cheap\n\n    function available() public view returns (uint) {\n\n        return IERC20(weth).balanceOf(address(this)).mul(min).div(max);\n\n    }\n\n    \n\n    function earn() public {\n\n        uint _bal = available();\n\n        IERC20(weth).safeTransfer(controller, _bal);\n\n        Controller(controller).earn(weth, _bal);\n\n    }\n\n\n\n    function depositETH() public payable {\n\n        uint _pool = balance();\n\n        uint _before = IERC20(weth).balanceOf(address(this));\n\n        uint _amount = msg.value;\n\n        WETH(address(weth)).deposit.value(_amount)();\n\n        uint _after = IERC20(weth).balanceOf(address(this));\n\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\n\n        uint shares = 0;\n\n        if (totalSupply() == 0) {\n\n            shares = _amount;\n\n        } else {\n\n            shares = (_amount.mul(totalSupply())).div(_pool);\n\n        }\n\n        _mint(msg.sender, shares);\n\n        userDepoistTime[msg.sender] = now;\n\n        if (IERC20(weth).balanceOf(address(this))>earnLowerlimit){\n\n          earn();\n\n        }\n\n    }\n\n    \n\n    function withdrawAllETH() external {\n\n        withdrawETH(balanceOf(msg.sender));\n\n    }\n\n\n\n    function withdrawETH(uint _shares) public {\n\n        uint r = (balance().mul(_shares)).div(totalSupply());\n\n        _burn(msg.sender, _shares);\n\n\n\n        // Check balance\n\n        uint b = IERC20(weth).balanceOf(address(this));\n\n        if (b < r) {\n\n            uint _withdraw = r.sub(b);\n\n            Controller(controller).withdraw(weth, _withdraw);\n\n            uint _after = IERC20(weth).balanceOf(address(this));\n\n            uint _diff = _after.sub(b);\n\n            if (_diff < _withdraw) {\n\n                r = b.add(_diff);\n\n            }\n\n        }\n\n        uint feeRatio = getFeeRatio();\n\n        if(feeRatio>0){\n\n            uint fee = r.mul(feeRatio).div(feeMax);\n\n            r = r.sub(fee);\n\n            IERC20(weth).safeTransfer(feeAddress,fee);\n\n        }\n\n        WETH(address(weth)).withdraw(r);\n\n        address(msg.sender).transfer(r);\n\n    }\n\n    \n\n    function getFeeRatio() internal returns(uint)\n\n    {\n\n        uint256 t = now - userDepoistTime[msg.sender];\n\n        if(t > 604800) {//7*24*60*60\n\n            return fee3;\n\n        }\n\n        if(t>86400) {//24*60*60\n\n            return fee2;\n\n        }\n\n        return fee1;\n\n    }\n\n    \n\n    function getPricePerFullShare() public view returns (uint) {\n\n        if (totalSupply()==0) {\n\n            return 0;\n\n        }\n\n        return balance().mul(1e18).div(totalSupply());\n\n    }\n\n\n\n    function setFeeRatio(uint[3] memory fees) public\n\n    {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        require(fees[0]<feeMax&&fees[1]<feeMax&&fees[2]<feeMax,\"The fee is too high\");\n\n        fee1 = fees[0];\n\n        fee2 = fees[1];\n\n        fee3 = fees[2];\n\n    }\n\n    \n\n    function setFeeAddress(address fadd) public \n\n    {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        feeAddress = fadd;\n\n    }\n\n\t\n\n\tfunction setTimeLock(address _timelock) public \n\n    {\n\n        require(msg.sender == timelock, \"!timelock\");\n\n        timelock = _timelock;\n\n    }\n\n    \n\n    function setRestrictContractCall(bool enabled) public {\n\n        require(msg.sender == governance, \"!governance\");\n\n        RestrictContractCall = enabled;\n\n    }\n",
                    "message": "Contract 'bVault' (bVaultETH.sol#283-459) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (uint _earnLowerlimit) public ERC20Detailed(\n",
                    "message": "Parameter '_earnLowerlimit' of bVault. (bVaultETH.sol#320) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMin(uint _min) external {\n",
                    "message": "Parameter '_min' of bVault.setMin (bVaultETH.sol#335) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": "Parameter '_governance' of bVault.setGovernance (bVaultETH.sol#340) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) public {\n",
                    "message": "Parameter '_controller' of bVault.setController (bVaultETH.sol#345) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setEarnLowerlimit(uint256 _earnLowerlimit) public{\n",
                    "message": "Parameter '_earnLowerlimit' of bVault.setEarnLowerlimit (bVaultETH.sol#349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawETH(uint _shares) public {\n",
                    "message": "Parameter '_shares' of bVault.withdrawETH (bVaultETH.sol#390) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setTimeLock(address _timelock) public \n",
                    "message": "Parameter '_timelock' of bVault.setTimeLock (bVaultETH.sol#449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public constant max = 10000;\n",
                    "message": "Constant 'bVault.max' (bVaultETH.sol#289) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": "Constant 'bVault.weth' (bVaultETH.sol#300) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tbool public RestrictContractCall = true;\n",
                    "message": "Variable 'bVault.RestrictContractCall' (bVaultETH.sol#306) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMin(uint _min) external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernance(address _governance) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address _controller) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setEarnLowerlimit(uint256 _earnLowerlimit) public{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setFeeRatio(uint[3] memory fees) public\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setFeeAddress(address fadd) public \n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setTimeLock(address _timelock) public \n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setRestrictContractCall(bool enabled) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private _owner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governance = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        feeAddress = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TX_ORIGIN",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\ttimelock = tx.origin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes memory returndata) = address(token).call(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) userDepoistTime;\n",
                    "message": null
                }
            ]
        }
    }
}